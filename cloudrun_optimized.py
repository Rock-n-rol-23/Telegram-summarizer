#!/usr/bin/env python3
"""
Cloud Run –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""
import asyncio
import os
import sys
import logging
import signal
from aiohttp import web
import threading
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Cloud Run
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
app = None
site = None
bot_task = None
shutdown_event = None

async def health_handler(request):
    """Health check endpoint –¥–ª—è Cloud Run - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""
    return web.json_response({
        'status': 'ok',
        'message': 'Bot is running',
        'service': 'telegram-bot',
        'ready': True,
        'health': 'healthy'
    }, status=200)

async def root_handler(request):
    """–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return web.Response(
        text='Telegram Summarization Bot - Cloud Run Ready',
        status=200,
        content_type='text/plain'
    )

async def status_handler(request):
    """–°—Ç–∞—Ç—É—Å endpoint"""
    return web.json_response({
        'status': 'running',
        'service': 'telegram-summarization-bot',
        'features': [
            'AI text summarization',
            'Multi-language support',
            'Groq API integration',
            'Health check endpoints'
        ]
    }, status=200)

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ async —Ä–µ–∂–∏–º–µ"""
    global shutdown_event
    try:
        logger.info("Groq API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞") 
        logger.info("Simple Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("–ó–∞–ø—É—Å–∫ Simple Telegram Bot")
        
        from simple_bot import SimpleTelegramBot
        bot = SimpleTelegramBot()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π shutdown
        await bot.run()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
        if shutdown_event:
            shutdown_event.set()

async def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö endpoint'–æ–≤ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Cloud Run
    app.router.add_get('/', root_handler)
    app.router.add_get('/health', health_handler)
    app.router.add_get('/ready', health_handler)  # Readiness probe
    app.router.add_get('/status', status_handler)
    
    return app

async def graceful_shutdown(sig):
    """Graceful shutdown handler"""
    global bot_task, site, shutdown_event
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig.name}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
    
    if shutdown_event:
        shutdown_event.set()
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
    if bot_task and not bot_task.done():
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram –±–æ—Ç–∞...")
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    if site:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä...")
        await site.stop()
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    logger.info("Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global app, site, bot_task, shutdown_event
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot –¥–ª—è Cloud Run")
    logger.info(f"Python: {sys.version}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    port = int(os.getenv('PORT', 5000))
    logger.info(f"–ü–æ—Ä—Ç: {port}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ event –¥–ª—è shutdown
    shutdown_event = asyncio.Event()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = await create_app()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig, lambda s=sig: asyncio.create_task(graceful_shutdown(s))
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        
        logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        logger.info("–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        bot_task = asyncio.create_task(start_telegram_bot())
        
        # –û–∂–∏–¥–∞–Ω–∏–µ shutdown event
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if bot_task and not bot_task.done():
            bot_task.cancel()
        if site:
            await site.stop()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)