"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import os
import tempfile
import time

def test_file_extractor():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è file_id"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º file_extractor...")
    
    from audio_pipeline.file_extractor import extract_audio_file_id_and_kind, get_audio_metadata
    
    # –¢–µ—Å—Ç voice message
    voice_msg = {
        "voice": {
            "file_id": "voice_test_123",
            "duration": 10,
            "mime_type": "audio/ogg",
            "file_size": 1024
        }
    }
    
    try:
        file_id, kind = extract_audio_file_id_and_kind(voice_msg)
        print(f"‚úÖ Voice: file_id={file_id}, kind={kind}")
        
        metadata = get_audio_metadata(voice_msg, kind)
        print(f"‚úÖ Metadata: {metadata}")
    except Exception as e:
        print(f"‚ùå Voice test failed: {e}")
    
    # –¢–µ—Å—Ç document-audio
    doc_msg = {
        "document": {
            "file_id": "doc_audio_456",
            "mime_type": "audio/x-wav",
            "file_size": 2048,
            "file_name": "recording.wav"
        }
    }
    
    try:
        file_id, kind = extract_audio_file_id_and_kind(doc_msg)
        print(f"‚úÖ Document-audio: file_id={file_id}, kind={kind}")
        
        metadata = get_audio_metadata(doc_msg, kind)
        print(f"‚úÖ Metadata: {metadata}")
    except Exception as e:
        print(f"‚ùå Document-audio test failed: {e}")

def test_ffmpeg_utils():
    """–¢–µ—Å—Ç FFmpeg —É—Ç–∏–ª–∏—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º FFmpeg utils...")
    
    from utils.ffmpeg import is_ffmpeg_available, get_ffmpeg_path
    
    try:
        available = is_ffmpeg_available()
        path = get_ffmpeg_path()
        print(f"‚úÖ FFmpeg available: {available}, path: {path}")
    except Exception as e:
        print(f"‚ùå FFmpeg test failed: {e}")

def test_vosk_transcriber():
    """–¢–µ—Å—Ç Vosk transcriber (–±–µ–∑ ASR –¥–≤–∏–∂–∫–æ–≤)"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Vosk transcriber...")
    
    from audio_pipeline.vosk_transcriber import get_available_engines, check_ffmpeg
    
    try:
        engines = get_available_engines()
        ffmpeg_ok = check_ffmpeg()
        print(f"‚úÖ Available engines: {engines}")
        print(f"‚úÖ FFmpeg check: {ffmpeg_ok}")
    except Exception as e:
        print(f"‚ùå Vosk test failed: {e}")

def test_downloader():
    """–¢–µ—Å—Ç downloader (dry run)"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º downloader...")
    
    from audio_pipeline.downloader import download_audio
    
    # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    class MockBot:
        async def download_file(self, file_id, dst_path):
            print(f"Mock download: {file_id} -> {dst_path}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
            with open(dst_path, 'wb') as f:
                f.write(b"mock audio data")
            return dst_path
    
    try:
        mock_bot = MockBot()
        temp_dir = tempfile.mkdtemp()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è async)
        print(f"‚úÖ Downloader interface OK, temp_dir: {temp_dir}")
    except Exception as e:
        print(f"‚ùå Downloader test failed: {e}")

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    from config import Config
    
    try:
        config = Config()
        print(f"‚úÖ Audio enabled: {config.AUDIO_SUMMARY_ENABLED}")
        print(f"‚úÖ ASR engine: {getattr(config, 'ASR_ENGINE', 'not set')}")
        print(f"‚úÖ Max duration: {config.ASR_MAX_DURATION_MIN}min")
        print(f"‚úÖ FFmpeg path: {config.FFMPEG_PATH}")
    except Exception as e:
        print(f"‚ùå Config test failed: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    test_config()
    test_file_extractor() 
    test_ffmpeg_utils()
    test_vosk_transcriber()
    test_downloader()
    
    print("\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install vosk==0.3.45")