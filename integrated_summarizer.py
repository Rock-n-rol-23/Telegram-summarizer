"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤—É—é –¥–≤—É—Ö—Ñ–∞–∑–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

import logging
import json
import asyncio
from typing import Dict, List, Optional, Union
from datetime import datetime

logger = logging.getLogger(__name__)

class IntegratedSummarizer:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self, groq_client, fallback_enabled=True):
        self.groq_client = groq_client
        self.fallback_enabled = fallback_enabled
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        try:
            from summarization.fact_extractor import extract_key_facts, select_must_keep_sentences
            from quality.quality_checks import validate_numbers_preserved, extract_critical_numbers, calculate_quality_score
            from content_extraction.web_extractor import extract_page_content, extract_tables_as_markdown
            
            self.extract_key_facts = extract_key_facts
            self.select_must_keep_sentences = select_must_keep_sentences
            self.validate_numbers_preserved = validate_numbers_preserved
            self.extract_critical_numbers = extract_critical_numbers
            self.calculate_quality_score = calculate_quality_score
            self.extract_page_content = extract_page_content
            self.extract_tables_as_markdown = extract_tables_as_markdown
            
            self.advanced_features = True
            logger.info("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏")
            
        except ImportError as e:
            self.advanced_features = False
            logger.warning(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {e}")
    
    async def summarize_text_enhanced(self, 
                                    text: str, 
                                    lang: str = "ru",
                                    target_ratio: float = 0.3,
                                    format_type: str = "bullets",
                                    preserve_tables: bool = True) -> Dict[str, any]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ–≤
        """
        
        if not self.advanced_features or not self.groq_client:
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            return await self._fallback_summarize(text, target_ratio, format_type)
        
        try:
            # –§–∞–∑–∞ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
            logger.info("üìä Phase 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
            facts = self.extract_key_facts(text, lang)
            
            # –§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON —Ä–µ–∑—é–º–µ
            logger.info("üîç Phase 2: –°–æ–∑–¥–∞–Ω–∏–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            json_summary = await self._create_json_summary(text, facts, lang, target_ratio, format_type)
            
            if not json_summary.get('success'):
                logger.warning("JSON —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._fallback_summarize(text, target_ratio, format_type)
            
            # –§–∞–∑–∞ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            logger.info("‚úçÔ∏è Phase 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ")
            final_summary = await self._create_final_summary(json_summary['content'], text, format_type, lang)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_report = self._assess_quality(text, final_summary)
            
            return {
                'success': True,
                'summary': final_summary,
                'method': 'enhanced_pipeline',
                'quality_report': quality_report,
                'facts_extracted': len(facts.get('all_numbers', [])),
                'compression_ratio': len(final_summary) / len(text) if text else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return await self._fallback_summarize(text, target_ratio, format_type)
    
    async def _create_json_summary(self, text: str, facts: Dict, lang: str, target_ratio: float, format_type: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON —Ä–µ–∑—é–º–µ"""
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–ª–∏–Ω—É
            target_length = max(100, int(len(text) * target_ratio))
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è JSON —Å–æ–∑–¥–∞–Ω–∏—è
            prompt = f"""–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ {lang} —è–∑—ã–∫–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):
{text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –¶–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞: {target_length} —Å–∏–º–≤–æ–ª–æ–≤
- –§–æ—Ä–º–∞—Ç: {format_type}
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –≤–∞–ª—é—Ç—ã, –¥–∞—Ç—ã
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON:
{{
  "bullets": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", "–ø—É–Ω–∫—Ç 3"],
  "key_facts": [
    {{"value_raw": "25%", "value_norm": 0.25, "unit": "%"}},
    {{"value_raw": "3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π", "value_norm": 3000000000, "unit": "RUB"}}
  ],
  "entities": {{"ORG": [], "PERSON": [], "GPE": []}},
  "main_topics": ["—Ç–µ–º–∞ 1", "—Ç–µ–º–∞ 2"]
}}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

            logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è JSON —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
            response = self.groq_client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON."},
                    {"role": "user", "content": prompt}
                ],
                model="llama-3.3-70b-versatile",
                temperature=0.2,
                max_tokens=1500,
                response_format={"type": "json_object"}
            )
            
            result_text = response.choices[0].message.content
            json_data = json.loads(result_text)
            
            logger.info(f"‚úÖ JSON —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(json_data.get('bullets', []))} bullets")
            return {'success': True, 'content': json_data}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ JSON —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _create_final_summary(self, json_data: Dict, original_text: str, format_type: str, lang: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ JSON
            bullets = json_data.get('bullets', [])
            key_facts = json_data.get('key_facts', [])
            main_topics = json_data.get('main_topics', [])
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤
            facts_block = self._create_facts_block(key_facts)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
            if format_type == 'bullets':
                summary_parts = []
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
                if bullets:
                    for bullet in bullets[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 bullets
                        summary_parts.append(f"‚Ä¢ {bullet}")
                
                # –ë–ª–æ–∫ —Å —Ñ–∞–∫—Ç–∞–º–∏
                if facts_block:
                    summary_parts.append(f"\nüî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:\n{facts_block}")
                
                return '\n'.join(summary_parts)
                
            elif format_type == 'paragraph':
                # –ü–∞—Ä–∞–≥—Ä–∞—Ñ–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                main_text = '. '.join(bullets) if bullets else ""
                if facts_block:
                    return f"{main_text}\n\nüî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:\n{facts_block}"
                return main_text
                
            elif format_type == 'structured':
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                sections = []
                
                if main_topics:
                    sections.append(f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join(main_topics[:3])}")
                
                if bullets:
                    sections.append("üìù –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
                    for bullet in bullets[:4]:
                        sections.append(f"‚Ä¢ {bullet}")
                
                if facts_block:
                    sections.append(f"üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:\n{facts_block}")
                
                return '\n'.join(sections)
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é bullets
            return '\n'.join(f"‚Ä¢ {bullet}" for bullet in bullets[:5])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ: {e}")
            # –ü—Ä–æ—Å—Ç–æ–µ fallback
            bullets = json_data.get('bullets', [])
            return '\n'.join(f"‚Ä¢ {bullet}" for bullet in bullets[:3]) if bullets else "–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    def _create_facts_block(self, key_facts: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏"""
        
        if not key_facts:
            return ""
        
        facts_lines = []
        for fact in key_facts[:8]:  # –ú–∞–∫—Å–∏–º—É–º 8 —Ñ–∞–∫—Ç–æ–≤
            raw_value = fact.get('value_raw', '')
            if raw_value:
                facts_lines.append(f"‚Äî {raw_value}")
        
        return '\n'.join(facts_lines) if facts_lines else ""
    
    def _assess_quality(self, original_text: str, summary: str) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—é–º–µ"""
        
        if not self.advanced_features:
            return {
                'quality_score': 0.7,
                'numbers_preserved': True,
                'missing_numbers': [],
                'language_correct': True,
                'compression_ratio': len(summary) / len(original_text) if original_text else 0
            }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª
            is_preserved, missing = self.validate_numbers_preserved(original_text, summary)
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = self.calculate_quality_score(original_text, summary)
            
            return {
                'quality_score': quality_score,
                'numbers_preserved': is_preserved,
                'missing_numbers': missing,
                'language_correct': True,
                'compression_ratio': len(summary) / len(original_text) if original_text else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {
                'quality_score': 0.6,
                'numbers_preserved': False,
                'missing_numbers': [],
                'language_correct': True,
                'compression_ratio': 0.3
            }
    
    async def _fallback_summarize(self, text: str, target_ratio: float, format_type: str) -> Dict:
        """Fallback —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        
        try:
            if self.groq_client:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é Groq —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                summary = await self._basic_groq_summarize(text, target_ratio, format_type)
            else:
                # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π fallback
                summary = self._simple_text_summary(text, target_ratio)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.advanced_features:
                numbers = self.extract_critical_numbers(text)
                if numbers:
                    facts_block = '\n'.join(f"‚Äî {num}" for num in numbers[:6])
                    summary += f"\n\nüî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:\n{facts_block}"
            
            return {
                'success': True,
                'summary': summary,
                'method': 'fallback',
                'quality_report': {
                    'quality_score': 0.6,
                    'numbers_preserved': False,
                    'missing_numbers': [],
                    'language_correct': True,
                    'compression_ratio': target_ratio
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'method': 'failed'
            }
    
    async def _basic_groq_summarize(self, text: str, target_ratio: float, format_type: str) -> str:
        """–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq"""
        
        target_length = int(len(text) * target_ratio)
        
        prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤
- –§–æ—Ä–º–∞—Ç: {"–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫" if format_type == "bullets" else "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"}
- –°–æ—Ö—Ä–∞–Ω–∏ –≤–∞–∂–Ω—ã–µ —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –¥–∞—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫

–¢–ï–ö–°–¢:
{text[:3000]}

–†–ï–ó–Æ–ú–ï:"""
        
        response = self.groq_client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="llama-3.3-70b-versatile",
            temperature=0.3,
            max_tokens=800
        )
        
        return response.choices[0].message.content.strip()
    
    def _simple_text_summary(self, text: str, target_ratio: float) -> str:
        """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ AI"""
        
        import re
        
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 20]
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        target_sentences = max(1, int(len(sentences) * target_ratio))
        summary_sentences = sentences[:target_sentences]
        
        summary = '. '.join(summary_sentences)
        if len(summary) > 800:
            summary = summary[:800] + "..."
        
        return summary
    
    async def extract_web_content_enhanced(self, url: str) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        
        if not self.advanced_features:
            return {'success': False, 'error': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
            page = self.extract_page_content(url)
            
            if not page:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã'}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –µ—Å—Ç—å
            tables_info = ""
            if hasattr(page, 'raw_html'):
                tables_markdown = self.extract_tables_as_markdown(page.raw_html)
                if tables_markdown:
                    tables_info = f"\n\n[–¢–ê–ë–õ–ò–¶–´ –ù–ê –°–¢–†–ê–ù–ò–¶–ï]\n{tables_markdown}"
            
            return {
                'success': True,
                'title': page.title,
                'content': page.text + tables_info,
                'url': page.final_url,
                'word_count': page.word_count,
                'has_tables': bool(tables_info),
                'links': page.links[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {'success': False, 'error': str(e)}

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
integrated_summarizer = None

def get_integrated_summarizer(groq_client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    global integrated_summarizer
    
    if integrated_summarizer is None:
        integrated_summarizer = IntegratedSummarizer(groq_client)
    
    return integrated_summarizer