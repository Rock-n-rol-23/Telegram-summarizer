"""
PPTX –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∞–π–¥–æ–≤ –∏ –∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞
"""

import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ python-pptx
try:
    from pptx import Presentation
    PPTX_AVAILABLE = True
except ImportError:
    PPTX_AVAILABLE = False
    logger.warning("python-pptx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - PPTX –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def extract_text_from_pptx(path: str) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PPTX –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.
    
    Args:
        path: –ø—É—Ç—å –∫ PPTX —Ñ–∞–π–ª—É
    
    Returns:
        Dict —Å –ø–æ–ª—è–º–∏: success, text, method, meta, error
    """
    
    if not PPTX_AVAILABLE:
        return {
            "success": False, 
            "error": "python-pptx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç python-pptx"
        }
    
    try:
        prs = Presentation(path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è PPTX {path}: {e}")
        return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PPTX: {e}"}

    slides_meta: List[dict] = []
    combined_text: List[str] = []
    total_slides = len(prs.slides)
    
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PPTX: {total_slides} —Å–ª–∞–π–¥–æ–≤")

    for idx, slide in enumerate(prs.slides, start=1):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞
            title = ""
            if hasattr(slide.shapes, "title") and slide.shapes.title and slide.shapes.title.text:
                title = slide.shapes.title.text.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
            content_parts: List[str] = []
            
            for shape in slide.shapes:
                if hasattr(shape, "text_frame") and shape.text_frame:
                    shape_text = _extract_text_from_shape(shape)
                    if shape_text and shape_text != title:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        content_parts.append(shape_text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞
            notes = ""
            try:
                if hasattr(slide, "notes_slide") and slide.notes_slide:
                    notes_slide = slide.notes_slide
                    if hasattr(notes_slide, "notes_text_frame") and notes_slide.notes_text_frame:
                        notes = (notes_slide.notes_text_frame.text or "").strip()
            except Exception as notes_err:
                logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Å–æ —Å–ª–∞–π–¥–∞ {idx}: {notes_err}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥–∞
            slide_meta = {
                "index": idx,
                "title": title,
                "content": content_parts,
                "notes": notes,
                "has_content": bool(title or content_parts or notes)
            }
            slides_meta.append(slide_meta)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Å–ª–∞–π–¥–∞
            slide_text_parts = []
            
            if title:
                slide_text_parts.append(f"=== –°–ª–∞–π–¥ {idx}: {title} ===")
            else:
                slide_text_parts.append(f"=== –°–ª–∞–π–¥ {idx} ===")
            
            if content_parts:
                for part in content_parts:
                    if part.strip():
                        slide_text_parts.append(part.strip())
            
            if notes:
                slide_text_parts.append(f"üìù –ó–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞: {notes}")
            
            if slide_text_parts:
                combined_text.append("\n".join(slide_text_parts))
                
            logger.debug(f"–°–ª–∞–π–¥ {idx}: –∑–∞–≥–æ–ª–æ–≤–æ–∫='{title[:50]}...', –∫–æ–Ω—Ç–µ–Ω—Ç={len(content_parts)} –±–ª–æ–∫–æ–≤, –∑–∞–º–µ—Ç–∫–∏={bool(notes)}")
            
        except Exception as slide_err:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∞–π–¥–∞ {idx}: {slide_err}")
            slides_meta.append({
                "index": idx,
                "title": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∞–π–¥–∞ {idx}",
                "content": [],
                "notes": "",
                "has_content": False,
                "error": str(slide_err)
            })

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    full_text = "\n\n".join(combined_text).strip()
    
    if not full_text:
        return {
            "success": False, 
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PPTX - –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞"
        }

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    slides_with_content = sum(1 for slide in slides_meta if slide["has_content"])
    slides_with_notes = sum(1 for slide in slides_meta if slide["notes"])
    
    logger.info(f"PPTX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {slides_with_content}/{total_slides} —Å–ª–∞–π–¥–æ–≤")
    
    return {
        "success": True,
        "text": full_text,
        "method": "python-pptx",
        "meta": {
            "slides": slides_meta,
            "total_slides": total_slides,
            "slides_with_content": slides_with_content,
            "slides_with_notes": slides_with_notes,
            "extraction_stats": f"{slides_with_content} —Å–ª–∞–π–¥–æ–≤ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, {slides_with_notes} —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"
        }
    }


def _extract_text_from_shape(shape) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å–ª–∞–π–¥–∞"""
    try:
        if not hasattr(shape, "text_frame") or not shape.text_frame:
            return ""
        
        text_parts = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
        for paragraph in shape.text_frame.paragraphs:
            paragraph_text = paragraph.text.strip()
            if paragraph_text:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                level = getattr(paragraph, "level", 0)
                indent = "  " * level
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
                if level > 0:
                    paragraph_text = f"{indent}‚Ä¢ {paragraph_text}"
                
                text_parts.append(paragraph_text)
        
        return "\n".join(text_parts).strip()
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–ª–æ–∫–∞: {e}")
        return ""


def extract_pptx_summary_info(slides_meta: List[dict]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not slides_meta:
        return "–ü—É—Å—Ç–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
    
    total_slides = len(slides_meta)
    slides_with_content = sum(1 for slide in slides_meta if slide.get("has_content", False))
    slides_with_notes = sum(1 for slide in slides_meta if slide.get("notes"))
    
    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–∞–π–¥–æ–≤
    titles = []
    for slide in slides_meta[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å–ª–∞–π–¥–æ–≤
        title = slide.get("title", "").strip()
        if title:
            titles.append(f"‚Ä¢ {title}")
        else:
            titles.append(f"‚Ä¢ –°–ª–∞–π–¥ {slide.get('index', '?')} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
    
    summary_parts = [
        f"üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {total_slides} —Å–ª–∞–π–¥–æ–≤",
        f"üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ {slides_with_content} —Å–ª–∞–π–¥–∞—Ö"
    ]
    
    if slides_with_notes > 0:
        summary_parts.append(f"üìù –ó–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞: {slides_with_notes} —Å–ª–∞–π–¥–æ–≤")
    
    if titles:
        summary_parts.append("\nüéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–∞–π–¥—ã:")
        summary_parts.extend(titles)
        
        if total_slides > 5:
            summary_parts.append(f"‚Ä¢ ... –∏ –µ—â–µ {total_slides - 5} —Å–ª–∞–π–¥–æ–≤")
    
    return "\n".join(summary_parts)


def check_pptx_availability() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PPTX –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return PPTX_AVAILABLE


def get_pptx_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ PPTX"""
    if PPTX_AVAILABLE:
        return "PPTX –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"
    else:
        return "PPTX –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-pptx"