#!/usr/bin/env python3
"""
–ì–æ—Ç–æ–≤—ã–π –∫ –¥–µ–ø–ª–æ—é —Ñ–∞–π–ª –¥–ª—è Telegram –±–æ—Ç–∞
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
"""

import os
import sys
import asyncio
import logging
from aiohttp import web
from simple_bot import SimpleTelegramBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class ReadyToDeploy:
    """–ì–æ—Ç–æ–≤—ã–π –∫ –¥–µ–ø–ª–æ—é —Å–µ—Ä–≤–µ—Ä"""
    
    def __init__(self):
        self.bot = None
        self.app = None
        self.runner = None
        self.site = None
        self.bot_task = None
        self.shutdown_event = asyncio.Event()
        
    async def health_endpoint(self, request):
        """–û—Å–Ω–æ–≤–Ω–æ–π health check endpoint"""
        return web.json_response({
            "status": "healthy",
            "service": "telegram-bot",
            "ready": True,
            "message": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        }, status=200)
    
    async def root_endpoint(self, request):
        """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
        return web.Response(
            text="Telegram Bot - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            status=200,
            headers={'Content-Type': 'text/plain; charset=utf-8'}
        )
        
    async def setup_server(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.app = web.Application()
        
        # –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ endpoints –¥–ª—è –¥–µ–ø–ª–æ—è
        self.app.router.add_get('/', self.root_endpoint)
        self.app.router.add_get('/health', self.health_endpoint)
        self.app.router.add_get('/ready', self.health_endpoint)
        self.app.router.add_get('/healthz', self.health_endpoint)
        self.app.router.add_get('/readiness', self.health_endpoint)
        
        return self.app
    
    async def start_server(self, port=5000):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            app = await self.setup_server()
            self.runner = web.AppRunner(app)
            await self.runner.setup()
            
            self.site = web.TCPSite(self.runner, '0.0.0.0', port)
            await self.site.start()
            
            logger.info(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{port}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            self.bot = SimpleTelegramBot()
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
            await self.bot.run()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            self.shutdown_event.set()
    
    async def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            port = int(os.getenv('PORT', 5000))
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            if not await self.start_server(port):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.bot_task = asyncio.create_task(self.start_bot())
            
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é!")
            logger.info(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            logger.info("‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.shutdown_event.wait()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        if self.bot_task and not self.bot_task.done():
            self.bot_task.cancel()
            try:
                await self.bot_task
            except asyncio.CancelledError:
                pass
        
        if self.site:
            await self.site.stop()
        if self.runner:
            await self.runner.cleanup()
        
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –¥–µ–ø–ª–æ—è"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—è
    os.environ['DEPLOYMENT_TYPE'] = 'cloudrun'
    
    logger.info("=" * 50)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø –î–ï–ü–õ–û–Ø")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    logger.info("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    if os.getenv('GROQ_API_KEY'):
        logger.info("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    else:
        logger.info("‚ÑπÔ∏è  GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = ReadyToDeploy()
    
    try:
        await server.run()
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())