#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–ª–∞–¥–∫–∏ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_audio_descriptor_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤"""
    from utils.tg_audio import extract_audio_descriptor, get_audio_info_text
    
    print("=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    forwarded_voice_message = {
        "message_id": 12345,
        "from": {"id": 123456789, "username": "testuser"},
        "chat": {"id": -100123456789, "type": "supergroup"},
        "date": 1692461200,
        "forward_from": {"id": 987654321, "first_name": "Forwarded User"},
        "voice": {
            "duration": 15,
            "mime_type": "audio/ogg",
            "file_id": "AwACAgIAAxkBAAIBY2PhKT...",
            "file_unique_id": "AgADBQADVwABY2PhKQ",
            "file_size": 28800
        }
    }
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞
    descriptor = extract_audio_descriptor(forwarded_voice_message)
    
    if descriptor:
        print(f"‚úÖ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: {descriptor}")
        
        info_text = get_audio_info_text(descriptor)
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ: {info_text}")
        
        print(f"üîç –î–µ—Ç–∞–ª–∏:")
        print(f"   - –¢–∏–ø: {descriptor['kind']}")
        print(f"   - File ID: {descriptor['file_id'][:20]}...")
        print(f"   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {descriptor['duration']} —Å–µ–∫")
        print(f"   - MIME: {descriptor['mime_type']}")
        
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä")
        return False

def test_database_method():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import DatabaseManager
        
        print("\n=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = DatabaseManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ save_user_request —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(db, 'save_user_request'):
            print("‚úÖ –ú–µ—Ç–æ–¥ save_user_request –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
                import inspect
                sig = inspect.signature(db.save_user_request)
                print(f"üìã –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞: {sig}")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–∞: {e}")
                return False
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ save_user_request –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {[method for method in dir(db) if not method.startswith('_')]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_summarization_method():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from simple_bot import SimpleTelegramBot
        
        print("\n=== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        methods = [method for method in dir(SimpleTelegramBot) if 'summarize' in method.lower()]
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {methods}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if hasattr(SimpleTelegramBot, 'summarize_text'):
            print("‚úÖ –ú–µ—Ç–æ–¥ summarize_text –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
            import inspect
            sig = inspect.signature(SimpleTelegramBot.summarize_text)
            print(f"üìã –°–∏–≥–Ω–∞—Ç—É—Ä–∞ summarize_text: {sig}")
            return True
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ summarize_text –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–æ–≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –û—Ç–ª–∞–¥–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Telegram –±–æ—Ç–µ\n")
    
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤", test_audio_descriptor_extraction),
        ("–ú–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_method),
        ("–ú–µ—Ç–æ–¥—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", test_summarization_method)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*50)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
    
    all_passed = all(result for _, result in results)
    
    if all_passed:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main())