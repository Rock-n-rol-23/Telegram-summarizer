"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
"""

import logging
from typing import Dict, Optional

logger = logging.getLogger(__name__)

def extract_audio_descriptor(message: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        
    Returns:
        {
            "success": bool,
            "file_id": str,
            "type": str,           # "voice", "audio", "video_note", "document"
            "filename": str,
            "duration": float,
            "file_size": int,
            "error": str           # –µ—Å–ª–∏ success=False
        }
    """
    
    try:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "voice" in message:
            voice = message["voice"]
            return {
                "success": True,
                "file_id": voice["file_id"],
                "type": "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "filename": f"voice_{voice['file_id'][:8]}.ogg",
                "duration": voice.get("duration", 0.0),
                "file_size": voice.get("file_size", 0),
                "mime_type": voice.get("mime_type", "audio/ogg")
            }
        
        # –ê—É–¥–∏–æ—Ñ–∞–π–ª
        elif "audio" in message:
            audio = message["audio"]
            filename = audio.get("file_name", f"audio_{audio['file_id'][:8]}.mp3")
            return {
                "success": True,
                "file_id": audio["file_id"],
                "type": "–∞—É–¥–∏–æ—Ñ–∞–π–ª",
                "filename": filename,
                "duration": audio.get("duration", 0.0),
                "file_size": audio.get("file_size", 0),
                "mime_type": audio.get("mime_type", "audio/mpeg")
            }
        
        # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (–∫—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ)
        elif "video_note" in message:
            video_note = message["video_note"]
            return {
                "success": True,
                "file_id": video_note["file_id"],
                "type": "–≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞",
                "filename": f"video_note_{video_note['file_id'][:8]}.mp4",
                "duration": video_note.get("duration", 0.0),
                "file_size": video_note.get("file_size", 0),
                "mime_type": "video/mp4"
            }
        
        # –î–æ–∫—É–º–µ–Ω—Ç —Å –∞—É–¥–∏–æ
        elif "document" in message:
            document = message["document"]
            mime_type = document.get("mime_type", "")
            filename = document.get("file_name", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
            audio_mime_types = [
                "audio/mpeg", "audio/mp3", "audio/wav", "audio/ogg", 
                "audio/m4a", "audio/aac", "audio/flac", "audio/opus"
            ]
            
            audio_extensions = [".mp3", ".wav", ".ogg", ".m4a", ".aac", ".flac", ".opus"]
            
            is_audio = (
                mime_type in audio_mime_types or
                any(filename.lower().endswith(ext) for ext in audio_extensions)
            )
            
            if is_audio:
                return {
                    "success": True,
                    "file_id": document["file_id"],
                    "type": "–∞—É–¥–∏–æ-–¥–æ–∫—É–º–µ–Ω—Ç",
                    "filename": filename or f"document_{document['file_id'][:8]}",
                    "duration": 0.0,  # –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∏–º–µ—é—Ç duration –≤ API
                    "file_size": document.get("file_size", 0),
                    "mime_type": mime_type
                }
        
        # –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ
        return {
            "success": False,
            "error": "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        }


def format_duration(duration: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        if duration <= 0:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        duration = int(duration)
        
        if duration < 60:
            return f"{duration}—Å"
        elif duration < 3600:
            minutes = duration // 60
            seconds = duration % 60
            return f"{minutes}–º {seconds}—Å"
        else:
            hours = duration // 3600
            minutes = (duration % 3600) // 60
            return f"{hours}—á {minutes}–º"
            
    except Exception:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def format_file_size(size: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        if size <= 0:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if size < 1024:
            return f"{size} –ë"
        elif size < 1024 * 1024:
            return f"{size / 1024:.1f} –ö–ë"
        elif size < 1024 * 1024 * 1024:
            return f"{size / (1024 * 1024):.1f} –ú–ë"
        else:
            return f"{size / (1024 * 1024 * 1024):.1f} –ì–ë"
            
    except Exception:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_audio_info_text(audio_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not audio_info["success"]:
        return f"‚ùå {audio_info['error']}"
    
    parts = [f"üéß {audio_info['type'].title()}: {audio_info['filename']}"]
    
    duration = audio_info.get("duration", 0)
    if duration > 0:
        parts.append(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}")
    
    file_size = audio_info.get("file_size", 0)
    if file_size > 0:
        parts.append(f"üì¶ –†–∞–∑–º–µ—Ä: {format_file_size(file_size)}")
    
    return "\n".join(parts)