#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π entry point –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É $file variable
"""
import threading
import os
import sys
import logging
import signal
import asyncio
from datetime import datetime
from flask import Flask, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
app = Flask(__name__)

@app.route('/')
@app.route('/health')
@app.route('/ready')
@app.route('/healthz')
def health_check():
    """Extended health check endpoint —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π DB –∏ API"""
    health_status = {
        "status": "ok",
        "service": "telegram-bot",
        "timestamp": datetime.now().isoformat(),
        "checks": {}
    }

    all_healthy = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        import sqlite3
        db_url = os.getenv('DATABASE_URL', 'sqlite:///bot_database.db')
        if db_url.startswith('sqlite:///'):
            db_path = db_url[10:]
            conn = sqlite3.connect(db_path, timeout=2)
            conn.execute('SELECT 1').fetchone()
            conn.close()
            health_status["checks"]["database"] = {"status": "healthy", "type": "sqlite"}
        else:
            # PostgreSQL check
            health_status["checks"]["database"] = {"status": "unknown", "type": "postgresql"}
    except Exception as e:
        health_status["checks"]["database"] = {"status": "unhealthy", "error": str(e)}
        all_healthy = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Groq API key
    groq_key = os.getenv('GROQ_API_KEY')
    if groq_key:
        health_status["checks"]["groq_api"] = {"status": "configured"}
    else:
        health_status["checks"]["groq_api"] = {"status": "not_configured"}
        # –ù–µ —Å—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–æ–π - –µ—Å—Ç—å fallback

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
    if bot_instance:
        health_status["checks"]["bot"] = {"status": "running"}
    else:
        health_status["checks"]["bot"] = {"status": "starting"}
        all_healthy = False

    health_status["ready"] = all_healthy
    health_status["health"] = "healthy" if all_healthy else "degraded"

    return jsonify(health_status), 200 if all_healthy else 503

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "running",
        "service": "telegram-summarization-bot",
        "features": [
            "AI text summarization",
            "Multi-language support",
            "Groq API integration",
            "Fallback summarization"
        ]
    }), 200

@app.route('/metrics')
def metrics():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if bot_instance:
        try:
            bot_metrics = bot_instance.get_metrics()
            return jsonify({
                "status": "ok",
                "metrics": bot_metrics
            }), 200
        except Exception as e:
            return jsonify({
                "status": "error",
                "error": str(e)
            }), 500
    else:
        return jsonify({
            "status": "unavailable",
            "message": "Bot not initialized yet"
        }), 503

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞
bot_instance = None
bot_loop = None

def handle_shutdown_signal(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (SIGINT, SIGTERM)"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º graceful shutdown...")
    if bot_instance and bot_loop:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop –±–æ—Ç–∞
        bot_loop.stop()
    sys.exit(0)

def run_telegram_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_instance, bot_loop
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è simple_bot
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler(sys.stdout)]
        )

        from simple_bot import SimpleTelegramBot
        bot_instance = SimpleTelegramBot()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
        bot_loop.run_until_complete(bot_instance.run())

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ entry point")
    logger.info(f"Python: {sys.version}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGINT, handle_shutdown_signal)
    signal.signal(signal.SIGTERM, handle_shutdown_signal)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (SIGINT, SIGTERM) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"–ü–æ—Ä—Ç: {port}")

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è Telegram –±–æ—Ç–∞...")
        bot_thread = threading.Thread(target=run_telegram_bot, daemon=True)
        bot_thread.start()
        logger.info("–ü–æ—Ç–æ–∫ Telegram –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 0.0.0.0:{port}")
        app.run(host='0.0.0.0', port=port, debug=False)

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω")