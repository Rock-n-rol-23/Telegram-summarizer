#!/usr/bin/env python3
"""
Background Worker —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç –±–µ–∑ HTTP
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""
import asyncio
import os
import sys
import logging
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_task = None
shutdown_event = None

async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Background Worker —Ä–µ–∂–∏–º–∞")
        logger.info("Groq API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("Simple Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        from simple_bot import SimpleTelegramBot
        bot = SimpleTelegramBot()
        
        logger.info("–ó–∞–ø—É—Å–∫ Simple Telegram Bot")
        await bot.run()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
        if shutdown_event:
            shutdown_event.set()

async def graceful_shutdown(sig):
    """Graceful shutdown –¥–ª—è Background Worker"""
    global bot_task, shutdown_event
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig.name}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    
    if shutdown_event:
        shutdown_event.set()
    
    if bot_task and not bot_task.done():
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram –±–æ—Ç–∞...")
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    logger.info("Background Worker –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Background Worker"""
    global bot_task, shutdown_event
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Background Worker")
    logger.info(f"Python: {sys.version}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ event –¥–ª—è shutdown
    shutdown_event = asyncio.Event()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig, lambda s=sig: asyncio.create_task(graceful_shutdown(s))
            )
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
        bot_task = asyncio.create_task(run_telegram_bot())
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if bot_task and not bot_task.done():
            bot_task.cancel()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)