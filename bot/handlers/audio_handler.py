"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""

import logging
import os
import sqlite3
from typing import Dict, Set, Optional
from .base import BaseHandler

logger = logging.getLogger(__name__)


class AudioHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π (voice, audio, video_note, documents)"""

    def __init__(
        self,
        session,
        base_url,
        db,
        state_manager,
        token,
        audio_processor,
        smart_summarizer,
        groq_client,
        openrouter_client,
        user_requests: Dict,
        processing_users: Set,
        db_executor
    ):
        super().__init__(session, base_url, db, state_manager)
        self.token = token
        self.audio_processor = audio_processor
        self.smart_summarizer = smart_summarizer
        self.groq_client = groq_client
        self.openrouter_client = openrouter_client
        self.user_requests = user_requests
        self.processing_users = processing_users
        self.db_executor = db_executor

    async def handle_audio_message(self, update: dict):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from utils.tg_audio import (
            extract_audio_descriptor,
            get_audio_info_text,
            format_duration
        )

        message = update["message"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∞—É–¥–∏–æ
        audio_descriptor = extract_audio_descriptor(message)

        if not audio_descriptor or not audio_descriptor.get("success"):
            await self.send_message(
                chat_id,
                "üîç –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–Ø –Ω–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (voice)\n"
                "‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (audio)\n"
                "‚Ä¢ –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫—Ä—É–∂–æ—á–∫–∏ (video note)\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª."
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
        audio_info = get_audio_info_text(audio_descriptor)
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {audio_info}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(
                chat_id,
                "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(
                chat_id,
                "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_msg = await self.send_message(
            chat_id,
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ‚Ä¶\n\n{audio_info}"
        )
        progress_message_id = (
            progress_msg.get("result", {}).get("message_id")
            if progress_msg and progress_msg.get("ok")
            else None
        )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            if not self.audio_processor:
                error_msg = "‚ùå –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Groq API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."
                if progress_message_id:
                    await self.edit_message_text(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message_text(
                        chat_id,
                        progress_message_id,
                        f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ): {e}")

            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            file_url = await self._get_file_url(audio_descriptor["file_id"])
            filename_hint = audio_descriptor.get("filename") or "audio.ogg"

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ mime –∏ –¥–µ—Ñ–æ–ª—Ç .ogg
            if not os.path.splitext(filename_hint)[1]:
                mime = (audio_descriptor.get("mime_type") or "").lower()
                ext_by_mime = {
                    "audio/ogg": ".ogg",
                    "audio/oga": ".oga",
                    "audio/opus": ".ogg",
                    "audio/mpeg": ".mp3",
                    "audio/mp3": ".mp3",
                    "audio/mp4": ".m4a",
                    "audio/x-m4a": ".m4a",
                    "audio/aac": ".aac",
                    "audio/flac": ".flac",
                    "audio/wav": ".wav",
                    "audio/x-wav": ".wav",
                    "video/webm": ".webm",
                    "video/mp4": ".m4a",
                    "application/octet-stream": ".ogg",
                }
                filename_hint += ext_by_mime.get(mime, ".ogg")

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            logger.info(
                f"Audio: mime={audio_descriptor.get('mime_type')} filename_hint={filename_hint}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message_text(
                        chat_id,
                        progress_message_id,
                        f"üéõÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è): {e}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            result = await self.audio_processor.process_audio_from_telegram(
                file_url, filename_hint
            )

            if not result.get("success"):
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                if progress_message_id:
                    await self.edit_message_text(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message_text(
                        chat_id,
                        progress_message_id,
                        f"üìù –ì–æ—Ç–æ–≤–ª—é —Å–∞–º–º–∞—Ä–∏‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–∞–º–º–∞—Ä–∏): {e}")

            transcript = result["transcript"]
            duration = result.get("duration_sec")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if not transcript or len(transcript.strip()) < 10:
                error_msg = (
                    "‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∞—è –∑–∞–ø–∏—Å—å\n"
                    "‚Ä¢ –§–æ–Ω–æ–≤—ã–π —à—É–º\n"
                    "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n"
                    "‚Ä¢ –§–∞–π–ª –±–µ–∑ —Ä–µ—á–∏"
                )
                if progress_message_id:
                    await self.edit_message_text(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return

            # –ü–æ–ø—ã—Ç–∫–∞ smart —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            summary = None
            if hasattr(self, "smart_summarizer") and self.smart_summarizer:
                try:
                    compression_level = await self.get_user_compression_level(user_id)
                    target_ratio = compression_level / 100.0

                    smart_result = await self.smart_summarizer.smart_summarize(
                        transcript,
                        source_type="audio",
                        source_name=filename_hint,
                        compression_ratio=target_ratio,
                    )

                    if smart_result.get("success"):
                        summary = smart_result.get("summary", "")
                except Exception as e:
                    logger.warning(f"SmartSummarizer –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            # –§–æ–ª–±—ç–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq
            if not summary and self.groq_client:
                try:
                    compression_level = await self.get_user_compression_level(user_id)
                    target_ratio = compression_level / 100.0
                    summary = await self.summarize_text(transcript, target_ratio)
                except Exception as e:
                    logger.warning(f"Groq —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")

            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            if not summary:
                summary = (
                    "–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
                    + transcript[:1000]
                    + ("..." if len(transcript) > 1000 else "")
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            duration_text = f" ({format_duration(duration)})" if duration else ""
            final_message = f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n{summary}"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(final_message) > 4000:
                summary_limit = (
                    4000 - len(f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n") - 50
                )
                summary = summary[:summary_limit] + "..."
                final_message = (
                    f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n{summary}"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message_text(chat_id, progress_message_id, final_message)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    await self.send_message(chat_id, final_message)
            else:
                await self.send_message(chat_id, final_message)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            try:
                username = message["from"].get("username", "")
                await self._run_in_executor(
                    self.db.save_user_request,
                    user_id,
                    username,
                    len(transcript),
                    len(summary) if summary else 0,
                    0.0,
                    "audio_processing",
                )
            except (sqlite3.Error, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ\n\n{str(e)[:200]}..."

            if progress_message_id:
                await self.edit_message_text(chat_id, progress_message_id, error_msg)
            else:
                await self.send_message(chat_id, error_msg)

        finally:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    # ============ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ============

    async def _get_file_url(self, file_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram API"""
        file_info_response = await self.get_file_info(file_id)
        if not file_info_response or not file_info_response.get("ok"):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")

        file_info = file_info_response["result"]
        return f"https://api.telegram.org/file/bot{self.token}/{file_info['file_path']}"

    async def get_file_info(self, file_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API"""
        try:
            url = f"{self.base_url}/getFile"
            params = {"file_id": file_id}

            async with self.session.get(url, params=params) as response:
                return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None

    def check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import time

        now = time.time()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id] if now - req_time < 60
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
        if len(self.user_requests[user_id]) >= 10:
            return False

        self.user_requests[user_id].append(now)
        return True

    async def get_user_compression_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = await self._run_in_executor(self.db.get_user_settings, user_id)
            return settings.get("compression_level", 30)
        except (sqlite3.Error, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 30

    async def summarize_text(self, text: str, target_ratio: float = 0.3) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM API"""
        if not self.groq_client and not self.openrouter_client:
            return "‚ùå LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        try:
            import re

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            text = re.sub(r"[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]", "", text)
            text = re.sub(r"\s+", " ", text)
            text = text.strip()

            if not text:
                return "‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"

            target_length = int(len(text) * target_ratio)

            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ: {target_ratio:.0%})
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å bullet points (‚Ä¢)
- –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∞–º–º–∞—Ä–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π

–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{text}"""

            # –ü—Ä–æ–±—É–µ–º Groq
            if self.groq_client:
                try:
                    response = self.groq_client.chat.completions.create(
                        messages=[{"role": "user", "content": prompt}],
                        model="llama-3.3-70b-versatile",
                        temperature=0.3,
                        max_tokens=2000,
                    )
                    if response.choices and response.choices[0].message:
                        return response.choices[0].message.content.strip()
                except Exception as e:
                    logger.warning(f"Groq API error: {e}")

            # Fallback –Ω–∞ OpenRouter
            if self.openrouter_client:
                try:
                    response = await self.openrouter_client.chat.completions.create(
                        messages=[{"role": "user", "content": prompt}],
                        model="deepseek/deepseek-chat-v3.1:free",
                        temperature=0.3,
                        max_tokens=2000,
                    )
                    if response.choices and response.choices[0].message:
                        return response.choices[0].message.content.strip()
                except Exception as e:
                    logger.error(f"OpenRouter API error: {e}")

            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"

    async def _run_in_executor(self, func, *args):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ executor"""
        import asyncio

        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self.db_executor, func, *args)
