"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

import logging
import time
import sqlite3
from typing import Dict, Set, Optional
from datetime import datetime
from .base import BaseHandler

logger = logging.getLogger(__name__)


class TextHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""

    def __init__(
        self,
        session,
        base_url,
        db,
        state_manager,
        groq_client,
        openrouter_client,
        smart_summarizer,
        user_requests: Dict,
        processing_users: Set,
        user_states: Dict,
        user_settings: Dict,
        user_messages_buffer: Dict,
        db_executor
    ):
        super().__init__(session, base_url, db, state_manager)
        self.groq_client = groq_client
        self.openrouter_client = openrouter_client
        self.smart_summarizer = smart_summarizer
        self.user_requests = user_requests
        self.processing_users = processing_users
        self.user_states = user_states
        self.user_settings = user_settings
        self.user_messages_buffer = user_messages_buffer
        self.db_executor = db_executor

    async def handle_text_message(self, update: dict, message_text: Optional[str] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from bot.text_utils import extract_text_from_message

        chat_id = update["message"]["chat"]["id"]
        user = update["message"]["from"]
        user_id = user["id"]
        username = user.get("username", "")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_text:
            text = message_text
        else:
            text = extract_text_from_message(update["message"])
            if not text:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}), –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(
                chat_id,
                "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(
                chat_id,
                "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) < 50:
            await self.send_message(
                chat_id,
                f"üìù –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n"
                f"–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_response = await self.send_message(
                chat_id,
                "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            processing_message_id = (
                processing_response.get("result", {}).get("message_id")
                if processing_response
                else None
            )

            start_time = time.time()

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_compression_level = await self.get_user_compression_level(user_id)
            target_ratio = user_compression_level / 100.0

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            summary = await self.summarize_text(text, target_ratio=target_ratio)

            processing_time = time.time() - start_time

            if summary and not summary.startswith("‚ùå"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å)
                try:
                    await self._run_in_executor(
                        self.db.save_user_request,
                        user_id,
                        username,
                        len(text),
                        len(summary),
                        processing_time,
                        "groq",
                    )
                except (OSError, sqlite3.Error) as save_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                compression_ratio = len(summary) / len(text)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = f"""üìã –°–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ! (–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {user_compression_level}%)

{summary}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º–º–∞—Ä–∏: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"""

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)

                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Ä–æ–≤–Ω–µ–π —Å–∂–∞—Ç–∏—è
                keyboard = self._get_compression_keyboard(user_compression_level)

                await self.send_message(chat_id, response_text, reply_markup=keyboard)

                logger.info(
                    f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–∂–∞—Ç–∏–µ: {compression_ratio:.1%}"
                )

            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)

                await self.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞!\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                )

                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except (sqlite3.Error, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

            await self.send_message(
                chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    async def handle_custom_summarize_text(self, update: dict, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_messages_buffer[user_id].append(
                {
                    "text": text,
                    "timestamp": datetime.now(),
                    "is_forwarded": "forward_from" in update["message"]
                    or "forward_from_chat" in update["message"],
                }
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_chars = sum(len(msg["text"]) for msg in self.user_messages_buffer[user_id])

            if len(self.user_messages_buffer[user_id]) == 1 and total_chars >= 100:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                await self.process_custom_summarization(chat_id, user_id)
            elif len(self.user_messages_buffer[user_id]) > 1:
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ —Å–±–æ—Ä
                await self.send_message(
                    chat_id,
                    f"üìù –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.user_messages_buffer[user_id])}\n"
                    f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: 'ok' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                )
            else:
                # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤
                await self.send_message(
                    chat_id,
                    f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"–ú–∏–Ω–∏–º—É–º: 100 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.",
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await self.send_message(
                chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    async def process_custom_summarization(self, chat_id: int, user_id: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            if user_id not in self.user_settings or user_id not in self.user_messages_buffer:
                await self.send_message(
                    chat_id,
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                )
                return

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            combined_text = ""
            for msg in self.user_messages_buffer[user_id]:
                if combined_text:
                    combined_text += "\n\n"
                combined_text += msg["text"]

            total_chars = len(combined_text)

            if total_chars < 100:
                await self.send_message(
                    chat_id,
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ({total_chars} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∏–Ω–∏–º—É–º: 100 —Å–∏–º–≤–æ–ª–æ–≤.",
                )
                return

            if total_chars > 10000:
                await self.send_message(
                    chat_id,
                    f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ({total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º: 10,000 —Å–∏–º–≤–æ–ª–æ–≤.",
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await self.send_message(
                chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏..."
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = self.user_settings[user_id]
            compression_ratio = int(settings["compression"]) / 100.0
            format_type = settings["format"]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await self.custom_summarize_text(
                combined_text, compression_ratio, format_type
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if processing_msg:
                processing_msg_id = processing_msg.get("result", {}).get("message_id")
                if processing_msg_id:
                    await self.delete_message(chat_id, processing_msg_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            format_emoji = {"bullets": "‚Ä¢", "paragraph": "üìÑ", "keywords": "üè∑Ô∏è"}[format_type]
            compression_text = f"{settings['compression']}%"

            response_text = f"""{format_emoji} **–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è**
üìä –°–∂–∞—Ç–∏–µ: {compression_text} | üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤

{summary}

‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""

            await self.send_message(chat_id, response_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                await self._run_in_executor(
                    self.db.save_user_request, user_id, "", total_chars, len(summary), 0.0, "groq"
                )
            except (OSError, sqlite3.Error) as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.user_settings:
                del self.user_settings[user_id]
            if user_id in self.user_messages_buffer:
                del self.user_messages_buffer[user_id]

        except (sqlite3.Error, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await self.send_message(
                chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ============ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ============

    async def summarize_text(self, text: str, target_ratio: float = 0.3) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM API"""
        if not self.groq_client and not self.openrouter_client:
            return "‚ùå LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

        try:
            import re

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            text = re.sub(r"[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]", "", text)
            text = re.sub(r"\s+", " ", text)
            text = text.strip()

            if not text:
                return "‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"

            target_length = int(len(text) * target_ratio)

            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ: {target_ratio:.0%})
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å bullet points (‚Ä¢)
- –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∞–º–º–∞—Ä–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π

–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{text}"""

            # –ü—Ä–æ–±—É–µ–º Groq, –∑–∞—Ç–µ–º OpenRouter
            summary = None
            if self.groq_client:
                try:
                    from bot.core.decorators import retry_on_failure

                    @retry_on_failure(max_retries=3, delay=1.0, backoff=2.0)
                    def call_groq():
                        return self.groq_client.chat.completions.create(
                            messages=[{"role": "user", "content": prompt}],
                            model="llama-3.3-70b-versatile",
                            temperature=0.3,
                            max_tokens=2000,
                        )

                    response = call_groq()
                    if response.choices and response.choices[0].message:
                        summary = response.choices[0].message.content.strip()
                except Exception as e:
                    logger.warning(f"Groq API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            # Fallback –Ω–∞ OpenRouter
            if not summary and self.openrouter_client:
                try:
                    response = await self.openrouter_client.chat.completions.create(
                        messages=[{"role": "user", "content": prompt}],
                        model="deepseek/deepseek-chat-v3.1:free",
                        temperature=0.3,
                        max_tokens=2000,
                    )
                    if response.choices and response.choices[0].message:
                        summary = response.choices[0].message.content.strip()
                        logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OpenRouter (fallback)")
                except Exception as e:
                    logger.error(f"OpenRouter API –æ—à–∏–±–∫–∞: {e}")

            return summary if summary else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)[:100]}"

    async def custom_summarize_text(
        self, text: str, compression_ratio: float, format_type: str
    ) -> str:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        try:
            target_length = int(len(text) * compression_ratio)

            format_instructions = {
                "bullets": """- –°–æ–∑–¥–∞–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π bullet points (‚Ä¢) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
- –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –º—ã—Å–ª—å—é
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ""",
                "paragraph": """- –°–æ–∑–¥–∞–π —Å–≤—è–∑–Ω—ã–π –∞–±–∑–∞—Ü –≤ –≤–∏–¥–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–ª–∞–≤–Ω–æ
- –°–æ—Ö—Ä–∞–Ω–∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–≤—è–∑–∫–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏""",
                "keywords": """- –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
- –í—ã–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ/—Ç–µ—Ä–º–∏–Ω - –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
- –†–∞—Å–ø–æ–ª–æ–∂–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏""",
            }

            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ: {compression_ratio:.0%})
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
{format_instructions[format_type]}

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∞–º–º–∞—Ä–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{text}"""

            if self.groq_client:
                from bot.core.decorators import retry_on_failure

                @retry_on_failure(max_retries=3, delay=1.0, backoff=2.0)
                def call_groq_api():
                    return self.groq_client.chat.completions.create(
                        messages=[{"role": "user", "content": prompt}],
                        model="llama-3.3-70b-versatile",
                        temperature=0.3,
                        max_tokens=2000,
                        top_p=0.9,
                        stream=False,
                    )

                response = call_groq_api()

                if response.choices and response.choices[0].message:
                    summary = response.choices[0].message.content
                    if summary:
                        return summary.strip()

            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)[:100]}"

    def check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id] if now - req_time < 60
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
        if len(self.user_requests[user_id]) >= 10:
            return False

        self.user_requests[user_id].append(now)
        return True

    async def get_user_compression_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = await self._run_in_executor(self.db.get_user_settings, user_id)
            return settings.get("compression_level", 30)
        except (sqlite3.Error, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 30

    async def _run_in_executor(self, func, *args):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ executor"""
        import asyncio

        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self.db_executor, func, *args)

    async def delete_message(self, chat_id: int, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.base_url}/deleteMessage"
            data = {"chat_id": chat_id, "message_id": message_id}

            async with self.session.post(url, json=data) as response:
                result = await response.json()
                return result.get("ok", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def _get_compression_keyboard(self, current_level: int = 30) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è

        Args:
            current_level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è (10, 30, 50)

        Returns:
            dict: Inline keyboard markup
        """
        buttons = [
            [
                {
                    "text": "‚úÖ –ö–æ—Ä–æ—Ç–∫–æ (10%)" if current_level == 10 else "–ö–æ—Ä–æ—Ç–∫–æ (10%)",
                    "callback_data": "compression_10",
                },
                {
                    "text": "‚úÖ –°—Ä–µ–¥–Ω–µ (30%)" if current_level == 30 else "–°—Ä–µ–¥–Ω–µ (30%)",
                    "callback_data": "compression_30",
                },
                {
                    "text": "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ (50%)" if current_level == 50 else "–ü–æ–¥—Ä–æ–±–Ω–æ (50%)",
                    "callback_data": "compression_50",
                },
            ]
        ]

        return {"inline_keyboard": buttons}
