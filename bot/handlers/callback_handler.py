"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)"""

import logging
from .base import BaseHandler

logger = logging.getLogger(__name__)


class CallbackHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""

    def __init__(self, session, base_url, db, state_manager):
        super().__init__(session, base_url, db, state_manager)

    async def handle_callback_query(self, callback_query: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        query_id = callback_query["id"]
        callback_data = callback_query.get("data", "")
        user_id = callback_query["from"]["id"]

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = callback_query.get("message")
        if not message:
            await self.answer_callback_query(query_id, "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        chat_id = message["chat"]["id"]
        message_id = message["message_id"]

        logger.info(f"Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
            if callback_data.startswith("compression_"):
                await self.handle_compression_callback(
                    query_id, chat_id, message_id, user_id, callback_data
                )
            elif callback_data.startswith("audio_format_"):
                await self.handle_audio_format_callback(
                    query_id, chat_id, message_id, user_id, callback_data
                )
            elif callback_data.startswith("audio_verbosity_"):
                await self.handle_audio_verbosity_callback(
                    query_id, chat_id, message_id, user_id, callback_data
                )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                await self.answer_callback_query(query_id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")
            await self.answer_callback_query(query_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_compression_callback(
        self, query_id: str, chat_id: int, message_id: int, user_id: int, callback_data: str
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä: "compression_30")
            parts = callback_data.split("_")
            compression_level = int(parts[1])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            try:
                self.db.update_compression_level(user_id, compression_level, "")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {compression_level}%")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è: {e}")
                await self.answer_callback_query(query_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                return

            # –ù–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
            level_names = {
                10: "üî• –ö—Ä–∞—Ç–∫–æ",
                30: "üìä –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ",
                60: "üìñ –ü–æ–¥—Ä–æ–±–Ω–æ"
            }
            level_name = level_names.get(compression_level, f"{compression_level}%")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await self.answer_callback_query(
                query_id,
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {level_name}",
                show_alert=False
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            confirmation_text = (
                f"‚úÖ –°—Ç–∏–ª—å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω—ë–Ω: {level_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∏–ª–µ \"{level_name}\".\n\n"
                f"üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Å—Ç–∞—Ç—å—é –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!"
            )

            await self.edit_message_text(chat_id, message_id, confirmation_text)

        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
            await self.answer_callback_query(query_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    async def handle_audio_format_callback(
        self, query_id: str, chat_id: int, message_id: int, user_id: int, callback_data: str
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä: "audio_format_detailed")
            format_type = callback_data.replace("audio_format_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å enhanced audio settings
            try:
                from bot.ui_settings import get_settings_manager

                settings_manager = get_settings_manager()
                if settings_manager:
                    settings_manager.update_user_format(user_id, format_type)
                    logger.info(
                        f"–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {format_type}"
                    )

                    format_names = {
                        "detailed": "–ü–æ–¥—Ä–æ–±–Ω—ã–π",
                        "concise": "–ö—Ä–∞—Ç–∫–∏–π",
                        "bullets": "–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    }
                    format_name = format_names.get(format_type, format_type)

                    await self.answer_callback_query(
                        query_id, f"‚úÖ –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω—ë–Ω: {format_name}"
                    )
                else:
                    await self.answer_callback_query(query_id, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except ImportError:
                await self.answer_callback_query(
                    query_id, "‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ audio format callback: {e}")
            await self.answer_callback_query(query_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    async def handle_audio_verbosity_callback(
        self, query_id: str, chat_id: int, message_id: int, user_id: int, callback_data: str
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å verbosity
            verbosity_type = callback_data.replace("audio_verbosity_", "")

            try:
                from bot.ui_settings import get_settings_manager

                settings_manager = get_settings_manager()
                if settings_manager:
                    settings_manager.update_user_verbosity(user_id, verbosity_type)
                    logger.info(
                        f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {verbosity_type}"
                    )

                    verbosity_names = {
                        "high": "–í—ã—Å–æ–∫–∞—è",
                        "medium": "–°—Ä–µ–¥–Ω—è—è",
                        "low": "–ù–∏–∑–∫–∞—è"
                    }
                    verbosity_name = verbosity_names.get(verbosity_type, verbosity_type)

                    await self.answer_callback_query(
                        query_id, f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {verbosity_name}"
                    )
                else:
                    await self.answer_callback_query(query_id, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except ImportError:
                await self.answer_callback_query(
                    query_id, "‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ audio verbosity callback: {e}")
            await self.answer_callback_query(query_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    async def answer_callback_query(
        self, query_id: str, text: str = "", show_alert: bool = False
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query"""
        url = f"{self.base_url}/answerCallbackQuery"
        data = {"callback_query_id": query_id, "text": text, "show_alert": show_alert}

        async with self.session.post(url, json=data) as response:
            result = await response.json()
            if not result.get("ok"):
                logger.error(f"–û—à–∏–±–∫–∞ answerCallbackQuery: {result}")
            return result
