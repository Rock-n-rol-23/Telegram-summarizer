"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤"""

import logging
import time
import sqlite3
from typing import Dict, Set, Optional
from .base import BaseHandler
from bot.core.decorators import retry_on_failure

logger = logging.getLogger(__name__)


class DocumentHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, EPUB, FB2 –∏ –¥—Ä.)"""

    def __init__(
        self,
        session,
        base_url,
        db,
        state_manager,
        file_processor,
        groq_client,
        user_requests: Dict,
        processing_users: Set,
        db_executor
    ):
        super().__init__(session, base_url, db, state_manager)
        self.file_processor = file_processor
        self.groq_client = groq_client
        self.user_requests = user_requests
        self.processing_users = processing_users
        self.db_executor = db_executor

    async def handle_document_message(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, DOC, TXT, EPUB, FB2 –∏ –¥—Ä.)"""
        try:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            username = message["from"].get("username", "")
            document = message["document"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            if not self.check_user_rate_limit(user_id):
                await self.send_message(
                    chat_id,
                    "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. "
                    "–õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if user_id in self.processing_users:
                await self.send_message(
                    chat_id,
                    "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.add(user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_name = document.get("file_name", "unknown")
            file_size = document.get("file_size", 0)

            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file_name} ({file_size} –±–∞–π—Ç)"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await self.send_message(
                chat_id,
                f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç..."
            )
            processing_message_id = (
                processing_message.get("result", {}).get("message_id")
                if processing_message and processing_message.get("ok")
                else None
            )

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram
                file_info_response = await self.get_file_info(document["file_id"])
                if not file_info_response or not file_info_response.get("ok"):
                    await self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                    return

                file_info = file_info_response["result"]
                file_path = f"https://api.telegram.org/file/bot{self.base_url.split('/bot')[1].split('/')[0]}/{file_info['file_path']}"

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if processing_message_id:
                    await self.edit_message_text(
                        chat_id,
                        processing_message_id,
                        f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\nüì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª..."
                    )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_processor –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                download_result = await self.file_processor.download_telegram_file(
                    {"file_path": file_path}, file_name, file_size, self.session
                )

                if not download_result["success"]:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, f"‚ùå {download_result['error']}")
                    return

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                extension = download_result["file_extension"].lower()
                if extension == '.pdf':
                    progress_text = (
                        f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n"
                        f"üîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç (PDF ‚Üí —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π + OCR)..."
                    )
                elif extension == '.pptx':
                    progress_text = (
                        f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: {file_name}\n\n"
                        f"üéØ –ò–∑–≤–ª–µ–∫–∞—é —Å–ª–∞–π–¥—ã –∏ –∑–∞–º–µ—Ç–∫–∏..."
                    )
                elif extension in ('.png', '.jpg', '.jpeg'):
                    progress_text = (
                        f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_name}\n\n"
                        f"üëÅÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç (OCR)..."
                    )
                elif extension in ('.epub', '.fb2'):
                    progress_text = (
                        f"üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–∏–≥—É: {file_name}\n\n"
                        f"üìñ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ..."
                    )
                else:
                    progress_text = (
                        f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n"
                        f"üìù –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç..."
                    )

                if processing_message_id:
                    await self.edit_message_text(chat_id, processing_message_id, progress_text)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                text_result = self.file_processor.extract_text_from_file(
                    download_result["file_path"],
                    download_result["file_extension"]
                )

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.file_processor.cleanup_temp_file(download_result["temp_dir"])

                if not text_result["success"]:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, f"‚ùå {text_result['error']}")
                    return

                extracted_text = text_result["text"]
                extraction_method = text_result.get("method", "unknown")
                extraction_meta = text_result.get("meta", {})

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if len(extracted_text) < 100:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(
                        chat_id,
                        f"üìù –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n"
                        f"–ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤. "
                        f"–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
                    )
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                if "ocr" in extraction_method and extraction_meta.get("ocr_pages"):
                    ocr_info = (
                        f"üîé –†–µ–∂–∏–º: PDF ‚Üí OCR "
                        f"(—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {','.join(map(str, extraction_meta['ocr_pages']))})"
                    )
                elif extraction_method == "python-pptx" and extraction_meta.get("slides"):
                    slides_count = extraction_meta.get(
                        "total_slides",
                        len(extraction_meta["slides"])
                    )
                    ocr_info = f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {slides_count} —Å–ª–∞–π–¥–æ–≤"
                elif "ocr" in extraction_method:
                    ocr_info = "üëÅÔ∏è –†–µ–∂–∏–º: OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)"
                else:
                    ocr_info = f"üìù –†–µ–∂–∏–º: {extraction_method}"

                if processing_message_id:
                    await self.edit_message_text(
                        chat_id,
                        processing_message_id,
                        f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n{ocr_info}\n\nü§ñ –°–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ..."
                    )

                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                compression_ratio = await self.get_user_compression_level(user_id)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_type = self._detect_document_type(
                    extracted_text,
                    file_name,
                    download_result["file_extension"],
                    extraction_meta
                )

                # –°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if doc_type == 'book':
                    logger.info("üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–Ω–∏–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                    summary = await self.summarize_book_content(
                        extracted_text,
                        metadata=extraction_meta,
                        compression_ratio=compression_ratio
                    )
                else:
                    summary = await self.summarize_file_content(
                        extracted_text,
                        file_name,
                        download_result["file_extension"],
                        compression_ratio
                    )

                if summary:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞/–¥–æ–∫—É–º–µ–Ω—Ç–∞
                    if doc_type == 'book':
                        icon = "üìö"
                        display_type = "–∫–Ω–∏–≥–∏"
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if extraction_meta.get('title') and extraction_meta.get('author'):
                            file_name = (
                                f"{extraction_meta['title']} ({extraction_meta['author']})"
                            )
                    elif extension == '.pptx':
                        icon = "üìä"
                        display_type = "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
                    elif extension in ('.png', '.jpg', '.jpeg'):
                        icon = "üñºÔ∏è"
                        display_type = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    elif extension in ['.epub', '.fb2']:
                        icon = "üìñ"
                        display_type = "–∫–Ω–∏–≥–∏"
                    else:
                        icon = "üìÑ"
                        display_type = "–¥–æ–∫—É–º–µ–Ω—Ç–∞"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    extra_info = ""
                    if extraction_meta.get("ocr_pages"):
                        extra_info = (
                            f"\n‚Ä¢ OCR —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "
                            f"{', '.join(map(str, extraction_meta['ocr_pages']))}"
                        )
                    elif extraction_meta.get("total_slides"):
                        extra_info = (
                            f"\n‚Ä¢ –°–ª–∞–π–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: "
                            f"{extraction_meta['slides_with_content']}/"
                            f"{extraction_meta['total_slides']}"
                        )
                    elif doc_type == 'book' and extraction_meta.get('author'):
                        extra_info = f"\n‚Ä¢ –ê–≤—Ç–æ—Ä: {extraction_meta['author']}"
                        if extraction_meta.get('language'):
                            extra_info += f"\n‚Ä¢ –Ø–∑—ã–∫: {extraction_meta['language']}"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    response_text = f"""{icon} **–†–µ–∑—é–º–µ {display_type}: {file_name}**

{summary}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(extracted_text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –†–µ–∑—é–º–µ: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.0%}
‚Ä¢ –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_method}{extra_info}"""

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)

                    await self.send_message(chat_id, response_text)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å)
                    try:
                        await self._run_in_executor(
                            self.db.save_user_request,
                            user_id,
                            f"document:{file_name}",
                            len(extracted_text),
                            len(summary),
                            0.0,
                            'groq_document'
                        )
                    except (OSError, sqlite3.Error) as save_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")

                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç {file_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                else:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )

            except (sqlite3.Error, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)
                await self.send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await self.send_message(
                chat_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    # ============ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ============

    async def get_file_info(self, file_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API"""
        try:
            url = f"{self.base_url}/getFile"
            params = {"file_id": file_id}

            async with self.session.get(url, params=params) as response:
                return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None

    def _detect_document_type(
        self,
        text: str,
        file_name: str = "",
        file_extension: str = "",
        metadata: dict = None
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ö–Ω–∏–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if file_extension.lower() in ['.epub', '.fb2']:
            return 'book'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ EPUB/FB2
        if metadata and ('author' in metadata or 'title' in metadata):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞/–Ω–∞–∑–≤–∞–Ω–∏—è - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–Ω–∏–≥–∞
            return 'book'

        # –î–ª—è PDF –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É - –∫–Ω–∏–≥–∏ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ
        if file_extension.lower() == '.pdf' and len(text) > 50000:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–Ω–∏–≥–∏
            lower_text = text[:5000].lower()
            book_indicators = [
                '–≥–ª–∞–≤–∞', 'chapter', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', 'table of contents',
                '–ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ', 'preface', '–≤–≤–µ–¥–µ–Ω–∏–µ', 'introduction',
                '—á–∞—Å—Ç—å', 'part', '—ç–ø–∏–ª–æ–≥', 'epilogue'
            ]
            if any(indicator in lower_text for indicator in book_indicators):
                return 'book'

        # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        if file_extension.lower() == '.pptx':
            return 'presentation'

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–∫—É–º–µ–Ω—Ç
        return 'document'

    async def summarize_book_content(
        self,
        text: str,
        metadata: dict = None,
        compression_ratio: float = 0.3
    ) -> str:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–Ω–∏–≥ —Å —á–∞–Ω–∫–∏–Ω–≥–æ–º"""
        try:
            if not self.groq_client:
                return "‚ùå Groq API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            book_title = metadata.get('title', '–ö–Ω–∏–≥–∞') if metadata else '–ö–Ω–∏–≥–∞'
            book_author = (
                metadata.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                if metadata
                else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
            )

            original_length = len(text)
            logger.info(
                f"üìö –ù–∞—á–∏–Ω–∞—é —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∫–Ω–∏–≥–∏: {book_title}, "
                f"–¥–ª–∏–Ω–∞: {original_length} —Å–∏–º–≤–æ–ª–æ–≤"
            )

            # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø—Ä–∏–º–µ–Ω—è–µ–º —á–∞–Ω–∫–∏–Ω–≥
            if original_length > 30000:
                logger.info(
                    f"üìö –ö–Ω–∏–≥–∞ –¥–ª–∏–Ω–Ω–∞—è ({original_length} —Å–∏–º–≤–æ–ª–æ–≤), "
                    f"–ø—Ä–∏–º–µ–Ω—è—é —á–∞–Ω–∫-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é"
                )

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ ~15000 —Å–∏–º–≤–æ–ª–æ–≤
                chunk_size = 15000
                chunks = []
                for i in range(0, len(text), chunk_size):
                    chunk = text[i:i + chunk_size]
                    if len(chunk) > 1000:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞–Ω–∫–∏
                        chunks.append(chunk)

                logger.info(f"üìö –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")

                # –°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                chunk_summaries = []
                # –ú–∞–∫—Å–∏–º—É–º 5 —á–∞–Ω–∫–æ–≤ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                for idx, chunk in enumerate(chunks[:5]):
                    logger.info(
                        f"üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {idx + 1}/{min(len(chunks), 5)}"
                    )

                    chunk_prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –∫–Ω–∏–≥–∏ "{book_title}" (–∞–≤—Ç–æ—Ä: {book_author}).
–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –∏–¥–µ–∏ –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ —Ç–µ–∫—Å—Ç.

–§–æ—Ä–º–∞—Ç (150-200 —Å–ª–æ–≤):
‚Ä¢ **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:** [2-3 –ø—É–Ω–∫—Ç–∞]
‚Ä¢ **–í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:** [–∏–º–µ–Ω–∞, —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å]

–ß–∞—Å—Ç—å –∫–Ω–∏–≥–∏:
{chunk}"""

                    @retry_on_failure(max_retries=2, delay=1.0, backoff=2.0)
                    def call_groq_for_chunk():
                        return self.groq_client.chat.completions.create(
                            messages=[{"role": "user", "content": chunk_prompt}],
                            model="llama-3.3-70b-versatile",
                            temperature=0.3,
                            max_tokens=300,
                            top_p=0.9
                        )

                    try:
                        response = call_groq_for_chunk()
                        if response.choices and response.choices[0].message:
                            chunk_summaries.append(
                                response.choices[0].message.content.strip()
                            )
                    except Exception as e:
                        logger.error(f"üìö –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {idx + 1}: {e}")
                        continue

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—é–º–µ —á–∞–Ω–∫–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
                if chunk_summaries:
                    combined_summaries = "\n\n".join([
                        f"**–ß–∞—Å—Ç—å {i+1}:**\n{s}"
                        for i, s in enumerate(chunk_summaries)
                    ])

                    final_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∫–Ω–∏–≥–∏ "{book_title}" (–∞–≤—Ç–æ—Ä: {book_author}), —Å–æ–∑–¥–∞–π –µ–¥–∏–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤—Å–µ–π –∫–Ω–∏–≥–∏.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—é–º–µ (400-600 —Å–ª–æ–≤):
üìñ **–û –∫–Ω–∏–≥–µ:** [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞]
üìö **–°—é–∂–µ—Ç/–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** [–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ - 3-5 –ø—É–Ω–∫—Ç–æ–≤]
üë• **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏/–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Ü–∞:** [–ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏]
üí° **–ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏ —Ç–µ–º—ã:** [–ì–ª–∞–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞ - 2-4 –ø—É–Ω–∫—Ç–∞]
üéØ **–í—ã–≤–æ–¥—ã:** [–û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ - 1-2 –ø—É–Ω–∫—Ç–∞]

–†–µ–∑—é–º–µ —á–∞—Å—Ç–µ–π –∫–Ω–∏–≥–∏:
{combined_summaries}"""

                    @retry_on_failure(max_retries=3, delay=1.0, backoff=2.0)
                    def call_groq_for_final():
                        return self.groq_client.chat.completions.create(
                            messages=[{"role": "user", "content": final_prompt}],
                            model="llama-3.3-70b-versatile",
                            temperature=0.3,
                            max_tokens=700,
                            top_p=0.9
                        )

                    response = call_groq_for_final()
                    if response.choices and response.choices[0].message:
                        return response.choices[0].message.content.strip()

            else:
                # –î–ª—è –∫–Ω–∏–≥ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã - –æ–¥–Ω–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                logger.info("üìö –ö–Ω–∏–≥–∞ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã, –æ–¥–Ω–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
                max_chars = 25000  # –î–ª—è –∫–Ω–∏–≥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
                if len(text) > max_chars:
                    text = text[:max_chars] + "...\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏]"

                book_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–Ω–∏–≥—É –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ —Ç–µ–∫—Å—Ç.

üìñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ:**
–ù–∞–∑–≤–∞–Ω–∏–µ: {book_title}
–ê–≤—Ç–æ—Ä: {book_author}

üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—é–º–µ (400-600 —Å–ª–æ–≤):**
‚Ä¢ **–û –∫–Ω–∏–≥–µ:** [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –∏–ª–∏ –∂–∞–Ω—Ä]
‚Ä¢ **–°—é–∂–µ—Ç/–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** [–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ - 3-5 –ø—É–Ω–∫—Ç–æ–≤]
‚Ä¢ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:** [–ï—Å–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏]
‚Ä¢ **–ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏:** [–ì–ª–∞–≤–Ω—ã–µ –º—ã—Å–ª–∏, —Ç–µ–º—ã, –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ - 2-4 –ø—É–Ω–∫—Ç–∞]
‚Ä¢ **–°—Ç–∏–ª—å –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** [–û—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∫–Ω–∏–≥–∏]
‚Ä¢ **–í—ã–≤–æ–¥—ã:** [–û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –º–æ—Ä–∞–ª—å]

–í–ê–ñ–ù–û:
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –∏–º–µ–Ω–∞, —Å–æ–±—ã—Ç–∏—è
- –î–ª—è –Ω–æ–Ω-—Ñ–∏–∫—à–Ω –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–π –∏–¥–µ–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
- –î–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã - —Å—é–∂–µ—Ç –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–ø–æ–π–ª–µ—Ä—ã –∫ –∫–æ–Ω—Ü–æ–≤–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

–¢–µ–∫—Å—Ç –∫–Ω–∏–≥–∏:
{text}"""

                @retry_on_failure(max_retries=3, delay=1.0, backoff=2.0)
                def call_groq_api():
                    return self.groq_client.chat.completions.create(
                        messages=[{"role": "user", "content": book_prompt}],
                        model="llama-3.3-70b-versatile",
                        temperature=0.3,
                        max_tokens=750,
                        top_p=0.9
                    )

                response = call_groq_api()
                if response.choices and response.choices[0].message:
                    return response.choices[0].message.content.strip()

            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"

        except Exception as e:
            logger.error(f"üìö –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏: {str(e)[:100]}"

    async def summarize_file_content(
        self,
        text: str,
        file_name: str = "",
        file_type: str = "",
        compression_ratio: float = 0.3
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Groq API"""
        try:
            if not self.groq_client:
                return "‚ùå Groq API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            max_chars = 15000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            original_length = len(text)

            if len(text) > max_chars:
                text = text[:max_chars] + "...\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏]"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—é–º–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
            target_length = int(original_length * compression_ratio)

            if target_length < 200:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ
                summary_length = "100-200 —Å–ª–æ–≤"
                max_tokens = 250
            elif target_length < 800:  # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
                summary_length = "200-500 —Å–ª–æ–≤"
                max_tokens = 550
            else:  # –î–ª–∏–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
                summary_length = "400-800 —Å–ª–æ–≤"
                max_tokens = 850

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            file_type_desc = {
                '.pdf': 'PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.docx': 'Word –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.doc': 'Word –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.txt': '—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞',
                '.pptx': '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ PowerPoint'
            }.get(file_type, '–¥–æ–∫—É–º–µ–Ω—Ç–∞')

            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ {file_type_desc} –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—é–º–µ:**
- –î–ª–∏–Ω–∞: {summary_length} (—Å–∂–∞—Ç–∏–µ {compression_ratio:.0%})
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–π –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´: –∏–º–µ–Ω–∞, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã, —Å–æ–±—ã—Ç–∏—è, —Ä–µ—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

üìù **–§–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ:**

**–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –∏–¥–µ–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (2-3 –ø—É–Ω–∫—Ç–∞)

**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã:**
‚Ä¢ –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ü–∏—Ñ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–∞—Ç—ã, –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Å—ã–ª–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

**–î–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

**–í—ã–≤–æ–¥—ã:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

–í–ê–ñ–ù–û:
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –¥–∞—Ç—ã, –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–µ

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Ä–µ–∑—é–º–µ, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
{text}"""

            @retry_on_failure(max_retries=3, delay=1.0, backoff=2.0)
            def call_groq_api():
                return self.groq_client.chat.completions.create(
                    messages=[{"role": "user", "content": prompt}],
                    model="llama-3.3-70b-versatile",
                    temperature=0.3,
                    max_tokens=max_tokens,
                    top_p=0.9,
                    stream=False
                )

            response = call_groq_api()

            if response.choices and response.choices[0].message:
                summary = response.choices[0].message.content
                if summary:
                    return summary.strip()
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)[:100]}"

    def check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)"""
        now = time.time()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        self.user_requests[user_id] = [
            req_time
            for req_time in self.user_requests[user_id]
            if now - req_time < 60
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
        if len(self.user_requests[user_id]) >= 10:
            return False

        self.user_requests[user_id].append(now)
        return True

    async def get_user_compression_level(self, user_id: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = await self._run_in_executor(self.db.get_user_settings, user_id)
            compression_level = settings.get("compression_level", 30)
            return compression_level / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ decimal
        except (sqlite3.Error, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0.3  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 30% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def _run_in_executor(self, func, *args):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ executor"""
        import asyncio
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self.db_executor, func, *args)

    async def delete_message(self, chat_id: int, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.base_url}/deleteMessage"
            data = {"chat_id": chat_id, "message_id": message_id}

            async with self.session.post(url, json=data) as response:
                result = await response.json()
                return result.get("ok", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
