"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
"""

import logging
from typing import Dict, Optional, Tuple
from enum import Enum

logger = logging.getLogger(__name__)

class SummaryFormat(Enum):
    STRUCTURED = "structured"
    BULLETS = "bullets" 
    PARAGRAPH = "paragraph"

class SummaryVerbosity(Enum):
    SHORT = "short"
    NORMAL = "normal"
    DETAILED = "detailed"

# –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
FORMAT_DESCRIPTIONS = {
    SummaryFormat.STRUCTURED: "üìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ (—Ä–∞–∑–¥–µ–ª—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)",
    SummaryFormat.BULLETS: "üîπ –ü—É–Ω–∫—Ç—ã (–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)",
    SummaryFormat.PARAGRAPH: "üìÑ –ê–±–∑–∞—Ü (—Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç)"
}

VERBOSITY_DESCRIPTIONS = {
    SummaryVerbosity.SHORT: "‚ö° –ö—Ä–∞—Ç–∫–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ)",
    SummaryVerbosity.NORMAL: "üìñ –û–±—ã—á–Ω–æ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)", 
    SummaryVerbosity.DETAILED: "üîç –ü–æ–¥—Ä–æ–±–Ω–æ (–≤—Å–µ –¥–µ—Ç–∞–ª–∏)"
}

class UserSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.summary_format = SummaryFormat.STRUCTURED
        self.summary_verbosity = SummaryVerbosity.NORMAL
        
    def get_format_str(self) -> str:
        return self.summary_format.value
        
    def get_verbosity_str(self) -> str:
        return self.summary_verbosity.value
        
    def set_format(self, format_str: str) -> bool:
        try:
            self.summary_format = SummaryFormat(format_str)
            return True
        except ValueError:
            return False
            
    def set_verbosity(self, verbosity_str: str) -> bool:
        try:
            self.summary_verbosity = SummaryVerbosity(verbosity_str)
            return True
        except ValueError:
            return False
    
    def to_dict(self) -> Dict:
        return {
            "user_id": self.user_id,
            "format": self.summary_format.value,
            "verbosity": self.summary_verbosity.value
        }
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'UserSettings':
        settings = cls(data["user_id"])
        settings.set_format(data.get("format", "structured"))
        settings.set_verbosity(data.get("verbosity", "normal"))
        return settings


class UserSettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, db_connection=None):
        self.db = db_connection
        self._cache = {}  # –í –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
    def get_user_settings(self, user_id: int) -> UserSettings:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in self._cache:
            return self._cache[user_id]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
        settings = self._load_from_db(user_id)
        if settings is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = UserSettings(user_id)
            self._save_to_db(settings)
        
        # –ö—ç—à–∏—Ä—É–µ–º
        self._cache[user_id] = settings
        return settings
    
    def update_user_format(self, user_id: int, format_str: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        if settings.set_format(format_str):
            self._save_to_db(settings)
            return True
        return False
    
    def update_user_verbosity(self, user_id: int, verbosity_str: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        if settings.set_verbosity(verbosity_str):
            self._save_to_db(settings)
            return True
        return False
    
    def _load_from_db(self, user_id: int) -> Optional[UserSettings]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        if not self.db:
            return None
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_settings
            result = self.db.execute_query(
                "SELECT format, verbosity FROM user_settings WHERE user_id = %s",
                (user_id,)
            )
            
            if result:
                row = result[0]
                return UserSettings.from_dict({
                    "user_id": user_id,
                    "format": row[0],
                    "verbosity": row[1]
                })
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        return None
    
    def _save_to_db(self, settings: UserSettings):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î"""
        if not self.db:
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.db.execute_query("""
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id BIGINT PRIMARY KEY,
                    format VARCHAR(20) DEFAULT 'structured',
                    verbosity VARCHAR(20) DEFAULT 'normal',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Upsert –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.db.execute_query("""
                INSERT INTO user_settings (user_id, format, verbosity, updated_at) 
                VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
                ON CONFLICT (user_id) DO UPDATE SET 
                    format = EXCLUDED.format,
                    verbosity = EXCLUDED.verbosity,
                    updated_at = CURRENT_TIMESTAMP
            """, (settings.user_id, settings.get_format_str(), settings.get_verbosity_str()))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {settings.user_id}: {e}")


def generate_format_keyboard() -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    keyboard = []
    
    for format_type in SummaryFormat:
        keyboard.append([{
            "text": FORMAT_DESCRIPTIONS[format_type],
            "callback_data": f"set_format_{format_type.value}"
        }])
    
    keyboard.append([{
        "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        "callback_data": "settings_menu"
    }])
    
    return {
        "inline_keyboard": keyboard
    }


def generate_verbosity_keyboard() -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"""
    keyboard = []
    
    for verbosity_type in SummaryVerbosity:
        keyboard.append([{
            "text": VERBOSITY_DESCRIPTIONS[verbosity_type],
            "callback_data": f"set_verbosity_{verbosity_type.value}"
        }])
    
    keyboard.append([{
        "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
        "callback_data": "settings_menu"
    }])
    
    return {
        "inline_keyboard": keyboard
    }


def generate_settings_keyboard() -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [{
            "text": "üìã –§–æ—Ä–º–∞—Ç —Å–∞–º–º–∞—Ä–∏",
            "callback_data": "choose_format"
        }],
        [{
            "text": "üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å", 
            "callback_data": "choose_verbosity"
        }],
        [{
            "text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            "callback_data": "close_settings"
        }]
    ]
    
    return {
        "inline_keyboard": keyboard
    }


def format_settings_message(settings: UserSettings) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    current_format = FORMAT_DESCRIPTIONS[settings.summary_format]
    current_verbosity = VERBOSITY_DESCRIPTIONS[settings.summary_verbosity]
    
    return f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —Å–∞–º–º–∞—Ä–∏**

üéØ **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –§–æ—Ä–º–∞—Ç: {current_format}
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å: {current_verbosity}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤:**

**–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:**
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ - —Ä–∞–∑–¥–µ–ª—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Ä–æ–∫–∏, –¥–µ–π—Å—Ç–≤–∏—è)
‚Ä¢ –ü—É–Ω–∫—Ç—ã - –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ê–±–∑–∞—Ü - —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ –∞–±–∑–∞—Ü–µ–≤

**–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö—Ä–∞—Ç–∫–æ - —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ (4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
‚Ä¢ –û–±—ã—á–Ω–æ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ (8-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ - –≤—Å–µ –¥–µ—Ç–∞–ª–∏ (12-15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""


def get_format_confirmation_message(format_type: SummaryFormat) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Ñ–æ—Ä–º–∞—Ç–∞"""
    description = FORMAT_DESCRIPTIONS[format_type]
    return f"‚úÖ –§–æ—Ä–º–∞—Ç —Å–∞–º–º–∞—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {description}"


def get_verbosity_confirmation_message(verbosity_type: SummaryVerbosity) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"""
    description = VERBOSITY_DESCRIPTIONS[verbosity_type]
    return f"‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {description}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)
_settings_manager = None

def init_settings_manager(db_connection=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_manager
    _settings_manager = UserSettingsManager(db_connection)

def get_settings_manager() -> Optional[UserSettingsManager]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return _settings_manager

def get_user_audio_settings(user_id: int) -> Tuple[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if _settings_manager:
        settings = _settings_manager.get_user_settings(user_id)
        return settings.get_format_str(), settings.get_verbosity_str()
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "structured", "normal"