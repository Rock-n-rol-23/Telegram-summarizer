import os
import tempfile
import logging
import aiofiles
import aiohttp
import subprocess
import shutil
from typing import Dict, Any, Optional
import speech_recognition as sr
from groq import Groq

logger = logging.getLogger(__name__)

class AudioProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"""
    
    def __init__(self, groq_client: Optional[Groq] = None):
        self.supported_extensions = ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.aac', '.opus', '.wma']
        self.max_file_size = 50 * 1024 * 1024  # 50MB –¥–ª—è –∞—É–¥–∏–æ
        self.max_duration = 3600  # –ú–∞–∫—Å–∏–º—É–º 1 —á–∞—Å
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏
        self.recognizer = sr.Recognizer()
        
        # Groq –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.groq_client = groq_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        self.ffmpeg_available = self._check_ffmpeg()
        if not self.ffmpeg_available:
            logger.warning("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
    def _check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ffmpeg —á–µ—Ä–µ–∑ which
            ffmpeg_path = shutil.which('ffmpeg')
            if ffmpeg_path:
                subprocess.run([ffmpeg_path, '-version'], capture_output=True, check=True)
                logger.info(f"FFmpeg –Ω–∞–π–¥–µ–Ω: {ffmpeg_path}")
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ –≤—ã–∑–≤–∞—Ç—å ffmpeg
                subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
                logger.info("FFmpeg –Ω–∞–π–¥–µ–Ω –≤ PATH")
                return True
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logger.warning(f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return False
    
    async def download_telegram_audio(self, file_info: Dict[str, Any], file_name: str, file_size: int) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –æ—Ç Telegram –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_size > self.max_file_size:
                return {
                    'success': False,
                    'error': f'–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {self.max_file_size // 1024 // 1024}MB)'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(file_name.lower())[1]
            if file_extension not in self.supported_extensions:
                return {
                    'success': False,
                    'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {", ".join(self.supported_extensions)}'
                }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_dir = tempfile.mkdtemp()
            local_file_path = os.path.join(temp_dir, file_name)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                async with session.get(file_info['file_path']) as response:
                    if response.status == 200:
                        async with aiofiles.open(local_file_path, 'wb') as f:
                            async for chunk in response.content.iter_chunked(8192):
                                await f.write(chunk)
                    else:
                        return {
                            'success': False,
                            'error': f'–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: HTTP {response.status}'
                        }
            
            return {
                'success': True,
                'file_path': local_file_path,
                'file_name': file_name,
                'file_size': file_size,
                'file_extension': file_extension,
                'temp_dir': temp_dir
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}'
            }
    
    def convert_to_wav(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç WAV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.ffmpeg_available:
            return {
                'success': False,
                'error': 'FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ'
            }
        
        try:
            logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ: {input_path} -> {output_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ ffmpeg
            ffmpeg_path = shutil.which('ffmpeg') or 'ffmpeg'
            
            # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–µ—á–∏
            cmd = [
                ffmpeg_path, '-i', input_path,
                '-ar', '16000',  # 16kHz sample rate (—Ö–æ—Ä–æ—à–æ –¥–ª—è —Ä–µ—á–∏)
                '-ac', '1',      # –ú–æ–Ω–æ
                '-c:a', 'pcm_s16le',  # 16-bit PCM
                '-y',            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {
                    'success': True,
                    'output_path': output_path
                }
            else:
                logger.error(f"üéµ –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {result.stderr}'
                }
                
        except Exception as e:
            logger.error(f"üéµ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}'
            }
    
    def get_audio_duration(self, file_path: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.ffmpeg_available:
            return 0.0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ ffprobe
            ffprobe_path = shutil.which('ffprobe') or 'ffprobe'
            
            cmd = [
                ffprobe_path, '-v', 'quiet', '-show_entries', 
                'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1',
                file_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                duration = float(result.stdout.strip())
                return duration
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {result.stderr}")
                return 0.0
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ: {e}")
            return 0.0
    
    def transcribe_audio(self, file_path: str) -> Dict[str, Any]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è SpeechRecognition"""
        try:
            logger.info(f"üé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ: {file_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            duration = self.get_audio_duration(file_path)
            if duration > self.max_duration:
                return {
                    'success': False,
                    'error': f'–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration/60:.1f} –º–∏–Ω). –ú–∞–∫—Å–∏–º—É–º: {self.max_duration/60} –º–∏–Ω'
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            file_extension = os.path.splitext(file_path)[1].lower()
            wav_path = file_path
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ WAV, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if file_extension != '.wav':
                temp_wav = file_path.replace(file_extension, '_converted.wav')
                conversion_result = self.convert_to_wav(file_path, temp_wav)
                
                if not conversion_result['success']:
                    return conversion_result
                
                wav_path = temp_wav
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            logger.info(f"üé§ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            with sr.AudioFile(wav_path) as source:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –Ω–∞ —à—É–º
                self.recognizer.adjust_for_ambient_noise(source)
                logger.info(f"üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ...")
                audio = self.recognizer.record(source)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            transcription_methods = []
            
            # Groq Whisper - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.groq_client:
                transcription_methods.append(('Groq Whisper API', lambda audio: self._transcribe_with_groq_whisper(wav_path)))
            
            transcription_methods.extend([
                ('Google Speech Recognition', self._transcribe_with_google),
                ('Sphinx (offline)', self._transcribe_with_sphinx),
            ])
            
            for method_name, method_func in transcription_methods:
                try:
                    logger.info(f"üé§ –ü—Ä–æ–±—É—é {method_name}...")
                    text = method_func(audio)
                    
                    if text and len(text.strip()) > 0:
                        logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —á–µ—Ä–µ–∑ {method_name}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
                        if wav_path != file_path and os.path.exists(wav_path):
                            os.remove(wav_path)
                        
                        return {
                            'success': True,
                            'text': text.strip(),
                            'method': method_name,
                            'duration': duration
                        }
                        
                except Exception as e:
                    logger.warning(f"üé§ {method_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            return {
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
            }
            
        except Exception as e:
            logger.error(f"üé§ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}'
            }
    
    def _transcribe_with_google(self, audio) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, —Å –ª–∏–º–∏—Ç–∞–º–∏)"""
        return self.recognizer.recognize_google(audio, language='ru-RU')
    
    def _transcribe_with_sphinx(self, audio) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ CMU Sphinx (–æ—Ñ–ª–∞–π–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
        return self.recognizer.recognize_sphinx(audio)
    
    def _transcribe_with_groq_whisper(self, audio_file_path: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Groq Whisper API"""
        try:
            with open(audio_file_path, 'rb') as file:
                transcription = self.groq_client.audio.transcriptions.create(
                    file=(os.path.basename(audio_file_path), file.read()),
                    model="whisper-large-v3",
                    language="ru",
                    response_format="text"
                )
                return transcription
        except Exception as e:
            logger.error(f"Groq Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            raise e
    
    def cleanup_temp_file(self, temp_dir: str):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            shutil.rmtree(temp_dir)
            logger.info(f"üéµ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞—É–¥–∏–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞: {temp_dir}")
        except Exception as e:
            logger.error(f"üéµ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—É–¥–∏–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_dir}: {e}")