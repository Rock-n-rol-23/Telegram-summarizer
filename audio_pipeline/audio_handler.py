"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è Railway –ø—Ä–æ–¥–∞–∫—à–Ω–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç voice, audio, document-audio, video_note
"""
import os
import tempfile
import time
import logging
import shutil
from typing import Optional

from .file_extractor import extract_audio_file_id_and_kind, get_audio_metadata
from .downloader import download_audio_async
from .vosk_transcriber import transcribe_audio
from utils.ffmpeg import to_wav_16k_mono, is_ffmpeg_available

logger = logging.getLogger(__name__)

class ProductionAudioHandler:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –∞—É–¥–∏–æ —Ö–µ–Ω–¥–ª–µ—Ä —Å –ø–æ–ª–Ω—ã–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        self.enabled = os.getenv('AUDIO_SUMMARY_ENABLED', 'true').lower() == 'true'
        self.max_duration = int(os.getenv('ASR_MAX_DURATION_MIN', '20')) * 60  # —Å–µ–∫—É–Ω–¥—ã
        self.max_file_size = int(os.getenv('AUDIO_MAX_FILE_SIZE_MB', '50')) * 1024 * 1024  # –±–∞–π—Ç—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not is_ffmpeg_available():
            logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ nixpacks.toml: nixPkgs = ['ffmpeg']")
        else:
            logger.info("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        logger.info(f"ProductionAudioHandler: enabled={self.enabled}, max_duration={self.max_duration}s")

    async def process_audio_message(self, bot, update, context):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç voice, audio, document-audio, video_note
        """
        message = update.message if hasattr(update, 'message') else update.get('message')
        if not message:
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ update")
            return
            
        chat_id = message.get('chat', {}).get('id') if isinstance(message, dict) else message.chat_id
        if not chat_id:
            logger.error("chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_msg = None
        temp_files = []
        
        try:
            # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
            status_msg = await bot.send_message(chat_id, "üé§ –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            status_msg_id = status_msg.get("result", {}).get("message", {}).get("message_id") if status_msg else None
            
            # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏ —Ç–∏–ø
            try:
                file_id, kind = extract_audio_file_id_and_kind(message)
                metadata = get_audio_metadata(message, kind)
                logger.info(f"–ê—É–¥–∏–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {kind}, file_id={file_id}, metadata={metadata}")
            except ValueError as e:
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, f"‚ùå {str(e)}")
                return
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            file_size = metadata.get('file_size', 0)
            duration = metadata.get('duration', 0)
            
            if file_size > self.max_file_size:
                error_msg = f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size/(1024*1024):.1f}MB (–º–∞–∫—Å: {self.max_file_size/(1024*1024)}MB)"
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return
                
            if duration > self.max_duration:
                error_msg = f"‚ùå –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration//60}:{duration%60:02d} (–º–∞–∫—Å: {self.max_duration//60}:{self.max_duration%60:02d})"
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return
            
            # –®–∞–≥ 4: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            if status_msg_id:
                await bot.edit_message_text(chat_id, status_msg_id, "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
                
            temp_dir = tempfile.mkdtemp()
            raw_path = await download_audio_async(bot, file_id, temp_dir)
            if not raw_path:
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
                return
            temp_files.append(raw_path)
            
            # –®–∞–≥ 5: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV 16kHz mono
            if status_msg_id:
                await bot.edit_message_text(chat_id, status_msg_id, "üîß –ù–æ—Ä–º–∞–ª–∏–∑—É—é –∞—É–¥–∏–æ...")
                
            wav_path = os.path.join(temp_dir, f"normalized_{int(time.time())}.wav")
            if not to_wav_16k_mono(raw_path, wav_path):
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                return
            temp_files.append(wav_path)
            
            # –®–∞–≥ 6: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            if status_msg_id:
                await bot.edit_message_text(chat_id, status_msg_id, "üéØ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
                
            asr_result = transcribe_audio(wav_path, language_hint=None)
            
            # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if asr_result.get("error"):
                error_msg = f"‚ùå {asr_result['error']}\n\nüìã –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ASR –¥–≤–∏–∂–∫–æ–≤:\n‚Ä¢ `pip install vosk==0.3.45`\n‚Ä¢ `pip install transformers torch`"
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return
                
            transcript = asr_result.get("text", "").strip()
            if not transcript:
                error_msg = "‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ ASR –¥–≤–∏–∂–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏\n‚Ä¢ –¢–∏—Ö–∞—è —Ä–µ—á—å"
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return
            
            # –®–∞–≥ 8: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            if status_msg_id:
                await bot.edit_message_text(chat_id, status_msg_id, "üìù –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –±–æ—Ç–∞
            if hasattr(bot, 'summarize_text'):
                summary = await bot.summarize_text(transcript)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                sentences = transcript.split('.')[:3]
                summary = '. '.join(sentences)[:500] + "..."
            
            # –®–∞–≥ 9: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            mime_type = metadata.get('mime_type', 'audio/unknown')
            engine = asr_result.get('engine', 'unknown')
            
            response = f"""üé§ **–°–∞–º–º–∞—Ä–∏ –∞—É–¥–∏–æ** ({kind})

üìã **–†–µ–∑—é–º–µ:**
{summary}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –§–æ—Ä–º–∞—Ç: {mime_type}
‚Ä¢ –†–∞–∑–º–µ—Ä: {file_size/(1024*1024):.1f}MB
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration//60}:{duration%60:02d}
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ ASR –¥–≤–∏–∂–æ–∫: {engine}
‚Ä¢ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è: ~{int(len(summary)/len(transcript)*100) if transcript else 0}%"""

            if status_msg_id:
                await bot.edit_message_text(chat_id, status_msg_id, response, parse_mode="Markdown")
            
            # –®–∞–≥ 10: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ —Ñ–∞–π–ª
            try:
                transcript_path = os.path.join(temp_dir, f"transcript_{int(time.time())}.txt")
                with open(transcript_path, 'w', encoding='utf-8') as f:
                    f.write(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ\n")
                    f.write(f"–¢–∏–ø: {kind}\n")
                    f.write(f"–§–æ—Ä–º–∞—Ç: {mime_type}\n")
                    f.write(f"ASR –¥–≤–∏–∂–æ–∫: {engine}\n")
                    f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration//60}:{duration%60:02d}\n")
                    f.write(f"\n--- –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø ---\n\n")
                    f.write(transcript)
                
                await bot.send_document(chat_id, transcript_path, caption="üìÑ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                temp_files.append(transcript_path)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            
            logger.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(transcript)} chars -> {len(summary)} chars")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)[:100]}"
            try:
                if status_msg_id:
                    await bot.edit_message_text(chat_id, status_msg_id, error_msg)
                else:
                    await bot.send_message(chat_id, error_msg)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
                
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for temp_file in temp_files:
                try:
                    if os.path.exists(temp_file):
                        if os.path.isfile(temp_file):
                            os.remove(temp_file)
                        elif os.path.isdir(temp_file):
                            shutil.rmtree(temp_file, ignore_errors=True)
                except:
                    pass

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_production_handler = ProductionAudioHandler()

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
async def handle_voice_production(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await _production_handler.process_audio_message(context.bot, update, context)

async def handle_audio_production(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    await _production_handler.process_audio_message(context.bot, update, context)

async def handle_video_note_production(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–æ–∫"""
    await _production_handler.process_audio_message(context.bot, update, context)

async def handle_document_audio_production(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å audio/* mime-type"""
    await _production_handler.process_audio_message(context.bot, update, context)