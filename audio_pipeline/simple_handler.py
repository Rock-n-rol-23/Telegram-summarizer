"""
–ü—Ä–æ—Å—Ç–æ–π –∞—É–¥–∏–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è Vosk + Railway
–ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""
import os
import logging
import tempfile
import shutil
from typing import Optional

from .vosk_transcriber import transcribe_audio, to_wav_16k_mono, check_ffmpeg

logger = logging.getLogger(__name__)

class SimpleAudioHandler:
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        self.enabled = os.getenv('AUDIO_SUMMARY_ENABLED', 'true').lower() == 'true'
        self.max_duration = int(os.getenv('ASR_MAX_DURATION_MIN', '20')) * 60  # —Å–µ–∫—É–Ω–¥—ã
        self.max_file_size = int(os.getenv('AUDIO_MAX_FILE_SIZE_MB', '50')) * 1024 * 1024  # –±–∞–π—Ç—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not check_ffmpeg():
            logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ nixpacks.toml: nixPkgs = ['ffmpeg']")
        else:
            logger.info("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        logger.info(f"SimpleAudioHandler: enabled={self.enabled}, max_duration={self.max_duration}s")

    def extract_file_id(self, message) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ voice/audio/video_note"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
            if hasattr(message, 'voice') and message.voice:
                file_id = message.voice.file_id
                logger.info(f"Voice message detected: {file_id}")
                return file_id
            elif hasattr(message, 'audio') and message.audio:
                file_id = message.audio.file_id  
                logger.info(f"Audio file detected: {file_id}")
                return file_id
            elif hasattr(message, 'video_note') and message.video_note:
                file_id = message.video_note.file_id
                logger.info(f"Video note detected: {file_id}")
                return file_id
            else:
                logger.warning("No audio file_id found in message")
                return None
                
        except Exception as e:
            logger.error(f"Error extracting file_id: {e}")
            return None

    async def download_file(self, bot, file_id: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await bot.get_file(file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if file_info.file_size > self.max_file_size:
                logger.warning(f"File too large: {file_info.file_size} bytes")
                return None
                
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.mkdtemp()
            file_path = os.path.join(temp_dir, f"audio_{file_id}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file_info.download_to_drive(file_path)
            logger.info(f"Downloaded: {file_path} ({file_info.file_size} bytes)")
            
            return file_path
            
        except Exception as e:
            logger.error(f"Download error: {e}")
            return None

    async def process_audio(self, bot, update, context):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        message = update.message
        chat_id = message.chat_id
        
        try:
            # –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º file_id
            file_id = self.extract_file_id(message)
            if not file_id:
                await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª")
                return

            # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_msg = await context.bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...")

            # –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            audio_path = await self.download_file(context.bot, file_id)
            if not audio_path:
                await context.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", chat_id, status_msg.message_id
                )
                return

            # –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            await context.bot.edit_message_text(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ...", chat_id, status_msg.message_id
            )
            
            wav_path = audio_path + ".wav"
            if not to_wav_16k_mono(audio_path, wav_path):
                await context.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ", chat_id, status_msg.message_id
                )
                return

            # –®–∞–≥ 5: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            await context.bot.edit_message_text(
                "üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", chat_id, status_msg.message_id
            )
            
            result = transcribe_audio(wav_path)
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("error"):
                error_msg = f"‚ùå {result['error']}\n\nüìã –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ASR –¥–≤–∏–∂–∫–æ–≤:\n‚Ä¢ `pip install vosk==0.3.45`\n‚Ä¢ `pip install transformers torch`"
                await context.bot.edit_message_text(error_msg, chat_id, status_msg.message_id)
                return
                
            transcript = result.get("text", "").strip()
            if not transcript:
                await context.bot.edit_message_text(
                    "‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ ASR –¥–≤–∏–∂–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏\n‚Ä¢ –¢–∏—Ö–∞—è —Ä–µ—á—å",
                    chat_id, status_msg.message_id
                )
                return

            # –®–∞–≥ 7: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –±–æ—Ç–∞)
            await context.bot.edit_message_text(
                "üîÑ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏...", chat_id, status_msg.message_id
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –±–æ—Ç–∞
            if hasattr(bot, 'summarize_text'):
                summary = await bot.summarize_text(transcript)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                sentences = transcript.split('.')[:3]
                summary = '. '.join(sentences)[:500] + "..."

            # –®–∞–≥ 8: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = f"üé§ **–°–∞–º–º–∞—Ä–∏ –∞—É–¥–∏–æ:**\n\n{summary}\n\n"
            response += f"üìä _–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–≤–∏–∂–∫–æ–º {result.get('engine', 'unknown')}_"
            
            await context.bot.edit_message_text(response, chat_id, status_msg.message_id, parse_mode='Markdown')
            
            logger.info(f"Audio processing completed: {len(transcript)} chars -> {len(summary)} chars")

        except Exception as e:
            logger.error(f"Audio processing error: {e}")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)[:100]}"
            try:
                if 'status_msg' in locals():
                    await context.bot.edit_message_text(error_msg, chat_id, status_msg.message_id)
                else:
                    await context.bot.send_message(chat_id, error_msg)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
                
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if 'audio_path' in locals() and audio_path:
                    temp_dir = os.path.dirname(audio_path)
                    if temp_dir.startswith('/tmp'):
                        shutil.rmtree(temp_dir, ignore_errors=True)
            except:
                pass

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_audio_handler = SimpleAudioHandler()

# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def handle_voice(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await _audio_handler.process_audio(context.bot, update, context)

async def handle_audio(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    await _audio_handler.process_audio(context.bot, update, context)

async def handle_video_note(update, context):
    """–•–µ–Ω–¥–ª–µ—Ä –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–æ–∫"""
    await _audio_handler.process_audio(context.bot, update, context)