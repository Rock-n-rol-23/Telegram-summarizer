"""
Vosk-based ASR transcriber —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
Railway production-ready —Å —É–º–Ω—ã–º–∏ fallback'–∞–º–∏
"""
import os
import logging
import shutil

logger = logging.getLogger(__name__)

def check_ffmpeg() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg"""
    return shutil.which("ffmpeg") is not None

def get_available_engines() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ASR –¥–≤–∏–∂–∫–æ–≤
    
    Returns:
        list: ["vosk", "huggingface", "speechbrain"] –∏–ª–∏ []
    """
    available = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vosk
    try:
        import vosk
        available.append("vosk")
        logger.info("‚úÖ Vosk ASR –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        logger.info("‚ùå Vosk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install vosk==0.3.45)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Hugging Face Transformers
    try:
        import transformers
        import torch
        available.append("huggingface")
        logger.info("‚úÖ Hugging Face Transformers –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        logger.info("‚ùå Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install transformers torch)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SpeechBrain
    try:
        import speechbrain
        available.append("speechbrain")
        logger.info("‚úÖ SpeechBrain –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        logger.info("‚ùå SpeechBrain –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install speechbrain)")
    
    return available

def transcribe_audio(wav_file_path: str, language_hint: str = None) -> dict:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ASR –¥–≤–∏–∂–∫–∏
    
    Args:
        wav_file_path: –ø—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É (16kHz mono)
        language_hint: —è–∑—ã–∫ ("ru", "en", None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
        
    Returns:
        dict: {"text": "...", "engine": "...", "error": "..." or None}
    """
    available_engines = get_available_engines()
    
    if not available_engines:
        return {
            "text": "",
            "engine": "none",
            "error": "ASR –¥–≤–∏–∂–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install vosk==0.3.45"
        }
    
    # –ü—Ä–æ–±—É–µ–º –¥–≤–∏–∂–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for engine in available_engines:
        try:
            if engine == "vosk":
                result = transcribe_with_vosk(wav_file_path, language_hint)
                if result:
                    return {"text": result, "engine": "vosk", "error": None}
                    
            elif engine == "huggingface":
                result = transcribe_with_huggingface(wav_file_path, language_hint)
                if result:
                    return {"text": result, "engine": "huggingface", "error": None}
                    
            elif engine == "speechbrain":
                result = transcribe_with_speechbrain(wav_file_path, language_hint)
                if result:
                    return {"text": result, "engine": "speechbrain", "error": None}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ {engine}: {e}")
            continue
    
    return {
        "text": "",
        "engine": "failed",
        "error": f"–í—Å–µ ASR –¥–≤–∏–∂–∫–∏ ({', '.join(available_engines)}) –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ"
    }

def transcribe_with_vosk(wav_file_path: str, language_hint: str = None) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Vosk"""
    try:
        import vosk
        import json
        import wave
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ —è–∑—ã–∫—É
        if language_hint == "ru":
            model_path = "vosk-model-ru-0.42"
        elif language_hint == "en":
            model_path = "vosk-model-en-us-0.22"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å
            model_path = "vosk-model-ru-0.42"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å
        if not os.path.exists(model_path):
            logger.warning(f"Vosk –º–æ–¥–µ–ª—å {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å.")
            return None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        model = vosk.Model(model_path)
        recognizer = vosk.KaldiRecognizer(model, 16000)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º WAV —Ñ–∞–π–ª
        with wave.open(wav_file_path, 'rb') as wf:
            results = []
            
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                    
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    if "text" in result and result["text"]:
                        results.append(result["text"])
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result = json.loads(recognizer.FinalResult())
            if "text" in final_result and final_result["text"]:
                results.append(final_result["text"])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        text = " ".join(results).strip()
        logger.info(f"Vosk —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return text if text else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Vosk: {e}")
        return None

def transcribe_with_huggingface(wav_file_path: str, language_hint: str = None) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face Wav2Vec2"""
    try:
        import torch
        import librosa
        from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —è–∑—ã–∫—É
        if language_hint == "ru":
            model_name = "bond005/wav2vec2-large-ru-golos"
        else:
            model_name = "facebook/wav2vec2-large-960h"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        tokenizer = Wav2Vec2Tokenizer.from_pretrained(model_name)
        model = Wav2Vec2ForCTC.from_pretrained(model_name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
        speech, sample_rate = librosa.load(wav_file_path, sr=16000)
        
        # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
        input_values = tokenizer(speech, return_tensors="pt", sampling_rate=16000).input_values
        
        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        with torch.no_grad():
            logits = model(input_values).logits
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
        predicted_ids = torch.argmax(logits, dim=-1)
        transcription = tokenizer.decode(predicted_ids[0])
        
        logger.info(f"Hugging Face —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {len(transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
        return transcription.strip() if transcription else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Hugging Face: {e}")
        return None

def transcribe_with_speechbrain(wav_file_path: str, language_hint: str = None) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ SpeechBrain"""
    try:
        from speechbrain.pretrained import EncoderDecoderASR
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
        if language_hint == "ru":
            model_name = "speechbrain/asr-crdnn-rnnlm-librispeech"  # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–∞ —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å
        else:
            model_name = "speechbrain/asr-crdnn-rnnlm-librispeech"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        asr_model = EncoderDecoderASR.from_hparams(source=model_name)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        transcription = asr_model.transcribe_file(wav_file_path)
        
        logger.info(f"SpeechBrain —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {len(transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
        return transcription.strip() if transcription else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SpeechBrain: {e}")
        return None

def download_vosk_model(language: str = "ru") -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç Vosk –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞
    
    Args:
        language: "ru" –∏–ª–∏ "en"
        
    Returns:
        bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    try:
        import requests
        import zipfile
        
        if language == "ru":
            url = "https://alphacephei.com/vosk/models/vosk-model-ru-0.42.zip"
            model_name = "vosk-model-ru-0.42"
        elif language == "en":
            url = "https://alphacephei.com/vosk/models/vosk-model-en-us-0.22.zip"
            model_name = "vosk-model-en-us-0.22"
        else:
            return False
        
        if os.path.exists(model_name):
            logger.info(f"–ú–æ–¥–µ–ª—å {model_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º
        response = requests.get(url, stream=True)
        zip_path = f"{model_name}.zip"
        
        with open(zip_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall('.')
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
        os.remove(zip_path)
        
        logger.info(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ASR –¥–≤–∏–∂–∫–æ–≤...")
    
    engines = get_available_engines()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–≤–∏–∂–∫–∏: {engines}")
    
    ffmpeg_ok = check_ffmpeg()
    print(f"FFmpeg: {'‚úÖ' if ffmpeg_ok else '‚ùå'}")
    
    if not engines:
        print("üìã –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤–∏–∂–∫–æ–≤:")
        print("  pip install vosk==0.3.45")
        print("  pip install transformers torch")
        print("  pip install speechbrain")