"""
–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞
–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ -> ffmpeg -> ASR -> —Å–∞–º–º–∞—Ä–∏ -> edit
"""
import os
import time
import traceback
import tempfile
import logging
from typing import Optional, Dict, Any

from .file_extractor import extract_audio_file_id_and_kind, get_audio_metadata
from .downloader import download_audio
from .vosk_transcriber import transcribe_audio, get_available_engines
from utils.ffmpeg import to_wav_16k_mono, is_ffmpeg_available
from summarizer import SummarizerService

logger = logging.getLogger(__name__)

def extract_audio_file_id_and_kind_from_message(message: dict) -> tuple:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏ —Ç–∏–ø –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    
    Args:
        message: dict —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
        
    Returns:
        tuple: (file_id, kind) –∏–ª–∏ (None, None)
    """
    # Voice message
    if "voice" in message:
        return message["voice"]["file_id"], "voice"
    
    # Audio file
    if "audio" in message:
        return message["audio"]["file_id"], "audio"
    
    # Document with audio mime-type
    if "document" in message:
        doc = message["document"]
        mime_type = doc.get("mime_type", "")
        if mime_type.startswith("audio/"):
            return doc["file_id"], "document-audio"
    
    # Video note
    if "video_note" in message:
        return message["video_note"]["file_id"], "video_note"
    
    return None, None

def handle_audio_message_sync(bot, message: dict, workdir: str = "/tmp") -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        bot: SimpleTelegramBot instance
        message: Telegram message dict
        workdir: —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
    Returns:
        bool: True –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ), False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    file_id, kind = extract_audio_file_id_and_kind_from_message(message)
    if not file_id:
        return False  # –Ω–µ –∞—É–¥–∏–æ - –ø—É—Å—Ç—å –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    
    chat_id = message["chat"]["id"]
    user_id = message["from"]["id"]
    
    logger.info(f"üéµ ROUTE audio -> start: file_id={file_id}, kind={kind}, user={user_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    try:
        placeholder_response = bot.send_message(chat_id, "üéµ –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        if not placeholder_response or not placeholder_response.get("ok"):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É: {placeholder_response}")
            return True
        
        status_msg_id = placeholder_response["result"]["message_id"]
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: message_id={status_msg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏: {e}")
        return True
    
    t0 = time.time()
    raw_path = wav_path = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
        if not is_ffmpeg_available():
            error_msg = "‚ùå FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
            logger.error(error_msg)
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ASR –¥–≤–∏–∂–∫–∏
        available_engines = get_available_engines()
        if not available_engines:
            error_msg = "‚ùå ASR –¥–≤–∏–∂–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install vosk==0.3.45"
            logger.error(error_msg)
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
            return True
        
        logger.info(f"ASR –¥–≤–∏–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {available_engines}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(workdir, exist_ok=True)
        
        # 1) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            raw_path = download_audio(bot, file_id, workdir)
            logger.info(f"‚úÖ download ok: {raw_path}")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}"
            logger.error(error_msg)
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
            return True
        
        # 2) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV 16kHz mono
        try:
            wav_path = os.path.join(workdir, f"norm_{int(time.time())}_{user_id}.wav")
            success = to_wav_16k_mono(raw_path, wav_path)
            if not success:
                raise Exception("FFmpeg –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            logger.info(f"‚úÖ ffmpeg ok: {wav_path}")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            logger.error(error_msg)
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
            return True
        
        # 3) ASR —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        try:
            asr_result = transcribe_audio(wav_path, language_hint="ru")
            
            if asr_result.get("error"):
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ ASR: {asr_result['error']}"
                logger.error(error_msg)
                bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return True
            
            transcript_text = asr_result.get("text", "").strip()
            if not transcript_text:
                error_msg = "‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ –±–µ–∑ —Ä–µ—á–∏."
                logger.warning(error_msg)
                bot.edit_message_text(chat_id, status_msg_id, error_msg)
                return True
            
            engine = asr_result.get("engine", "unknown")
            logger.info(f"‚úÖ asr ok: engine={engine}, text_len={len(transcript_text)}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"
            logger.error(error_msg)
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
            return True
        
        # 4) –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30%)
            from database import get_user_settings
            user_settings = get_user_settings(user_id)
            compression_ratio = user_settings.get("compression_ratio", 0.3)
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –∏ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º  
            from summarizer import summarize_text_sync
            summary = summarize_text_sync(transcript_text, compression_ratio)
            
            if not summary:
                summary = transcript_text  # fallback –Ω–∞ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                
            logger.info(f"‚úÖ summary ok: len={len(summary)}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}"
            logger.error(error_msg)
            # Fallback –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            summary = transcript_text
        
        # 5) –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_time = time.time() - t0
        final_text = (
            f"üéµ **–°–∞–º–º–∞—Ä–∏ –∞—É–¥–∏–æ**\n\n"
            f"üîß –î–≤–∏–∂–æ–∫: {engine}\n"
            f"‚è± –í—Ä–µ–º—è: {total_time:.1f}—Å\n"
            f"üìù –¢–∏–ø: {kind}\n\n"
            f"{summary}"
        )
        
        # 6) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        try:
            bot.edit_message_text(chat_id, status_msg_id, final_text)
            logger.info(f"‚úÖ ROUTE audio -> done ({total_time:.1f}s)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(chat_id, final_text)
        
        return True
        
    except Exception as e:
        error_msg = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e.__class__.__name__}: {e}"
        logger.error(error_msg)
        logger.error(f"üîç Traceback: {traceback.format_exc()}")
        
        try:
            bot.edit_message_text(chat_id, status_msg_id, error_msg)
        except Exception:
            try:
                bot.send_message(chat_id, error_msg)
            except Exception:
                pass
        
        return True  # —Å—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in (raw_path, wav_path):
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {path}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}: {e}")

def bot_log(message: str):
    """–õ–æ–≥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.info(f"üéµ AUDIO: {message}")