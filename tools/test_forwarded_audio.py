#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_forwarded_audio_routing():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("=== –¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ ===")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    forwarded_voice = {
        "message": {
            "message_id": 1,
            "from": {"id": 12345, "username": "testuser"},
            "chat": {"id": 12345},
            "forward_from": {"id": 67890, "username": "original_user"},
            "voice": {
                "file_id": "BAADBAADWgADBREAAYdaXXDbJEORAg",
                "duration": 10,
                "mime_type": "audio/ogg",
                "file_size": 5432
            }
        }
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    forwarded_audio = {
        "message": {
            "message_id": 2,
            "from": {"id": 12345, "username": "testuser"},
            "chat": {"id": 12345},
            "forward_origin": {"type": "user", "date": 1638360000},
            "audio": {
                "file_id": "BAADBAADXAADBREAAe5bAAFSfWCGAg",
                "duration": 180,
                "performer": "Artist",
                "title": "Song",
                "mime_type": "audio/mpeg",
                "file_size": 4321000
            }
        }
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    forwarded_audio_doc = {
        "message": {
            "message_id": 3,
            "from": {"id": 12345, "username": "testuser"},
            "chat": {"id": 12345},
            "forward_from_chat": {"id": 54321, "type": "channel"},
            "document": {
                "file_id": "BAADBAADYgADBREAAQbgNlGhCe8qAg",
                "file_name": "meeting_recording.oga",
                "mime_type": "audio/ogg",
                "file_size": 2100000
            }
        }
    }
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–¥–æ–ª–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    forwarded_photo = {
        "message": {
            "message_id": 4,
            "from": {"id": 12345, "username": "testuser"},
            "chat": {"id": 12345},
            "forward_from": {"id": 67890},
            "photo": [
                {"file_id": "AgACAgIAAx0EW8sJOgACBhN...", "width": 1280, "height": 720}
            ]
        }
    }
    
    def check_should_process_as_audio(message_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞—É–¥–∏–æ"""
        message = message_data["message"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        is_forwarded = any(key in message for key in ['forward_from', 'forward_from_chat', 'forward_origin'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –º–µ–¥–∏–∞
        has_voice = "voice" in message
        has_audio = "audio" in message
        has_audio_document = False
        
        if "document" in message:
            document = message["document"]
            file_name = document.get("file_name", "").lower()
            mime_type = document.get("mime_type", "")
            
            audio_extensions = [".mp3", ".wav", ".m4a", ".ogg", ".flac", ".aac", ".opus", ".oga"]
            audio_mime_types = ["audio/mpeg", "audio/mp3", "audio/wav", "audio/m4a", "audio/ogg", "audio/flac", "audio/aac", "audio/opus"]
            
            has_audio_document = (
                mime_type in audio_mime_types or
                any(file_name.endswith(ext) for ext in audio_extensions)
            )
        
        has_other_media = any(key in message for key in ['photo', 'video', 'sticker', 'animation', 'video_note'])
        
        return (has_voice or has_audio or has_audio_document), has_other_media, is_forwarded
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ", forwarded_voice, True, False),
        ("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ", forwarded_audio, True, False),
        ("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç", forwarded_audio_doc, True, False),
        ("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", forwarded_photo, False, True),
    ]
    
    all_passed = True
    
    for name, data, should_be_audio, should_be_ignored in test_cases:
        is_audio, has_other_media, is_forwarded = check_should_process_as_audio(data)
        
        print(f"\n{name}:")
        print(f"  –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ: {is_forwarded}")
        print(f"  –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞—É–¥–∏–æ: {should_be_audio} -> {is_audio}")
        print(f"  –î–æ–ª–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: {should_be_ignored} -> {has_other_media and not is_audio}")
        
        if is_audio != should_be_audio:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª–æ—Å—å {should_be_audio}, –ø–æ–ª—É—á–µ–Ω–æ {is_audio}")
            all_passed = False
        else:
            print(f"  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if all_passed:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ")
    
    return all_passed

def test_audio_extensions():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –∞—É–¥–∏–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π ===")
    
    audio_extensions = [".mp3", ".wav", ".m4a", ".ogg", ".flac", ".aac", ".opus", ".oga"]
    
    test_files = [
        ("music.mp3", True),
        ("voice.oga", True),  # Telegram –≥–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Å—Ç–æ –≤ .oga
        ("record.opus", True),  # WebM/Opus —Ñ–æ—Ä–º–∞—Ç
        ("document.pdf", False),
        ("video.mp4", False),
        ("audio.wav", True),
    ]
    
    all_passed = True
    
    for filename, should_match in test_files:
        matches = any(filename.lower().endswith(ext) for ext in audio_extensions)
        print(f"  {filename}: {matches} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {should_match})")
        
        if matches != should_match:
            print(f"    ‚ùå –û–®–ò–ë–ö–ê")
            all_passed = False
        else:
            print(f"    ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .oga
    has_oga = ".oga" in audio_extensions
    print(f"\n  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ .oga –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {has_oga}")
    if not has_oga:
        print("    ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: .oga –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        all_passed = False
    else:
        print("    ‚úì .oga –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return all_passed

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n")
    
    test1_passed = test_forwarded_audio_routing()
    test2_passed = test_audio_extensions()
    
    print(f"\n{'='*50}")
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã (.mp3, .oga, –∏ —Ç.–¥.)")
        print("   ‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞")
        return 0
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram")
        return 1

if __name__ == "__main__":
    sys.exit(main())