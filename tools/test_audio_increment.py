#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
"""
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.tg_audio import extract_audio_descriptor, get_audio_info_text, is_audio_document, sanitize_filename

def test_audio_descriptor_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∞—É–¥–∏–æ"""
    print("=== –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ===")
    
    # –¢–µ—Å—Ç 1: Voice —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice_message = {
        "voice": {
            "file_id": "BAADBAADRgADBREAAYag2DP7...",
            "duration": 15,
            "mime_type": "audio/ogg"
        }
    }
    
    descriptor = extract_audio_descriptor(voice_message)
    print(f"Voice: {descriptor}")
    assert descriptor and descriptor["kind"] == "voice"
    assert descriptor["file_id"] == "BAADBAADRgADBREAAYag2DP7..."
    assert descriptor["duration"] == 15
    print("‚úÖ Voice test passed")
    
    # –¢–µ—Å—Ç 2: Audio —Ñ–∞–π–ª
    audio_message = {
        "audio": {
            "file_id": "BAADBAADRgADBREAAYag2DP7xxx",
            "file_name": "song.mp3", 
            "duration": 180,
            "mime_type": "audio/mpeg"
        }
    }
    
    descriptor = extract_audio_descriptor(audio_message)
    print(f"Audio: {descriptor}")
    assert descriptor and descriptor["kind"] == "audio"
    assert descriptor["file_name"] == "song.mp3"
    print("‚úÖ Audio test passed")
    
    # –¢–µ—Å—Ç 3: Video note
    video_note_message = {
        "video_note": {
            "file_id": "DQACAgIAAxkBAAIC...",
            "duration": 30
        }
    }
    
    descriptor = extract_audio_descriptor(video_note_message)
    print(f"Video note: {descriptor}")
    assert descriptor and descriptor["kind"] == "video_note"
    print("‚úÖ Video note test passed")
    
    # –¢–µ—Å—Ç 4: Document —Å –∞—É–¥–∏–æ MIME
    audio_doc_message = {
        "document": {
            "file_id": "BAADBAADRgADBREAAYag2DP7yyy",
            "file_name": "recording.wav",
            "mime_type": "audio/wav"
        }
    }
    
    descriptor = extract_audio_descriptor(audio_doc_message)
    print(f"Audio document: {descriptor}")
    assert descriptor and descriptor["kind"] == "document"
    assert descriptor["file_name"] == "recording.wav"
    print("‚úÖ Audio document test passed")
    
    # –¢–µ—Å—Ç 5: Document —Å –∞—É–¥–∏–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –Ω–æ –±–µ–∑ MIME
    audio_doc_ext_message = {
        "document": {
            "file_id": "BAADBAADRgADBREAAYag2DP7zzz",
            "file_name": "voice_memo.m4a",
            "mime_type": "application/octet-stream"
        }
    }
    
    descriptor = extract_audio_descriptor(audio_doc_ext_message)
    print(f"Audio document (by extension): {descriptor}")
    assert descriptor and descriptor["kind"] == "document"
    print("‚úÖ Audio document (extension) test passed")
    
    # –¢–µ—Å—Ç 6: –ù–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text_message = {
        "text": "Hello world"
    }
    
    descriptor = extract_audio_descriptor(text_message)
    print(f"Text message: {descriptor}")
    assert descriptor is None
    print("‚úÖ Non-audio message test passed")
    
    # –¢–µ—Å—Ç 7: –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ voice —Å–æ–æ–±—â–µ–Ω–∏–µ
    forwarded_voice = {
        "forward_from": {"id": 123456},
        "voice": {
            "file_id": "BAADBAADRgADBREAAYag2DP7forwarded",
            "duration": 25
        }
    }
    
    descriptor = extract_audio_descriptor(forwarded_voice)
    print(f"Forwarded voice: {descriptor}")
    assert descriptor and descriptor["kind"] == "voice"
    print("‚úÖ Forwarded voice test passed")

def test_audio_info_text():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ"""
    print("\n=== –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===")
    
    descriptor = {
        "kind": "voice",
        "file_id": "test123",
        "file_name": "voice.ogg",
        "duration": 65  # 1:05
    }
    
    info = get_audio_info_text(descriptor)
    print(f"Audio info: {info}")
    assert "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in info
    assert "1:05" in info
    print("‚úÖ Audio info formatting test passed")

def test_document_audio_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===")
    
    # –ê—É–¥–∏–æ –ø–æ MIME
    audio_doc = {
        "mime_type": "audio/mpeg",
        "file_name": "song.mp3"
    }
    assert is_audio_document(audio_doc)
    print("‚úÖ Audio MIME detection passed")
    
    # –ê—É–¥–∏–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    audio_ext_doc = {
        "mime_type": "application/octet-stream",
        "file_name": "recording.wav"
    }
    assert is_audio_document(audio_ext_doc)
    print("‚úÖ Audio extension detection passed")
    
    # –ù–µ –∞—É–¥–∏–æ
    text_doc = {
        "mime_type": "application/pdf",
        "file_name": "document.pdf"
    }
    assert not is_audio_document(text_doc)
    print("‚úÖ Non-audio document detection passed")

def test_filename_sanitization():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ ===")
    
    test_cases = [
        ("normal_file.mp3", "normal_file.mp3"),
        ("file with spaces.wav", "file_with_spaces.wav"),
        ("file<>:|?.ogg", "file.ogg"),
        ("–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–æ–µ_–∏–º—è_—Ñ–∞–π–ª–∞_–∫–æ—Ç–æ—Ä–æ–µ_–Ω—É–∂–Ω–æ_–æ–±—Ä–µ–∑–∞—Ç—å_" * 5 + ".mp3", None),  # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è
        ("", "audio_file"),
        ("   ___   ", "audio_file")
    ]
    
    for original, expected in test_cases:
        result = sanitize_filename(original)
        print(f"'{original}' -> '{result}'")
        if expected:
            assert result == expected
        else:
            assert len(result) <= 100  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è
    
    print("‚úÖ Filename sanitization tests passed")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
    
    try:
        test_audio_descriptor_extraction()
        test_audio_info_text() 
        test_document_audio_detection()
        test_filename_sanitization()
        
        print(f"\n{'='*50}")
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"{'='*50}")
        print("\nüéâ –ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:")
        print("‚Ä¢ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤")
        print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π") 
        print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ (voice, audio, video_note, document)")
        print("‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è")
        print("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())