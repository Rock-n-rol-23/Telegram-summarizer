#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π Cloudflare
"""
import sys
import os
import requests
from bs4 import BeautifulSoup

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_cloudflare_detection():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ Cloudflare –∑–∞—â–∏—Ç—ã"""
    print("=== –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ Cloudflare ===")
    
    cloudflare_indicators = [
        'just a moment', 'challenge-platform', 'cloudflare',
        'please wait while your request is being verified',
        'enable javascript and cookies to continue',
        '_cf_chl_opt', 'cf-browser-verification'
    ]
    
    # –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç TechSpot
    techspot_response = '''<!DOCTYPE html><html lang="en-US"><head><title>Just a moment...</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script>(function(){window._cf_chl_opt = {cvId: '3',cZone: 'www.techspot.com'}})</script>'''
    
    detected = any(indicator in techspot_response.lower() for indicator in cloudflare_indicators)
    print(f"TechSpot Cloudflare detection: {detected} ‚úÖ")
    
    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    normal_content = "This is a regular news article about technology and innovation"
    normal_detected = any(indicator in normal_content.lower() for indicator in cloudflare_indicators)
    print(f"False positive check: {not normal_detected} ‚úÖ")
    
    return detected and not normal_detected

def test_url_processing():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL"""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL ===")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
    }
    
    test_urls = [
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL
        ("TechSpot (Cloudflare)", "https://www.techspot.com/news/109095-steve-wozniak-reflects-happiness-legacy-75th-birthday.html"),
        # –†–∞–±–æ—á–∏–π URL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è  
        ("HTTPBin (should work)", "https://httpbin.org/html"),
    ]
    
    results = []
    
    for name, url in test_urls:
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É—é {name}:")
        print(f"URL: {url}")
        
        try:
            response = requests.get(url, headers=headers, timeout=15)
            print(f"Status: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
            cloudflare_indicators = [
                'just a moment', 'challenge-platform', 'cloudflare',
                'enable javascript and cookies to continue',
                '_cf_chl_opt', 'cf-browser-verification'
            ]
            
            page_text = response.text.lower()
            is_blocked = any(indicator in page_text for indicator in cloudflare_indicators)
            
            if is_blocked:
                print("‚ùå Cloudflare protection detected")
                results.append((name, "blocked"))
            else:
                soup = BeautifulSoup(response.content, 'lxml')
                text = soup.get_text()
                text_length = len(text.strip())
                
                print(f"‚úÖ Content extracted: {text_length} characters")
                if text_length > 100:
                    print(f"First 100 chars: {text[:100]}...")
                    results.append((name, "success"))
                else:
                    print("‚ö†Ô∏è Content too short")
                    results.append((name, "short_content"))
                    
        except Exception as e:
            print(f"‚ùå Error: {e}")
            results.append((name, f"error: {e}"))
    
    return results

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ Cloudflare\n")
    
    # –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ Cloudflare
    cloudflare_test = test_cloudflare_detection()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
    url_results = test_url_processing()
    
    print(f"\n{'='*50}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"Cloudflare detection: {'‚úÖ OK' if cloudflare_test else '‚ùå FAIL'}")
    
    print("\nURL processing results:")
    for name, result in url_results:
        status_icon = {
            'success': '‚úÖ',
            'blocked': 'üö´', 
            'short_content': '‚ö†Ô∏è'
        }.get(result.split(':')[0], '‚ùå')
        print(f"  {name}: {status_icon} {result}")
    
    print(f"\n{'='*50}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TechSpot –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    techspot_blocked = any('blocked' in result for name, result in url_results if 'TechSpot' in name)
    
    if techspot_blocked:
        print("‚úÖ –£–°–ü–ï–•: TechSpot –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Cloudflare")
        print("   –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        print("   '–°–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±–æ—Ç–æ–≤ (Cloudflare).")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫.'")
        return 0
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: TechSpot –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
        return 1

if __name__ == "__main__":
    sys.exit(main())