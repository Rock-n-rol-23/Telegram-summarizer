#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è PPTX —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from content_extraction.pptx_extractor import extract_text_from_pptx, check_pptx_availability, get_pptx_info, extract_pptx_summary_info
    from pptx import Presentation
    from pptx.util import Inches
except ImportError as e:
    print(f"‚ùå PPTX –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-pptx –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PPTX —Ñ—É–Ω–∫—Ü–∏–π")
    sys.exit(1)


def create_test_pptx(output_path: str):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é PPTX –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"""
    prs = Presentation()
    
    # –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Å–ª–∞–π–¥
    slide1 = prs.slides.add_slide(prs.slide_layouts[0])  # Title slide layout
    slide1.shapes.title.text = "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
    subtitle = slide1.placeholders[1]
    subtitle.text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PPTX"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞
    notes_slide1 = slide1.notes_slide
    notes_slide1.notes_text_frame.text = "–≠—Ç–æ –∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–∞–π–¥–∞. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
    
    # –°–ª–∞–π–¥ 2: –°–ª–∞–π–¥ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    slide2 = prs.slides.add_slide(prs.slide_layouts[1])  # Content slide layout
    slide2.shapes.title.text = "–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"
    
    content = slide2.placeholders[1]
    tf = content.text_frame
    tf.text = "–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    p = tf.add_paragraph()
    p.text = "–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
    p.level = 0
    
    p = tf.add_paragraph()
    p.text = "–ü–æ–¥–ø—É–Ω–∫—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞"
    p.level = 1
    
    p = tf.add_paragraph()
    p.text = "–¢—Ä–µ—Ç–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–Ω–∫—Ç"
    p.level = 0
    
    # –ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–∞–π–¥–∞
    notes_slide2 = slide2.notes_slide
    notes_slide2.notes_text_frame.text = "–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏. –ó–¥–µ—Å—å —Å–ø–∏–∫–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    
    # –°–ª–∞–π–¥ 3: –°–ª–∞–π–¥ —Ç–æ–ª—å–∫–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    slide3 = prs.slides.add_slide(prs.slide_layouts[6])  # Blank slide
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –≤—Ä—É—á–Ω—É—é
    textbox = slide3.shapes.add_textbox(Inches(1), Inches(1), Inches(8), Inches(2))
    text_frame = textbox.text_frame
    text_frame.text = "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ"
    
    p = text_frame.add_paragraph()
    p.text = "–≠—Ç–æ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–∞–π–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
    
    p = text_frame.add_paragraph()
    p.text = "English text: Summary and conclusions"
    
    # –°–ª–∞–π–¥ 4: –ü—É—Å—Ç–æ–π —Å–ª–∞–π–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    slide4 = prs.slides.add_slide(prs.slide_layouts[6])  # Blank slide –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    prs.save(output_path)


def test_pptx_availability():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PPTX –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PPTX")
    
    available = check_pptx_availability()
    print(f"PPTX –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ' if available else '‚ùå'}")
    
    info = get_pptx_info()
    print(f"–°—Ç–∞—Ç—É—Å: {info}")
    
    assert available, "PPTX –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    print("‚úÖ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–ª")


def test_pptx_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PPTX"""
    print("\nüß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ PPTX")
    
    test_pptx_path = "test_presentation.pptx"
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        create_test_pptx(test_pptx_path)
        assert os.path.exists(test_pptx_path), "–¢–µ—Å—Ç–æ–≤–∞—è PPTX –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        result = extract_text_from_pptx(test_pptx_path)
        
        assert result['success'], f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error')}"
        assert len(result['text']) >= 100, f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞
        text = result['text']
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" in text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert "–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã" in text, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert "–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç" in text, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert "–∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞" in text.lower(), "–ó–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        assert result['method'] == 'python-pptx', f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥: {result['method']}"
        
        meta = result['meta']
        assert 'slides' in meta, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        assert meta['total_slides'] >= 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 3 —Å–ª–∞–π–¥–∞, –ø–æ–ª—É—á–µ–Ω–æ {meta['total_slides']}"
        assert meta['slides_with_content'] >= 2, f"–ú–∏–Ω–∏–º—É–º 2 —Å–ª–∞–π–¥–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–∞–π–¥–æ–≤
        slides = meta['slides']
        assert len(slides) >= 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 3 —Å–ª–∞–π–¥–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
        
        # –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        slide1 = slides[0]
        assert slide1['title'] == "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–∞–π–¥–∞: {slide1['title']}"
        assert slide1['notes'], "–ó–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {meta['total_slides']} —Å–ª–∞–π–¥–æ–≤")
        print(f"‚úÖ –°–ª–∞–π–¥—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {meta['slides_with_content']}")
        print(f"‚úÖ –°–ª–∞–π–¥—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏: {meta['slides_with_notes']}")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_pptx_path):
            os.remove(test_pptx_path)


def test_pptx_summary_info():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥–æ–≤
    test_slides = [
        {
            "index": 1,
            "title": "–í–≤–µ–¥–µ–Ω–∏–µ",
            "content": ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–¶–µ–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"],
            "notes": "–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è",
            "has_content": True
        },
        {
            "index": 2, 
            "title": "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å",
            "content": ["–ü—É–Ω–∫—Ç 1", "–ü—É–Ω–∫—Ç 2", "–ü—É–Ω–∫—Ç 3"],
            "notes": "",
            "has_content": True
        },
        {
            "index": 3,
            "title": "",
            "content": [],
            "notes": "",
            "has_content": False
        }
    ]
    
    summary = extract_pptx_summary_info(test_slides)
    
    assert "3 —Å–ª–∞–π–¥–æ–≤" in summary, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ª–∞–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    assert "2 —Å–ª–∞–π–¥–∞—Ö" in summary, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–∞–π–¥–∞—Ö —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    assert "–í–≤–µ–¥–µ–Ω–∏–µ" in summary, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    assert "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å" in summary, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≤–æ–¥–∫–∏:\n{summary}")


def test_empty_presentation():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç –ø—É—Å—Ç–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
    
    test_pptx_path = "test_empty.pptx"
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        prs = Presentation()
        slide = prs.slides.add_slide(prs.slide_layouts[6])  # Blank slide
        prs.save(test_pptx_path)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
        result = extract_text_from_pptx(test_pptx_path)
        
        assert not result['success'], "–ü—É—Å—Ç–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É"
        assert "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞" in result['error'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {result['error']}"
        
        print("‚úÖ –ü—É—Å—Ç–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        
    finally:
        if os.path.exists(test_pptx_path):
            os.remove(test_pptx_path)


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    result = extract_text_from_pptx("nonexistent_file.pptx")
    assert not result['success'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"
    assert "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PPTX" in result['error'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {result['error']}"
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PPTX —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞\n")
    
    tests = [
        test_pptx_availability,
        test_pptx_extraction,
        test_pptx_summary_info,
        test_empty_presentation,
        test_error_handling
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ PPTX: {passed} –ø—Ä–æ—à–ª–∏, {failed} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    return failed == 0


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)