"""
–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –±–µ–∑ Groq API —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–ª–æ–∫–∞ "üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã"
"""

import pytest
import asyncio
from summarization.pipeline import SummarizationPipeline
from quality.quality_checks import extract_critical_numbers

# –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
FALLBACK_TEST_TEXT = """
–ö–æ–º–ø–∞–Ω–∏—è "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ë—É–¥—É—â–µ–≥–æ" –ø–æ–¥–≤–µ–ª–∞ –∏—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ 2024 –≥–æ–¥. 
–í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 42% –∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 5.8 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤ 4.1 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –≤ 2023 –≥–æ–¥—É.

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- EBITDA —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ 1.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π (+35%)
- –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $180 –º–∏–ª–ª–∏–æ–Ω–æ–≤ (—Ä–æ—Å—Ç 28%)
- –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: ‚Ç¨150 –º–∏–ª–ª–∏–æ–Ω–æ–≤
- –î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∏–∂–µ–Ω–∞ —Å 2.8x –¥–æ 1.9x EBITDA

–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ 2.5 –º–∏–ª–ª–∏–æ–Ω–∞ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (+18%)
- –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤—ã—Ä–æ—Å–ª–∞ —Å 8 500 –¥–æ 10 200 —á–µ–ª–æ–≤–µ–∫
- –û—Ç–∫—Ä—ã—Ç–æ 47 –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂ –≤ 15 —Ä–µ–≥–∏–æ–Ω–∞—Ö
- –î–æ–ª—è —Ä—ã–Ω–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å —Å 12.3% –¥–æ 15.7%

–ü–ª–∞–Ω—ã –Ω–∞ 2025 –≥–æ–¥:
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 900 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π
- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫ 15 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞
- –¶–µ–ª—å –ø–æ –≤—ã—Ä—É—á–∫–µ: 7.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π
- –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –º–µ–Ω–µ–µ 18.5%

–ö–æ–º–ø–∞–Ω–∏—è —Ç–∞–∫–∂–µ –æ–±—ä—è–≤–∏–ª–∞ –æ –≤—ã–ø–ª–∞—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ 45 —Ä—É–±–ª–µ–π –Ω–∞ –∞–∫—Ü–∏—é, 
—á—Ç–æ –Ω–∞ 25% –±–æ–ª—å—à–µ —á–µ–º –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É (36 —Ä—É–±–ª–µ–π).
"""

@pytest.mark.asyncio
async def test_fallback_pipeline_without_groq():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ –±–µ–∑ Groq API –∫–ª–∏–µ–Ω—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞ (None)
    pipeline = SummarizationPipeline(None)
    
    result = await pipeline.summarize_text_pipeline(
        FALLBACK_TEST_TEXT,
        lang="ru",
        target_chars=800,
        format_type="bullets"
    )
    
    assert result['success'] == True, "Fallback –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω–æ"
    assert result['method'] == 'fallback', "–î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback –º–µ—Ç–æ–¥"
    assert 'summary' in result, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ summary"
    
    summary = result['summary']
    print(f"Fallback summary length: {len(summary)} characters")
    print("Fallback summary:")
    print(summary)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    assert 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:' in summary, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–æ–∫ '–¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞/—Ñ–∞–∫—Ç—ã
    facts_section = summary.split('üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:')[1] if 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:' in summary else ""
    assert len(facts_section.strip()) > 50, "–ë–ª–æ–∫ —Å —Ñ–∞–∫—Ç–∞–º–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

def test_fallback_preserves_key_numbers():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —á–∏—Å–µ–ª –≤ fallback —Ä–µ–∂–∏–º–µ"""
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    pipeline = SummarizationPipeline(None)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ async
    facts_extractor = pipeline
    source_facts = pipeline._create_facts_block({
        'money': [
            {'raw': '5.8 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π'},
            {'raw': '$180 –º–∏–ª–ª–∏–æ–Ω–æ–≤'},
            {'raw': '‚Ç¨150 –º–∏–ª–ª–∏–æ–Ω–æ–≤'}
        ],
        'dates': [
            {'raw': '15 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞'}
        ],
        'sentences_with_numbers': [
            {'numbers': [{'raw': '42%'}]},
            {'numbers': [{'raw': '35%'}]},
            {'numbers': [{'raw': '18.5%'}]},
            {'numbers': [{'raw': '2.5 –º–∏–ª–ª–∏–æ–Ω–∞'}]}
        ]
    })
    
    print("Generated facts block:")
    print(facts_extractor)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ –ø–æ–ø–∞–ª–∏ –≤ –±–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤
    key_numbers = ['5.8 –º–∏–ª–ª–∏–∞—Ä–¥–∞', '$180 –º–∏–ª–ª–∏–æ–Ω–æ–≤', '‚Ç¨150 –º–∏–ª–ª–∏–æ–Ω–æ–≤', '42%', '15 –º–∞—Ä—Ç–∞']
    
    preserved_count = 0
    for number in key_numbers:
        if number.lower() in facts_extractor.lower():
            preserved_count += 1
            print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–∏—Å–ª–æ: {number}")
        else:
            print(f"‚úó –ü–æ—Ç–µ—Ä—è–Ω–æ —á–∏—Å–ª–æ: {number}")
    
    preservation_rate = preserved_count / len(key_numbers)
    assert preservation_rate >= 0.7, f"–í fallback –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 70% —á–∏—Å–µ–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {preservation_rate:.1%}"

@pytest.mark.asyncio
async def test_fallback_vs_original_text_coverage():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ fallback —Ä–µ–∂–∏–º–µ"""
    
    pipeline = SummarizationPipeline(None)
    
    result = await pipeline.summarize_text_pipeline(
        FALLBACK_TEST_TEXT,
        lang="ru", 
        target_chars=600,
        format_type="structured"
    )
    
    assert result['success'] == True
    
    summary = result['summary']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç—ã
    key_topics = [
        '–≤—ã—Ä—É—á–∫–∞', 'ebitda', '–ø—Ä–∏–±—ã–ª—å', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 
        '–ø–µ—Ä—Å–æ–Ω–∞–ª', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '2025', '–¥–∏–≤–∏–¥–µ–Ω–¥'
    ]
    
    covered_topics = 0
    for topic in key_topics:
        if topic.lower() in summary.lower():
            covered_topics += 1
            print(f"‚úì –¢–µ–º–∞ –ø–æ–∫—Ä—ã—Ç–∞: {topic}")
        else:
            print(f"‚úó –¢–µ–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {topic}")
    
    topic_coverage = covered_topics / len(key_topics)
    assert topic_coverage >= 0.6, f"Fallback –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 60% —Ç–µ–º, –ø–æ–∫—Ä—ã—Ç–æ: {topic_coverage:.1%}"

def test_fallback_format_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ fallback —Ä–µ–∂–∏–º–µ"""
    
    formats_to_test = ['bullets', 'paragraph', 'structured']
    
    for format_type in formats_to_test:
        pipeline = SummarizationPipeline(None)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        summary = pipeline._create_fallback_summary(
            FALLBACK_TEST_TEXT, 
            'ru', 
            format_type, 
            500
        )
        
        assert len(summary) > 100, f"Fallback summary –¥–ª—è {format_type} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º"
        assert 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:' in summary, f"–ë–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ {format_type}"
        
        if format_type == 'bullets':
            assert '‚Ä¢' in summary or '‚Äî' in summary or '-' in summary, f"Bullets —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã"
        
        print(f"‚úì Format {format_type} works in fallback mode")

@pytest.mark.asyncio
async def test_fallback_quality_report():
    """–¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤ fallback —Ä–µ–∂–∏–º–µ"""
    
    pipeline = SummarizationPipeline(None)
    
    result = await pipeline.summarize_text_pipeline(
        FALLBACK_TEST_TEXT,
        lang="ru",
        target_chars=700,
        format_type="bullets"
    )
    
    assert 'quality_report' in result, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ"
    
    quality = result['quality_report']
    
    # –í fallback —Ä–µ–∂–∏–º–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    assert isinstance(quality['quality_score'], float), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–π —Å–∫–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞"
    assert 0 <= quality['quality_score'] <= 1, "–°–∫–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1"
    assert quality['language_correct'] == True, "–Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    
    print(f"Fallback quality score: {quality['quality_score']:.2f}")
    print(f"Numbers preserved: {quality['numbers_preserved']}")
    print(f"Missing numbers: {quality['missing_numbers']}")

def test_fallback_must_keep_sentences():
    """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏"""
    
    from summarization.fact_extractor import extract_key_facts, select_must_keep_sentences
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    facts = extract_key_facts(FALLBACK_TEST_TEXT, 'ru')
    must_keep_indices = select_must_keep_sentences(facts)
    
    assert len(must_keep_indices) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    
    print(f"Must keep sentence indices: {sorted(must_keep_indices)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ
    sentences = FALLBACK_TEST_TEXT.split('.')
    important_patterns = ['%', '–º–ª—Ä–¥', '–º–ª–Ω', '$', '‚Ç¨', '‚ÇΩ', '2024', '2025']
    
    for idx in must_keep_indices:
        if idx < len(sentences):
            sentence = sentences[idx]
            has_important_data = any(pattern in sentence for pattern in important_patterns)
            print(f"Sentence {idx}: {sentence[:50]}... - Important: {has_important_data}")
            
    # –•–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    important_count = sum(
        1 for idx in must_keep_indices 
        if idx < len(sentences) and any(pattern in sentences[idx] for pattern in important_patterns)
    )
    
    important_rate = important_count / len(must_keep_indices)
    assert important_rate >= 0.5, f"–ú–∏–Ω–∏–º—É–º 50% must-keep –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–π–¥–µ–Ω–æ: {important_rate:.1%}"

def test_fallback_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ fallback —Ä–µ–∂–∏–º–∞"""
    
    import time
    
    start_time = time.time()
    
    pipeline = SummarizationPipeline(None)
    summary = pipeline._create_fallback_summary(FALLBACK_TEST_TEXT, 'ru', 'bullets', 600)
    
    end_time = time.time()
    execution_time = end_time - start_time
    
    print(f"Fallback execution time: {execution_time:.3f} seconds")
    
    # Fallback –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ~1KB)
    assert execution_time < 2.0, f"Fallback —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {execution_time:.3f}s"
    assert len(summary) > 200, "Fallback –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    assert 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:' in summary, "–ë–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–∞–∂–µ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç–µ"

if __name__ == "__main__":
    pytest.main([__file__, "-v"])