"""
–¢–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Å–µ–ª, –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –≤–∞–ª—é—Ç –∏ –¥–∞—Ç –≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
"""

import pytest
import asyncio
from summarization.pipeline import SummarizationPipeline
from quality.quality_checks import validate_numbers_preserved, extract_critical_numbers

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
TEST_TEXT_RU = """
–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 38% –¥–æ 3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –≤ 2024 –≥–æ–¥—É. 
–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫ 15 —Å–µ–Ω—Ç—è–±—Ä—è –Ω–∞ 2,5 –º–∏–ª–ª–∏–æ–Ω–∞ –µ–¥–∏–Ω–∏—Ü.
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤—è—Ç $150 –º–ª–Ω, –∞ —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Ç¨50 –º–ª–Ω –æ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.
–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +15 –±.–ø. –¥–æ 7,25%.
–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–∏—Ç—Å—è —Å 1 200 –¥–æ 1 850 —á–µ–ª–æ–≤–µ–∫.
–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: —Å —è–Ω–≤–∞—Ä—è –ø–æ –¥–µ–∫–∞–±—Ä—å 2025 –≥–æ–¥–∞.
"""

TEST_TEXT_EN = """
The company reported 25% revenue growth to $2.5 billion in Q3 2024.
New facility will produce 1.5 million units by December 15th.
Investment includes ‚Ç¨75 million for equipment and ¬£25 million for training.
Interest rate increased by +0.5% to 5.75%.
Headcount will grow from 800 to 1,200 employees by March 2025.
"""

class MockGroqClient:
    """–ú–æ–∫ –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API"""
    
    def __init__(self, return_json=True):
        self.return_json = return_json
    
    @property
    def chat(self):
        return MockChat(self.return_json)

class MockChat:
    def __init__(self, return_json):
        self.return_json = return_json
    
    @property 
    def completions(self):
        return MockCompletions(self.return_json)

class MockCompletions:
    def __init__(self, return_json):
        self.return_json = return_json
    
    def create(self, **kwargs):
        """–ú–æ–∫ –æ—Ç–≤–µ—Ç –æ—Ç LLM"""
        
        if kwargs.get('response_format', {}).get('type') == 'json_object' or self.return_json:
            # Phase A - JSON response
            json_response = {
                "bullets": [
                    "–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 38% –¥–æ 3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –≤ 2024 –≥–æ–¥—É",
                    "–ü–ª–∞–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫ 15 —Å–µ–Ω—Ç—è–±—Ä—è –Ω–∞ 2,5 –º–∏–ª–ª–∏–æ–Ω–∞ –µ–¥–∏–Ω–∏—Ü",
                    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ $150 –º–ª–Ω + ‚Ç¨50 –º–ª–Ω –æ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                    "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ +15 –±.–ø. –¥–æ 7,25%"
                ],
                "key_facts": [
                    {"value_raw": "38%", "value_norm": 0.38, "unit": "%"},
                    {"value_raw": "3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π", "value_norm": 3000000000, "unit": "RUB"},
                    {"value_raw": "$150 –º–ª–Ω", "value_norm": 150000000, "unit": "USD"},
                    {"value_raw": "‚Ç¨50 –º–ª–Ω", "value_norm": 50000000, "unit": "EUR"},
                    {"value_raw": "15 –±.–ø.", "value_norm": 0.0015, "unit": "bp"},
                    {"value_raw": "7,25%", "value_norm": 0.0725, "unit": "%"},
                    {"value_raw": "15 —Å–µ–Ω—Ç—è–±—Ä—è", "norm": "2024-09-15"}
                ],
                "entities": {
                    "ORG": ["–ö–æ–º–ø–∞–Ω–∏—è"],
                    "PERSON": [],
                    "GPE": []
                },
                "uncertainties": []
            }
            
            return MockResponse(json.dumps(json_response, ensure_ascii=False))
        else:
            # Phase B - text response
            final_summary = """
–ö–æ–º–ø–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç, —É–≤–µ–ª–∏—á–∏–≤ –≤—ã—Ä—É—á–∫—É –Ω–∞ 38% –¥–æ 3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –≤ 2024 –≥–æ–¥—É. 

–ö–ª—é—á–µ–≤—ã–µ –ø–ª–∞–Ω—ã:
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫ 15 —Å–µ–Ω—Ç—è–±—Ä—è –Ω–∞ 2,5 –º–∏–ª–ª–∏–æ–Ω–∞ –µ–¥–∏–Ω–∏—Ü
‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π $150 –º–ª–Ω –∏ ‚Ç¨50 –º–ª–Ω –æ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤  
‚Ä¢ –†–æ—Å—Ç —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Å 1 200 –¥–æ 1 850 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:
‚Äî 38% —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏
‚Äî 3 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –≤—ã—Ä—É—á–∫–∞ 2024
‚Äî $150 –º–ª–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
‚Äî ‚Ç¨50 –º–ª–Ω –æ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
‚Äî +15 –±.–ø. —Ä–æ—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –¥–æ 7,25%
‚Äî 15 —Å–µ–Ω—Ç—è–±—Ä—è —Å—Ä–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
‚Äî 2,5 –º–∏–ª–ª–∏–æ–Ω–∞ –µ–¥–∏–Ω–∏—Ü –ø–ª–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            """
            return MockResponse(final_summary.strip())

class MockResponse:
    def __init__(self, content):
        self.choices = [MockChoice(content)]

class MockChoice:
    def __init__(self, content):
        self.message = MockMessage(content)

class MockMessage:
    def __init__(self, content):
        self.content = content

@pytest.mark.asyncio
async def test_numbers_preserved_pipeline():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω —Å –º–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–º
    mock_client = MockGroqClient()
    pipeline = SummarizationPipeline(mock_client)
    
    result = await pipeline.summarize_text_pipeline(
        TEST_TEXT_RU, 
        lang="ru", 
        target_chars=500,
        format_type="bullets"
    )
    
    assert result['success'] == True
    assert 'summary' in result
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
    source_numbers = extract_critical_numbers(TEST_TEXT_RU)
    summary_numbers = extract_critical_numbers(result['summary'])
    
    # –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    critical_values = ['38%', '3 –º–ª—Ä–¥', '$150', '‚Ç¨50', '7,25%', '15 –±.–ø.', '15 —Å–µ–Ω—Ç—è–±—Ä—è']
    
    for value in critical_values:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        assert any(value.lower() in num.lower() for num in source_numbers), f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
    is_preserved, missing = validate_numbers_preserved(TEST_TEXT_RU, result['summary'])
    
    # –í –∏–¥–µ–∞–ª–µ –≤—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–∏—Å–µ–ª: {is_preserved}")
    print(f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {missing}")
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 80% —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏
    preservation_rate = 1 - (len(missing) / len(source_numbers)) if source_numbers else 1
    assert preservation_rate >= 0.8, f"–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {preservation_rate:.2%}"

def test_critical_numbers_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —á–∏—Å–µ–ª"""
    
    numbers = extract_critical_numbers(TEST_TEXT_RU)
    
    expected_patterns = [
        '38%',      # –ø—Ä–æ—Ü–µ–Ω—Ç
        '3 –º–ª—Ä–¥',   # –∫—Ä—É–ø–Ω–∞—è —Å—É–º–º–∞  
        '$150',     # –≤–∞–ª—é—Ç–∞ USD
        '‚Ç¨50',      # –≤–∞–ª—é—Ç–∞ EUR
        '7,25%',    # –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        '15 –±.–ø.',  # –±–∞–∑–∏—Å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        '15 —Å–µ–Ω—Ç—è–±—Ä—è' # –¥–∞—Ç–∞
    ]
    
    found_count = 0
    for pattern in expected_patterns:
        if any(pattern.lower() in num.lower() for num in numbers):
            found_count += 1
            print(f"‚úì –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        else:
            print(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 80% –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    assert found_count >= len(expected_patterns) * 0.8

def test_english_numbers_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    
    numbers = extract_critical_numbers(TEST_TEXT_EN)
    
    expected_patterns = [
        '25%',      # percent growth
        '$2.5',     # USD billions
        '‚Ç¨75',      # EUR millions
        '¬£25',      # GBP millions  
        '5.75%',    # interest rate
        'December 15' # date
    ]
    
    found_count = 0
    for pattern in expected_patterns:
        if any(pattern.lower() in num.lower() for num in numbers):
            found_count += 1
        else:
            print(f"Missing pattern: {pattern}")
    
    assert found_count >= len(expected_patterns) * 0.7

@pytest.mark.asyncio 
async def test_fallback_without_groq():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –±–µ–∑ Groq API"""
    
    pipeline = SummarizationPipeline(None)  # –ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
    
    result = await pipeline.summarize_text_pipeline(
        TEST_TEXT_RU,
        lang="ru", 
        target_chars=400,
        format_type="bullets"
    )
    
    assert result['success'] == True
    assert result['method'] == 'fallback'
    assert 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã' in result['summary']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    is_preserved, missing = validate_numbers_preserved(TEST_TEXT_RU, result['summary'])
    
    # –í fallback —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 60%
    preservation_rate = 1 - (len(missing) / len(extract_critical_numbers(TEST_TEXT_RU)))
    assert preservation_rate >= 0.6

def test_number_validation_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–µ–ª"""
    
    # –¢–µ—Å—Ç —Å –±–ª–∏–∑–∫–∏–º–∏, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    source = "–†–æ—Å—Ç —Å–æ—Å—Ç–∞–≤–∏–ª 25,5% –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö $100 –º–ª–Ω"
    summary_good = "–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–æ—Å—Ç 25,5% —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ $100 –º–ª–Ω"
    summary_bad = "–†–æ—Å—Ç –æ–∫–æ–ª–æ 25% —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ $90 –º–ª–Ω"
    
    is_preserved_good, missing_good = validate_numbers_preserved(source, summary_good)
    is_preserved_bad, missing_bad = validate_numbers_preserved(source, summary_bad)
    
    assert is_preserved_good == True, "–¢–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏"
    assert is_preserved_bad == False, "–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º–∏"
    assert len(missing_bad) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—è–≤–ª–µ–Ω—ã –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —á–∏—Å–ª–∞"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    import sys
    sys.exit(pytest.main([__file__, "-v"]))