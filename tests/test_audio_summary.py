#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from summarizers.text_summarizer import smart_summarize, extract_sentences, categorize_sentences
    from summarizers.audio_pipeline import get_pipeline_info
    from bot.ui_settings import UserSettings, SummaryFormat, SummaryVerbosity
    TESTING_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
    TESTING_AVAILABLE = False
    sys.exit(1)


def create_test_transcript() -> dict:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –±–ª–∏–∑–∫–∏–π –∫ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¢–ó"""
    
    test_text = """
    –î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –≤—Ç–æ—Ä–Ω–∏–∫ –Ω–∞ –ø–æ–ª–¥–Ω—è. 
    –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º —Ñ–æ—Ä–º–∞—Ç.
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –≤—ã —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
    –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É –∏–ª–∏ –≤—Ç–æ—Ä–Ω–∏–∫—É.
    –ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
    –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.
    –ï—Å–ª–∏ –≤–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 18:00 –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏.
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞ 24 —á–∞—Å–∞.
    –í —Å–ª—É—á–∞–µ –±–æ–ª–µ–∑–Ω–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞.
    –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
    """
    
    return {
        "text": test_text.strip(),
        "segments": [
            {"start": 0.0, "end": 5.0, "text": "–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –≤—Ç–æ—Ä–Ω–∏–∫ –Ω–∞ –ø–æ–ª–¥–Ω—è."},
            {"start": 5.0, "end": 10.0, "text": "–ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º —Ñ–æ—Ä–º–∞—Ç."},
            {"start": 10.0, "end": 15.0, "text": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –≤—ã —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."}
        ],
        "language": "ru",
        "duration": 45.0
    }


def test_sentence_extraction():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    transcript = create_test_transcript()
    sentences = extract_sentences(transcript["text"])
    
    assert len(sentences) >= 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(sentences)}"
    assert any("–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å" in s.lower() for s in sentences), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å'"
    assert any("–±–µ—Å–ø–ª–∞—Ç–Ω–æ" in s.lower() for s in sentences), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'"
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")


def test_sentence_categorization():
    """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    transcript = create_test_transcript()
    sentences = extract_sentences(transcript["text"])
    categories = categorize_sentences(sentences)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π
    assert len(categories['agreements']) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
    agreement_found = any("–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å" in sent.lower() for _, sent in categories['agreements'])
    assert agreement_found, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å' –Ω–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–æ–∫–æ–≤
    assert len(categories['deadlines']) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–æ–∫–∏"
    deadline_found = any(any(day in sent.lower() for day in ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫']) for _, sent in categories['deadlines'])
    assert deadline_found, "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ä–æ–∫–∞—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    assert len(categories['actions']) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"
    action_found = any("–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å" in sent.lower() or "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in sent.lower() for _, sent in categories['actions'])
    assert action_found, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
    
    print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏={len(categories['agreements'])}, —Å—Ä–æ–∫–∏={len(categories['deadlines'])}, –¥–µ–π—Å—Ç–≤–∏—è={len(categories['actions'])}")


def test_structured_format():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
    
    transcript = create_test_transcript()
    summary = smart_summarize(transcript, format="structured", verbosity="detailed")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π
    assert "–¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" in summary.lower(), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π"
    assert "—Å—Ä–æ–∫–∏" in summary.lower() or "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in summary.lower(), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è —Å—Ä–æ–∫–æ–≤"
    assert "—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏" in summary.lower(), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã
    assert "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in summary.lower() or "–≤—Ç–æ—Ä–Ω–∏–∫" in summary.lower(), "–ù–µ —É–ø–æ–º—è–Ω—É—Ç—ã –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏"
    assert "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" in summary.lower(), "–ù–µ —É–ø–æ–º—è–Ω—É—Ç–æ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'"
    assert "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in summary.lower(), "–ù–µ —É–ø–æ–º—è–Ω—É—Ç–æ '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤ —Ä–µ–∂–∏–º–µ detailed
    assert len(summary) >= 300, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤ —Ä–µ–∂–∏–º–µ detailed: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤"
    
    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã")


def test_different_verbosity():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
    
    transcript = create_test_transcript()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
    short_summary = smart_summarize(transcript, format="structured", verbosity="short")
    normal_summary = smart_summarize(transcript, format="structured", verbosity="normal")
    detailed_summary = smart_summarize(transcript, format="structured", verbosity="detailed")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ detailed –¥–ª–∏–Ω–Ω–µ–µ normal, –∞ normal –¥–ª–∏–Ω–Ω–µ–µ short
    assert len(detailed_summary) > len(normal_summary), "Detailed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ normal"
    assert len(normal_summary) > len(short_summary), "Normal –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ short"
    
    # –í—Å–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    for summary, mode in [(short_summary, "short"), (normal_summary, "normal"), (detailed_summary, "detailed")]:
        assert "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in summary.lower() or "–≤—Ç–æ—Ä–Ω–∏–∫" in summary.lower(), f"–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ {mode}"
        assert "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" in summary.lower(), f"'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {mode}"
    
    print(f"‚úÖ –î–ª–∏–Ω—ã —Å–∞–º–º–∞—Ä–∏ - short: {len(short_summary)}, normal: {len(normal_summary)}, detailed: {len(detailed_summary)}")


def test_different_formats():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã–≤–æ–¥–∞"""
    print("\nüß™ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã–≤–æ–¥–∞")
    
    transcript = create_test_transcript()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    structured = smart_summarize(transcript, format="structured", verbosity="normal")
    bullets = smart_summarize(transcript, format="bullets", verbosity="normal")
    paragraph = smart_summarize(transcript, format="paragraph", verbosity="normal")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤
    assert "**" in structured, "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏"
    assert "‚Ä¢" in bullets, "Bullet —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã"
    
    # –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for summary, fmt in [(structured, "structured"), (bullets, "bullets"), (paragraph, "paragraph")]:
        assert len(summary) > 100, f"–°–∞–º–º–∞—Ä–∏ {fmt} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: {len(summary)}"
        key_terms_found = sum(1 for term in ["–¥–æ–≥–æ–≤–æ—Ä", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"] if term in summary.lower())
        assert key_terms_found >= 2, f"–í —Ñ–æ—Ä–º–∞—Ç–µ {fmt} –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {key_terms_found} –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"
    
    print(f"‚úÖ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


def test_user_settings():
    """–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\nüß™ –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = UserSettings(12345)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert settings.get_format_str() == "structured", "–§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å structured"
    assert settings.get_verbosity_str() == "normal", "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å normal"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    assert settings.set_format("bullets"), "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç bullets"
    assert settings.get_format_str() == "bullets", "–§–æ—Ä–º–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ bullets"
    
    assert settings.set_verbosity("detailed"), "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å detailed"
    assert settings.get_verbosity_str() == "detailed", "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ detailed"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert not settings.set_format("invalid"), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"
    assert not settings.set_verbosity("invalid"), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
    
    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_key_facts_preservation():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
    
    transcript = create_test_transcript()
    summary = smart_summarize(transcript, format="structured", verbosity="normal")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    key_facts = [
        "–¥–æ–≥–æ–≤–æ—Ä",      # –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        "–ø–æ–ª–¥–Ω—è",       # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
        "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",    # —É—Å–ª–æ–≤–∏—è
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",   # –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        "3000",         # —Å—Ç–æ–∏–º–æ—Å—Ç—å
        "24 —á–∞—Å–∞"       # –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–º–µ–Ω—ã
    ]
    
    preserved_facts = []
    for fact in key_facts:
        if fact.lower() in summary.lower():
            preserved_facts.append(fact)
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–∑ 6 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤
    assert len(preserved_facts) >= 4, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(preserved_facts)} –∏–∑ {len(key_facts)} –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤: {preserved_facts}"
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã: {', '.join(preserved_facts)}")


def test_pipeline_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–π–ø–ª–∞–π–Ω–µ")
    
    info = get_pipeline_info()
    assert isinstance(info, str), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–π–ø–ª–∞–π–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    assert len(info) > 10, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–π–ø–ª–∞–π–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è"
    
    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–π–ø–ª–∞–π–Ω–µ: {info}")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n")
    
    if not TESTING_AVAILABLE:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False
    
    tests = [
        test_sentence_extraction,
        test_sentence_categorization,
        test_structured_format,
        test_different_verbosity,
        test_different_formats,
        test_user_settings,
        test_key_facts_preservation,
        test_pipeline_info
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∞—É–¥–∏–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {passed} –ø—Ä–æ—à–ª–∏, {failed} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    if failed == 0:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("üéØ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è, —Ñ–æ—Ä–º–∞—Ç—ã, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return True
    else:
        print(f"\n‚ùå {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)