"""
–¢–µ—Å—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ YouTube —Å —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏
"""

import pytest
from unittest.mock import Mock, patch
import json
from youtube_processor import YouTubeProcessor

# –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
MOCK_VIDEO_INFO = {
    'title': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ 2024',
    'duration': 1800,  # 30 –º–∏–Ω—É—Ç
    'uploader': 'Business Channel',
    'view_count': 150000,
    'description': '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ 2024 –≥–æ–¥. –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª 25%, –ø—Ä–∏–±—ã–ª—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ $2.5 –º–ª—Ä–¥.',
    'subtitles': {
        'ru': [{'url': 'https://example.com/subtitles.vtt'}]
    }
}

MOCK_TRANSCRIPT_VTT = """
WEBVTT

00:00:15.000 --> 00:00:18.500
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

00:00:30.000 --> 00:00:35.000
–í—ã—Ä—É—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 25% –∏ –¥–æ—Å—Ç–∏–≥–ª–∞ 3.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π

00:01:45.000 --> 00:01:52.000
–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ $150 –º–∏–ª–ª–∏–æ–Ω–æ–≤, —á—Ç–æ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø—Ä–æ–≥–Ω–æ–∑—ã

00:03:20.000 --> 00:03:28.000
EBITDA –º–∞—Ä–∂–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 18.5% –ø—Ä–æ—Ç–∏–≤ 15.2% –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É

00:05:10.000 --> 00:05:18.000
–ö –∫–æ–Ω—Ü—É 2025 –≥–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ—Å—Ç–∏—á—å –æ—Ç–º–µ—Ç–∫–∏ –≤ $500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤—ã—Ä—É—á–∫–∏

00:12:30.000 --> 00:12:40.000
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D —Å–æ—Å—Ç–∞–≤—è—Ç ‚Ç¨75 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ
"""

MOCK_TRANSCRIPT_WITH_TIMESTAMPS = [
    {'start': 15, 'end': 18.5, 'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'},
    {'start': 30, 'end': 35, 'text': '–í—ã—Ä—É—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 25% –∏ –¥–æ—Å—Ç–∏–≥–ª–∞ 3.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π'},
    {'start': 105, 'end': 112, 'text': '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ $150 –º–∏–ª–ª–∏–æ–Ω–æ–≤, —á—Ç–æ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø—Ä–æ–≥–Ω–æ–∑—ã'},
    {'start': 200, 'end': 208, 'text': 'EBITDA –º–∞—Ä–∂–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 18.5% –ø—Ä–æ—Ç–∏–≤ 15.2% –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É'},
    {'start': 310, 'end': 318, 'text': '–ö –∫–æ–Ω—Ü—É 2025 –≥–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ—Å—Ç–∏—á—å –æ—Ç–º–µ—Ç–∫–∏ –≤ $500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤—ã—Ä—É—á–∫–∏'},
    {'start': 750, 'end': 760, 'text': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D —Å–æ—Å—Ç–∞–≤—è—Ç ‚Ç¨75 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ'},
]

class MockGroqClient:
    """–ú–æ–∫ –∫–ª–∏–µ–Ω—Ç Groq –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @property
    def chat(self):
        return MockChat()

class MockChat:
    @property
    def completions(self):
        return MockCompletions()

class MockCompletions:
    def create(self, **kwargs):
        """–ú–æ–∫ –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ —Ñ–∞–∫—Ç–∞—Ö"""
        
        summary_with_timestamps = """
–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 2024 –≥–æ–¥ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.

–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
‚Ä¢ –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 25% –¥–æ 3.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π
‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $150 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è
‚Ä¢ EBITDA –º–∞—Ä–∂–∞ —É–ª—É—á—à–∏–ª–∞—Å—å –¥–æ 18.5%

–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤—ã—Ä—É—á–∫–∏ –∫ –∫–æ–Ω—Ü—É 2025 –≥–æ–¥–∞
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D ‚Ç¨75 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ

üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:
‚Äî 25% —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ [00:30]
‚Äî 3.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞ —Ä—É–±–ª–µ–π –≤—ã—Ä—É—á–∫–∞ [00:30]
‚Äî $150 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å [01:45]
‚Äî 18.5% EBITDA –º–∞—Ä–∂–∞ [03:20]
‚Äî $500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ü–µ–ª–µ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ 2025 [05:10]
‚Äî ‚Ç¨75 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D [12:30]
        """
        
        return MockResponse(summary_with_timestamps.strip())

class MockResponse:
    def __init__(self, content):
        self.choices = [MockChoice(content)]

class MockChoice:
    def __init__(self, content):
        self.message = MockMessage(content)

class MockMessage:
    def __init__(self, content):
        self.content = content

def test_youtube_url_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YouTube URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    
    processor = YouTubeProcessor()
    
    test_messages = [
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ: https://www.youtube.com/watch?v=abc123",
        "–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: https://youtu.be/xyz789",
        "–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: https://www.youtube.com/embed/def456",
        "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫: https://youtu.be/test1 –∏ https://www.youtube.com/watch?v=test2"
    ]
    
    for message in test_messages:
        urls = processor.extract_youtube_urls(message)
        assert len(urls) > 0, f"–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã URL –≤: {message}"
        
        for url_info in urls:
            assert 'url' in url_info
            assert 'video_id' in url_info
            assert url_info['url'].startswith('https://www.youtube.com/watch?v=')

def test_duration_limit_updated():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 1)"""
    
    processor = YouTubeProcessor()
    
    # –ú–æ–∫ yt-dlp –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    with patch('yt_dlp.YoutubeDL') as mock_ydl:
        mock_instance = Mock()
        mock_ydl.return_value.__enter__.return_value = mock_instance
        
        # –¢–µ—Å—Ç –≤–∏–¥–µ–æ 1.5 —á–∞—Å–∞ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
        mock_instance.extract_info.return_value = {
            'title': '–¢–µ—Å—Ç –≤–∏–¥–µ–æ 1.5 —á–∞—Å–∞',
            'duration': 5400,  # 1.5 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            'is_live': False
        }
        
        result = processor.validate_youtube_url("https://www.youtube.com/watch?v=test1")
        assert result['valid'] == True, "–í–∏–¥–µ–æ 1.5 —á–∞—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç –≤–∏–¥–µ–æ 2.5 —á–∞—Å–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)
        mock_instance.extract_info.return_value = {
            'title': '–¢–µ—Å—Ç –≤–∏–¥–µ–æ 2.5 —á–∞—Å–∞',
            'duration': 9000,  # 2.5 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            'is_live': False
        }
        
        result = processor.validate_youtube_url("https://www.youtube.com/watch?v=test2")
        assert result['valid'] == False, "–í–∏–¥–µ–æ 2.5 —á–∞—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        assert "–±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤" in result['error'], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –ª–∏–º–∏—Ç 2 —á–∞—Å–∞"

@patch('requests.get')
def test_transcript_extraction_with_timestamps(mock_get):
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤"""
    
    # –ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ —Å VTT —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
    mock_response = Mock()
    mock_response.text = MOCK_TRANSCRIPT_VTT
    mock_response.raise_for_status.return_value = None
    mock_get.return_value = mock_response
    
    processor = YouTubeProcessor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ VTT
    transcript_text = processor._extract_subtitle_text("https://example.com/subtitles.vtt")
    
    assert transcript_text != "", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω"
    assert "25%" in transcript_text, "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
    assert "3.2 –º–∏–ª–ª–∏–∞—Ä–¥–∞" in transcript_text, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
    assert "$150 –º–∏–ª–ª–∏–æ–Ω–æ–≤" in transcript_text, "–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"

def test_timestamp_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ mm:ss"""
    
    test_cases = [
        (15, "00:15"),      # 15 —Å–µ–∫—É–Ω–¥
        (75, "01:15"),      # 1 –º–∏–Ω—É—Ç–∞ 15 —Å–µ–∫—É–Ω–¥
        (3661, "61:01"),    # –ë–æ–ª–µ–µ —á–∞—Å–∞
        (0, "00:00"),       # –ù–∞—á–∞–ª–æ
    ]
    
    for seconds, expected in test_cases:
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        minutes = seconds // 60
        secs = seconds % 60
        formatted = f"{minutes:02d}:{secs:02d}"
        
        assert formatted == expected, f"–í—Ä–µ–º—è {seconds}s –¥–æ–ª–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ {expected}"

@patch('yt_dlp.YoutubeDL')
@patch('requests.get')
def test_full_youtube_processing_with_timestamps(mock_get, mock_ydl):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube —Å —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è yt-dlp
    mock_instance = Mock()
    mock_ydl.return_value.__enter__.return_value = mock_instance
    mock_instance.extract_info.return_value = MOCK_VIDEO_INFO
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    mock_response = Mock()
    mock_response.text = MOCK_TRANSCRIPT_VTT
    mock_response.raise_for_status.return_value = None
    mock_get.return_value = mock_response
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –º–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–º
    groq_client = MockGroqClient()
    processor = YouTubeProcessor(groq_client)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—É–±—Ç–∏—Ç—Ä—ã
    result = processor.extract_video_info_and_subtitles("https://www.youtube.com/watch?v=test")
    
    assert result['success'] == True
    assert result['has_subtitles'] == True
    assert "25%" in result['text']  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∏—Å–ª–∞ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏
    summary_result = processor.summarize_youtube_content(
        result['text'], 
        result['title'], 
        result['duration']
    )
    
    assert summary_result['success'] == True
    
    summary = summary_result['summary']
    assert 'üî¢ –¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã:' in summary, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–æ–∫ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [mm:ss]
    timestamp_patterns = ['[00:30]', '[01:45]', '[03:20]', '[05:10]', '[12:30]']
    
    found_timestamps = 0
    for pattern in timestamp_patterns:
        if pattern in summary:
            found_timestamps += 1
            print(f"‚úì –ù–∞–π–¥–µ–Ω —Ç–∞–π–º—à—Ç–∞–º–ø: {pattern}")
        else:
            print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–π–º—à—Ç–∞–º–ø: {pattern}")
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 80% —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤
    timestamp_rate = found_timestamps / len(timestamp_patterns)
    assert timestamp_rate >= 0.8, f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤: {timestamp_rate:.1%}"

def test_segment_processing():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è 30-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    total_duration = 1800  # 30 –º–∏–Ω—É—Ç
    segment_duration = 300  # 5 –º–∏–Ω—É—Ç
    
    segments = []
    for start_time in range(0, total_duration, segment_duration):
        end_time = min(start_time + segment_duration, total_duration)
        segments.append({
            'start': start_time,
            'end': end_time,
            'duration': end_time - start_time
        })
    
    assert len(segments) == 6, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è 30-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ"
    assert segments[0]['start'] == 0
    assert segments[-1]['end'] == total_duration
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
    total_covered = sum(seg['duration'] for seg in segments)
    assert total_covered == total_duration

def test_fallback_without_subtitles():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ)"""
    
    video_info_no_subs = MOCK_VIDEO_INFO.copy()
    video_info_no_subs['subtitles'] = {}
    video_info_no_subs['automatic_captions'] = {}
    
    with patch('yt_dlp.YoutubeDL') as mock_ydl:
        mock_instance = Mock()
        mock_ydl.return_value.__enter__.return_value = mock_instance
        mock_instance.extract_info.return_value = video_info_no_subs
        
        processor = YouTubeProcessor()
        result = processor.extract_video_info_and_subtitles("https://www.youtube.com/watch?v=test")
        
        assert result['success'] == True
        assert result['has_subtitles'] == False
        assert result['has_description'] == True
        assert "–û–ü–ò–°–ê–ù–ò–ï –í–ò–î–ï–û:" in result['text']
        assert "25%" in result['text']  # –ò–∑ –æ–ø–∏—Å–∞–Ω–∏—è

if __name__ == "__main__":
    pytest.main([__file__, "-v"])