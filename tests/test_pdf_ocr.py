#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è PDF OCR —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
"""

import os
import sys
import shutil
from pathlib import Path

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Tesseract (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç)
if shutil.which("tesseract") is None:
    print("‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º OCR —Ç–µ—Å—Ç—ã")
    sys.exit(0)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from content_extraction.pdf_ocr import extract_text_from_pdf, check_ocr_availability, get_ocr_info
    import fitz  # PyMuPDF
    from PIL import Image, ImageDraw, ImageFont
except ImportError as e:
    print(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    sys.exit(1)


def create_test_pdf_with_text_and_image(output_path: str):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    doc = fitz.open()
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    page1 = doc.new_page()
    text = """–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º.
–ó–¥–µ—Å—å –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ English text.

‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
‚Ä¢ –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞  
‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π PDF."""
    
    page1.insert_text((50, 50), text, fontsize=12, color=(0, 0, 0))
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ OCR)
    page2 = doc.new_page()
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new('RGB', (400, 300), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.load_default()
    except:
        font = None
    
    text_lines = [
        "OCR Test Page",
        "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è OCR",
        "This text should be recognized",
        "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å—Å—è",
        "Numbers: 12345"
    ]
    
    y_pos = 50
    for line in text_lines:
        draw.text((50, y_pos), line, fill='black', font=font)
        y_pos += 40
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
    temp_img_path = output_path.replace('.pdf', '_temp.png')
    img.save(temp_img_path)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF
    page2.insert_image(fitz.Rect(50, 50, 450, 350), filename=temp_img_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    doc.save(output_path)
    doc.close()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if os.path.exists(temp_img_path):
        os.remove(temp_img_path)


def test_availability():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OCR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    availability = check_ocr_availability()
    print(f"PyMuPDF: {'‚úÖ' if availability['pymupdf'] else '‚ùå'}")
    print(f"Tesseract: {'‚úÖ' if availability['tesseract'] else '‚ùå'}")
    print(f"Pillow: {'‚úÖ' if availability['pillow'] else '‚ùå'}")
    
    info = get_ocr_info()
    print(f"–°—Ç–∞—Ç—É—Å: {info}")
    
    assert availability['pymupdf'], "PyMuPDF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
    print("‚úÖ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–ª")


def test_pdf_text_and_ocr():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ OCR –∏–∑ PDF"""
    print("\nüß™ –¢–µ—Å—Ç PDF —Å —Ç–µ–∫—Å—Ç–æ–º –∏ OCR")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    test_pdf_path = "test_mixed_content.pdf"
    try:
        create_test_pdf_with_text_and_image(test_pdf_path)
        assert os.path.exists(test_pdf_path), "–¢–µ—Å—Ç–æ–≤—ã–π PDF –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        result = extract_text_from_pdf(test_pdf_path, min_text_chars_per_page=30)
        
        assert result['success'], f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error')}"
        assert len(result['text']) >= 100, f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        assert "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" in result['text'], "–¢–µ–∫—Å—Ç —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        method = result['method']
        print(f"–ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {method}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta = result['meta']
        assert meta['pages'] == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ–ª—É—á–µ–Ω–æ {meta['pages']}"
        
        if meta.get('ocr_pages'):
            print(f"OCR —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {meta['ocr_pages']}")
            assert 2 in meta['ocr_pages'], "–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ OCR"
            assert "ocr" in method, f"–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'ocr', –ø–æ–ª—É—á–µ–Ω: {method}"
        else:
            print("‚ö†Ô∏è OCR –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {meta.get('text_extraction_stats', 'N/A')}")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_pdf_path):
            os.remove(test_pdf_path)


def test_pure_text_pdf():
    """–¢–µ—Å—Ç PDF —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º"""
    print("\nüß™ –¢–µ—Å—Ç PDF —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF
    test_pdf_path = "test_text_only.pdf"
    try:
        doc = fitz.open()
        page = doc.new_page()
        
        text = """–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º.

–ó–¥–µ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ PyMuPDF.
–ù–∏–∫–∞–∫–æ–π OCR –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!
English text: Hello, world!
–¶–∏—Ñ—Ä—ã: 123456789"""
        
        page.insert_text((50, 50), text, fontsize=12)
        doc.save(test_pdf_path)
        doc.close()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        result = extract_text_from_pdf(test_pdf_path)
        
        assert result['success'], f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error')}"
        assert len(result['text']) >= 100, f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤"
        assert "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" in result['text'], "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ OCR –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        method = result['method']
        meta = result['meta']
        
        assert "ocr" not in method or not meta.get('ocr_pages'), "OCR –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
        assert meta['pages'] == 1, f"–û–∂–∏–¥–∞–ª–∞—Å—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–ª—É—á–µ–Ω–æ {meta['pages']}"
        
        print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π PDF: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤, –º–µ—Ç–æ–¥: {method}")
        
    finally:
        if os.path.exists(test_pdf_path):
            os.remove(test_pdf_path)


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    result = extract_text_from_pdf("nonexistent_file.pdf")
    assert not result['success'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"
    assert "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF" in result['error'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {result['error']}"
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF OCR —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞\n")
    
    tests = [
        test_availability,
        test_pure_text_pdf, 
        test_pdf_text_and_ocr,
        test_error_handling
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ PDF OCR: {passed} –ø—Ä–æ—à–ª–∏, {failed} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    return failed == 0


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)