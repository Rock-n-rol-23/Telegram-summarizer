#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""

import json
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class TelegramKeyboards:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        self.texts = {
            'ru': {
                'smart_summary': 'üß† –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è',
                'compression_10': 'üî• 10%',
                'compression_30': 'üìù 30%', 
                'compression_50': 'üìÑ 50%',
                'language': 'üåê –Ø–∑—ã–∫: {}',
                'stats': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'help': '‚ùì –ü–æ–º–æ—â—å',
                'back_to_menu': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
                'menu_button': 'üìã –ú–µ–Ω—é',
                'menu_title': 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'processing': '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...',
                'ru': 'RU',
                'en': 'EN'
            },
            'en': {
                'smart_summary': 'üß† Smart Summary',
                'compression_10': 'üî• 10%',
                'compression_30': 'üìù 30%',
                'compression_50': 'üìÑ 50%', 
                'language': 'üåê Language: {}',
                'stats': 'üìä Statistics',
                'help': '‚ùì Help',
                'back_to_menu': '‚óÄÔ∏è Back to menu',
                'menu_button': 'üìã Menu',
                'menu_title': 'üìã Main menu',
                'processing': '‚è≥ Processing...',
                'ru': 'RU', 
                'en': 'EN'
            }
        }
    
    def get_text(self, key: str, lang: str = 'ru', **kwargs) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
        lang = lang.lower()
        if lang not in self.texts:
            lang = 'ru'
        
        text = self.texts[lang].get(key, self.texts['ru'].get(key, key))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if '{}' in text and kwargs:
            return text.format(**kwargs)
        elif '{}' in text:
            return text
        return text
    
    def build_main_menu(self, user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ inline-–º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        compression = user_settings.get('compression_level', 30)
        lang = user_settings.get('language', 'ru').lower()
        smart_mode = user_settings.get('smart_mode', False)
        
        def mark_active(level: int) -> str:
            """–ü–æ–º–µ—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è"""
            return '‚Ä¢ ' if level == compression else ''
        
        # –Ø–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lang_display = self.get_text('ru' if lang == 'ru' else 'en', lang)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            # –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            [{
                "text": self.get_text('smart_summary', lang) + (' ‚úì' if smart_mode else ''),
                "callback_data": "smart"
            }],
            
            # –£—Ä–æ–≤–Ω–∏ —Å–∂–∞—Ç–∏—è
            [
                {
                    "text": mark_active(10) + self.get_text('compression_10', lang),
                    "callback_data": "cmp:10"
                },
                {
                    "text": mark_active(30) + self.get_text('compression_30', lang), 
                    "callback_data": "cmp:30"
                },
                {
                    "text": mark_active(50) + self.get_text('compression_50', lang),
                    "callback_data": "cmp:50"
                }
            ],
            
            # –Ø–∑—ã–∫
            [{
                "text": self.get_text('language', lang).format(lang_display),
                "callback_data": "lang:toggle"
            }],
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–æ–º–æ—â—å
            [
                {
                    "text": self.get_text('stats', lang),
                    "callback_data": "stats"
                },
                {
                    "text": self.get_text('help', lang),
                    "callback_data": "help"
                }
            ]
        ]
        
        return {
            "inline_keyboard": keyboard
        }
    
    def build_back_menu(self, lang: str = 'ru') -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
        return {
            "inline_keyboard": [
                [{
                    "text": self.get_text('back_to_menu', lang),
                    "callback_data": "menu"
                }]
            ]
        }
    
    def build_reply_keyboard(self, lang: str = 'ru') -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
        menu_text = self.get_text('menu_button', lang)
        
        return {
            "keyboard": [[menu_text]],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }
    
    def build_processing_menu(self, user_settings: Dict[str, Any], processing_text: str = None) -> tuple[str, Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ–∫—É—â–∏–º –º–µ–Ω—é"""
        lang = user_settings.get('language', 'ru').lower()
        
        if not processing_text:
            processing_text = self.get_text('processing', lang)
        
        menu = self.build_main_menu(user_settings)
        
        return processing_text, menu


class CallbackDataParser:
    """–ü–∞—Ä—Å–µ—Ä callback_data –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def parse(callback_data: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç callback_data –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        –§–æ—Ä–º–∞—Ç: action[:sub[:value]]
        –ü—Ä–∏–º–µ—Ä—ã:
        - 'smart' -> {'action': 'smart'}
        - 'cmp:30' -> {'action': 'cmp', 'sub': '30'}
        - 'lang:toggle' -> {'action': 'lang', 'sub': 'toggle'}
        """
        if not callback_data:
            return {'action': 'unknown'}
        
        parts = callback_data.split(':')
        
        result = {
            'action': parts[0] if parts else 'unknown'
        }
        
        if len(parts) > 1:
            result['sub'] = parts[1]
        
        if len(parts) > 2:
            result['value'] = parts[2]
        
        return result
    
    @staticmethod
    def build(action: str, sub: str = None, value: str = None) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç callback_data –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 64 –±–∞–π—Ç–∞
        """
        parts = [action]
        
        if sub:
            parts.append(sub)
        
        if value:
            parts.append(value)
        
        callback_data = ':'.join(parts)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 64 –±–∞–π—Ç–∞
        if len(callback_data.encode('utf-8')) > 64:
            logger.warning(f"Callback data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {callback_data}")
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            callback_data = callback_data[:60] + '...'
        
        return callback_data


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è
keyboards = TelegramKeyboards()
callback_parser = CallbackDataParser()