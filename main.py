#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Groq API –∏ Hugging Face fallback
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
"""

import logging
import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Set
import os
import sys

from telegram import Update, BotCommand
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    CallbackQueryHandler
)
from telegram.constants import ParseMode
from telegram.error import TelegramError

from config import Config
from summarizer import TextSummarizer
from database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TelegramSummarizerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.db = DatabaseManager(self.config.DATABASE_URL)
        self.summarizer = TextSummarizer(
            groq_api_key=self.config.GROQ_API_KEY,
            use_local_fallback=True
        )
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        self.user_requests: Dict[int, list] = {}
        self.processing_users: Set[int] = set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db.init_database()
        
        logger.info("Telegram Summarizer Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.save_user_request(user.id, user.username, 0, 0)
        
        welcome_text = """ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—Å—Ç–∞\\.*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\\.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help \\- –ø–æ–º–æ—â—å
/stats \\- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings \\- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

*–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å \\- –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç\\!*

üî• *Powered by Llama 3\\.1 70B \\- –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\\!*"""
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
        
        help_text = """üìñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*

1\\. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç \\(–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\\)
2\\. –ü–æ–ª—É—á–∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ \\(20\\-70% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\\)
3\\. –ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏–Ω—ã —Å–∞–º–º–∞—Ä–∏

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –ª—é–±–æ–π –¥–ª–∏–Ω—ã
‚Ä¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ –ø–æ–Ω–∏–º–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ \\(–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Llama 3\\.1 70B\\)
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π \\- –∏—Å–ø–æ–ª—å–∑—É—é Groq API

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:* –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π

*–õ–∏–º–∏—Ç—ã:* –î–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
        user_stats = self.db.get_user_stats(user.id)
        total_stats = self.db.get_total_stats()
        
        stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {user_stats['total_requests']}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_stats['total_chars']:,}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–∞–º–º–∞—Ä–∏: {user_stats['total_summary_chars']:,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ: {user_stats['avg_compression']:.1%}
‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {user_stats['first_request'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_stats['total_requests']:,}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_stats['total_users']:,}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_stats['total_chars']:,}"""
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        current_settings = self.db.get_user_settings(user.id)
        
        settings_text = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:*

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –î–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏: {current_settings['summary_ratio']:.0%} –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –Ø–∑—ã–∫: {current_settings['language_preference']}

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*
/set\\_ratio\\_20 \\- –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–∞–º–º–∞—Ä–∏ \\(20%\\)
/set\\_ratio\\_30 \\- –°—Ä–µ–¥–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ \\(30%\\) \\[–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é\\]
/set\\_ratio\\_50 \\- –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ \\(50%\\)
/set\\_ratio\\_70 \\- –û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ \\(70%\\)

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\\."""
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    async def set_ratio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–∞–º–º–∞—Ä–∏"""
        user = update.effective_user
        command = update.message.text.lower()
        
        ratio_map = {
            '/set_ratio_20': 0.2,
            '/set_ratio_30': 0.3,
            '/set_ratio_50': 0.5,
            '/set_ratio_70': 0.7
        }
        
        if command in ratio_map:
            new_ratio = ratio_map[command]
            self.db.update_user_settings(user.id, summary_ratio=new_ratio)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞ {new_ratio:.0%}")
            
            await update.message.reply_text(
                f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\\!*\n\n–î–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_ratio:.0%} –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    def check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id] 
            if now - req_time < 60
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
        if len(self.user_requests[user_id]) >= 10:
            return False
        
        self.user_requests[user_id].append(now)
        return True
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        user = update.effective_user
        text = update.message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username}), –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user.id):
            await update.message.reply_text(
                "‚è∞ *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\\!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\\. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user.id in self.processing_users:
            await update.message.reply_text(
                "‚ö†Ô∏è *–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\\!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) < 50:
            await update.message.reply_text(
                f"üìù *–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\\!*\n\n–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\\.\n–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user.id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "ü§ñ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç\\.\\.\\.*\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.db.get_user_settings(user.id)
            
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await self.summarizer.summarize_text(
                text, 
                target_ratio=user_settings['summary_ratio'],
                language=user_settings['language_preference']
            )
            
            processing_time = time.time() - start_time
            
            if summary:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.db.save_user_request(
                    user.id, 
                    user.username, 
                    len(text), 
                    len(summary)
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                compression_ratio = len(summary) / len(text)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = f"""üìã *–°–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ\\!*

{summary}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º–º–∞—Ä–∏: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"""
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await processing_message.delete()
                except:
                    pass
                
                await update.message.reply_text(
                    response_text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, —Å–∂–∞—Ç–∏–µ: {compression_ratio:.1%}")
                
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                try:
                    await processing_message.delete()
                except:
                    pass
                
                await update.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞\\!*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await processing_message.delete()
            except:
                pass
            
            await update.message.reply_text(
                f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.\n\n–û—à–∏–±–∫–∞: {str(e)[:100]}",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user.id)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except:
                pass
    
    async def setup_bot_commands(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
        commands = [
            BotCommand("start", "ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            BotCommand("help", "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
            BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"),
        ]
        
        await application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram Summarizer Bot")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        application.add_handler(CommandHandler("set_ratio_20", self.set_ratio_command))
        application.add_handler(CommandHandler("set_ratio_30", self.set_ratio_command))
        application.add_handler(CommandHandler("set_ratio_50", self.set_ratio_command))
        application.add_handler(CommandHandler("set_ratio_70", self.set_ratio_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        application.job_queue.run_once(
            lambda context: asyncio.create_task(self.setup_bot_commands(application)),
            when=1
        )
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramSummarizerBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
