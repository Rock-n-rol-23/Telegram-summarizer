
Шаги‑фикс (быстрый план)
	1.	Поставь ffmpeg на Railway

	•	Если у тебя Nixpacks, добавь файл nixpacks.toml в корень репо:

[phases.setup]
nixPkgs = ["ffmpeg"]

	•	Пересобери деплой.
	•	В коде на старте проверь путь:

import shutil, os
assert shutil.which(os.getenv("FFMPEG_PATH","ffmpeg")), "ffmpeg not found"

	2.	Задай движок явно на Vosk
В переменных окружения Railway:

AUDIO_SUMMARY_ENABLED=true
ASR_ENGINE=vosk
ASR_VAD_ENABLED=false   # пока отключим, чтобы упростить
FFMPEG_PATH=ffmpeg
ASR_MAX_DURATION_MIN=20

	3.	Зависимости (без тяжёлого torch)
В requirements.txt убедись, что есть:

python-telegram-bot>=20
pydub
soundfile
librosa
vosk==0.3.45

(Временно убери torch, transformers, speechbrain — вернём после того, как заработает Vosk.)
	4.	Автозагрузка русской модели Vosk
Добавь в audio_pipeline/transcriber.py простую «ленивую» загрузку и скачивание модели при первом запуске (если ещё нет):

import os, zipfile, urllib.request, time
from vosk import Model, KaldiRecognizer
import wave, json

_VOSK_MODEL_DIR = os.environ.get("VOSK_MODEL_DIR", "./models/vosk-ru")
_VOSK_URL = "https://github.com/alphacep/vosk-model-ru-0.22/releases/download/v0.22/vosk-model-small-ru-0.22.zip"

_vosk_model = None

def _ensure_vosk():
    os.makedirs(_VOSK_MODEL_DIR, exist_ok=True)
    if not os.path.exists(os.path.join(_VOSK_MODEL_DIR, "am")):  # грубая проверка распакованной модели
        tmp_zip = "/tmp/vosk_ru.zip"
        urllib.request.urlretrieve(_VOSK_URL, tmp_zip)
        with zipfile.ZipFile(tmp_zip) as z:
            z.extractall("/tmp")
        # Найти распакованную папку и переместить
        for name in os.listdir("/tmp"):
            if name.startswith("vosk-model-small-ru"):
                os.replace(f"/tmp/{name}", _VOSK_MODEL_DIR)
                break

def transcribe_audio(file_path: str, language_hint: str | None = None) -> dict:
    global _vosk_model
    _ensure_vosk()
    if _vosk_model is None:
        _vosk_model = Model(_VOSK_MODEL_DIR)

    # ожидаем WAV 16k mono
    with wave.open(file_path, "rb") as wf:
        rec = KaldiRecognizer(_vosk_model, wf.getframerate())
        rec.SetWords(True)
        text_parts = []
        while True:
            data = wf.readframes(4000)
            if len(data) == 0: break
            if rec.AcceptWaveform(data):
                r = json.loads(rec.Result()); text_parts.append(r.get("text",""))
        r = json.loads(rec.FinalResult()); text_parts.append(r.get("text",""))

    full_text = " ".join([t for t in text_parts if t]).strip()
    return {"text": full_text, "language": "ru", "duration_sec": 0.0, "engine": "vosk", "chunks": 1}

Важно: до вызова transcribe_audio ты уже должен конвертировать в WAV 16k mono:

# utils/ffmpeg.py
def to_wav_16k_mono(src, dst, ffmpeg_path="ffmpeg"):
    import subprocess
    cmd = [ffmpeg_path, "-y", "-i", src, "-ac", "1", "-ar", "16000", dst]
    subprocess.run(cmd, check=True)

	5.	Проверь извлечение file_id из voice/audio/video_note
Мини‑диагностика в хендлере (временный лог):

m = update.message
file_id = (
    getattr(getattr(m, "voice", None), "file_id", None) or
    getattr(getattr(m, "audio", None), "file_id", None) or
    getattr(getattr(m, "video_note", None), "file_id", None)
)
assert file_id, "no file_id in message (voice/audio/video_note)"

	6.	Посмотри логи Railway прямо во время отправки voice

	•	Открой Logs и пошли себе 5–10с голосовое.
	•	Типичные ошибки и что делать:
	•	ffmpeg: not found → шаг 1.
	•	subprocess.CalledProcessError на конвертации → кривой контейнер/кодек → обнови ffmpeg, проверь, что сохраняешь во временный путь и он существует.
	•	ModuleNotFoundError: vosk → требования не подтянулись → redeploy.
	•	HTTPError при скачивании модели → разреши интернет на билд/ран, либо примонтируй Persistent Volume и качай туда один раз.
	•	Killed/OOM → большой файл. Сначала протестируй 5–20 секундное voice.

	7.	Мини‑тест вне Telegram (на сервере)
Скинь на сервер короткий voice.ogg и прогони локально пайплайн:

ffmpeg -i voice.ogg -ac 1 -ar 16000 test.wav
python -c "from audio_pipeline.transcriber import transcribe_audio; print(transcribe_audio('test.wav'))"

Если тут всё ок — проблема в Telegram‑хендлерах/правах/доступе к get_file.

⸻

Когда заработает Vosk — подключай HF/SpeechBrain
	•	Верни в requirements.txt: torch, transformers, speechbrain.
	•	В transcriber.py делай ленивые импорты/загрузку и фоллбэк: если HF не загрузилась за 60 сек или нет памяти → логируй и падай на Vosk автоматически.
	•	Добавь постоянный кэш моделей (./models/) и при желании Persistent Volume в Railway, чтобы не качать на каждом ребуте.
