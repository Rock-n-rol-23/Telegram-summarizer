1) –ü–æ—á–∏–Ω–∏ getUpdates: —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è allowed_updates –∏ offset

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–í —Ñ—É–Ω–∫—Ü–∏–∏ get_updates –∑–∞–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:

–±—ã–ª–æ:

params = {
    "timeout": timeout,
    "allowed_updates": ["message", "callback_query"]
}
if offset:
    params["offset"] = offset


—Å—Ç–∞–ª–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ offset):

import json
params = {
    "timeout": timeout,
    "allowed_updates": json.dumps(["message", "callback_query"])
}
if offset is not None:
    params["offset"] = offset


–≠—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ Telegram –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∏–∑-–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç callback_query.

2) –î–∞–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback_query –∏ –ª–æ–≥–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–í handle_callback_query —É–∂–µ –µ—Å—Ç—å –≤—ã–∑–æ–≤ answer_callback_query, –Ω–æ –æ–Ω –Ω–µ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–û–±–Ω–æ–≤–∏ answer_callback_query —Ç–∞–∫, —á—Ç–æ–±—ã:

–≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞—Ç—å POST —Å json=data;

–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å ok/description.

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∫–∏:

async def answer_callback_query(self, callback_query_id: str, text: str = None, show_alert: bool = False):
    try:
        url = f"{self.base_url}/answerCallbackQuery"
        payload = {"callback_query_id": callback_query_id}
        if text:
            payload["text"] = text
        if show_alert:
            payload["show_alert"] = show_alert

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                logger.info(f"ANSWER_CALLBACK_QUERY: {result}")
                return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
        return None


–ò —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –≤ handle_callback_query –≤—Å—Ç–∞–≤—å ¬´—É—Å—Ç—É–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É¬ª (—á—Ç–æ–±—ã UI –±—ã—Å—Ç—Ä–µ–µ –≥–∞—Å–∏–ª ¬´loading¬ª):

await self.answer_callback_query(callback_query["id"])
await asyncio.sleep(0)  # –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

3) –ù–æ—Ä–º–∞–ª–∏–∑—É–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π parse_mode + fallback

–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ—á–µ–º—É ¬´–Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç¬ª ‚Äî editMessageText –ø–∞–¥–∞–µ—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–µ Markdown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É –Ω–∞—Å "Markdown"), –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "message is not modified". –°–¥–µ–ª–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å:

3.1 edit_message: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ parse_mode –∏ —è–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–ó–∞–º–µ–Ω–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –∏ –ª–æ–≥–∏–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å parse_mode, –∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å status/text –∏ description:

async def edit_message(self, chat_id: int, message_id: int, text: str,
                       reply_markup: Optional[dict] = None,
                       parse_mode: Optional[str] = None):
    url = f"{self.base_url}/editMessageText"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text
    }
    if parse_mode:
        payload["parse_mode"] = parse_mode
    if reply_markup:
        # Telegram –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON, –Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        import json as _json
        payload["reply_markup"] = _json.dumps(reply_markup)

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                raw = await response.text()
                try:
                    result = await response.json()
                except Exception:
                    logger.error(f"editMessageText non-JSON response: {raw}")
                    return None

                if not result.get("ok"):
                    logger.error(f"editMessageText error: {result}")
                else:
                    logger.info(f"editMessageText ok: {result.get('result', {}).get('message_id')}")
                return result
    except Exception as e:
        logger.error(f"editMessageText exception: {e}")
        return None

3.2 –î–æ–±–∞–≤—å edit_message_reply_markup –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
async def edit_message_reply_markup(self, chat_id: int, message_id: int, reply_markup: dict):
    url = f"{self.base_url}/editMessageReplyMarkup"
    import json as _json
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "reply_markup": _json.dumps(reply_markup)
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                logger.info(f"editMessageReplyMarkup: {result}")
                return result
    except Exception as e:
        logger.error(f"editMessageReplyMarkup exception: {e}")
        return None

3.3 –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ¬ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ ¬´—á—Ç–æ-—Ç–æ¬ª –¥–µ–ª–∞–ª–∏ (—Ö–æ—Ç—è –±—ã –º–µ–Ω—è–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ), –¥–æ–±–∞–≤—å:

async def safe_update_menu(self, chat_id: int, message_id: int, text: str, menu_keyboard: dict):
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    res = await self.edit_message(chat_id, message_id, text, reply_markup=menu_keyboard, parse_mode=None)
    if not res or not res.get("ok"):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî —Ö–æ—Ç—è –±—ã –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.edit_message_reply_markup(chat_id, message_id, menu_keyboard)


–ò –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö callback, –≥–¥–µ —Å–µ–π—á–∞—Å:

await self.edit_message(chat_id, message_id, confirmation_text, reply_markup=menu_keyboard)


–∑–∞–º–µ–Ω–∏ –Ω–∞:

await self.safe_update_menu(chat_id, message_id, confirmation_text, menu_keyboard)

4) –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –Ω–µ ¬´–º–æ–ª—á–∞—Ç—å¬ª, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ç –∂–µ

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–í handle_callback_compression –¥–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É ¬´—É—Ä–æ–≤–µ–Ω—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è¬ª ‚Äî –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å—É–π –º–µ–Ω—é (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –æ—Ç–∫–ª–∏–∫):

async def handle_callback_compression(self, chat_id: int, user_id: int, username: str, message_id: int, level: int):
    current = self.user_settings_manager.get_user_settings(user_id).get('compression_level', 30)
    updated = True
    if level != current:
        updated = self.user_settings_manager.set_compression_level(user_id, level, username)

    user_settings = self.user_settings_manager.get_user_settings(user_id)
    lang = user_settings.get('language', 'ru').lower()
    menu_keyboard = keyboards.build_main_menu(user_settings)

    confirmation_text = {
        'ru': f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {level}%\n\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'en': f"‚úÖ Compression level: {level}%\n\nüìã Main menu"
    }.get(lang, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {level}%")

    await self.safe_update_menu(chat_id, message_id, confirmation_text, menu_keyboard)


–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—å handle_callback_language_toggle ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å edit_message –Ω–∞ safe_update_menu.

5) –ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è reply_markup –≤ send_message

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–í send_message —Å–µ—Ä–∏–∞–ª–∏–∑—É–π reply_markup (—ç—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫—Ä–∞–µ–≤—ã–µ –∫–µ–π—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä):

if reply_markup:
    import json as _json
    data["reply_markup"] = _json.dumps(reply_markup)

6) ¬´–ú–µ–Ω—é¬ª –∏–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö

–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ handle_update —É–∂–µ –µ—Å—Ç—å:

if text and text in ['üìã –ú–µ–Ω—é', 'üìã Menu']:
    await self.handle_menu_button(update)
    return


–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å.

7) –õ–æ–≥–∏ –∏ –±—ã—Å—Ç—Ä—ã–µ smoke-—Ç–µ—Å—Ç—ã

–î–æ–±–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º Telegram API:

SEND_MESSAGE, EDIT_MESSAGE_TEXT, EDIT_MESSAGE_REPLY_MARKUP, ANSWER_CALLBACK_QUERY ‚Äî –ª–æ–≥–∏—Ä—É–π payload (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞) –∏ result.

–ü—Ä–æ–≤–µ—Ä—å –≤—Ä—É—á–Ω—É—é:

/start ‚Üí –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.

–ù–∞–∂–º–∏ 10% ‚Üí –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ ¬´‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: 10%¬ª –∏ —Ç–æ—á–∫–∞ —É 10%.

–ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ 10% ‚Üí –º–µ–Ω—é —Ö–æ—Ç—è –±—ã –ø–µ—Ä–µ—Ä–∏—Å—É–µ—Ç—Å—è (–Ω–µ—Ç ¬´—Ç–∏—à–∏–Ω—ã¬ª).

–ù–∞–∂–º–∏ üåê –Ø–∑—ã–∫ ‚Üí —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è + —Å–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ —è–∑—ã–∫–∞.

–ù–∞–∂–º–∏ ‚ùì –ü–æ–º–æ—â—å/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ¬´‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª.

8) –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç

–ù–µ –º–µ–Ω—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.

–ù–µ —Ç—Ä–æ–≥–∞—Ç—å –ª–æ–≥–∏–∫—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏; —Ç–æ–ª—å–∫–æ UI/transport-—Å–ª–æ–π.

–í—Å–µ –ø—Ä–∞–≤–∫–∏ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ.

–ö–æ–º–º–∏—Ç:
fix(ui): reliable callback handling, safe editMessageText + reply markup fallback, proper allowed_updates