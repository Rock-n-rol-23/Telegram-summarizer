TASK: Улучши качество суммаризации аудио в Telegram-боте. Сейчас саммари получается слишком коротким и теряет важные детали (договорённости, сроки, «что делать дальше»). Нужны: более точная транскрибация, «умная» многошаговая суммаризация и настраиваемая подробность вывода — без платных API, с приоритетом русского языка.

0) Ограничения и цели

Только бесплатные/локальные решения.

Память ограничена: выбираем лёгкие модели/библиотеки.

Поддержка RU (приоритет) и EN.

Выход: развернутое, структурированное резюме + выделенные «договорённости/сроки/следующие шаги», чтобы не терялась важная информация.

Кнопками в боте можно переключать «Кратко / Обычно / Подробно» и «Формат: пункты / абзац / структурно».

1) Зависимости (добавить в requirements.txt)
faster-whisper==1.0.3
ffmpeg-python==0.2.0
pydub==0.25.1
razdel==0.5.0
sumy==0.11.0
rutermextract==0.3.1
natasha==1.6.0


Примечания:
• Используем faster-whisper (CPU), модель small по умолчанию; при OOM переключаться на tiny.
• sumy (TextRank/LexRank) — лёгкая экстрактивная основа.
• rutermextract + natasha — ключевые термины, даты, имена, чтобы фиксировать важное.
• Конвертацию OGG(OPUS) → WAV 16k делаем через ffmpeg-python/pydub.

2) Файловая структура (создать/обновить)

asr/transcribe.py — безопасная транскрибация.

summarizers/audio_pipeline.py — конвейер: clean → segment → extract → compose.

summarizers/text_summarizer.py — экстрактив + структурирование + «абзацное» изложение.

bot/ui_settings.py — настройки пользователя (степень подробности, формат).

Обновить main.py/хендлеры, чтобы кнопками менять режимы.

3) Реализация ASR (asr/transcribe.py)

Требования:

Автоконверт OGG/OPUS → WAV 16k, mono.

faster-whisper с параметрами:

model_size="small" (fallback на "tiny" при OOM).

vad_filter=True, vad_parameters={"min_silence_duration_ms": 300}.

language="ru" при явном русском, иначе None (авто).

temperature=[0.0,0.2,0.4] (fallback), beam_size=5.

Выход: текст + списки (фразы с таймкодами).

Нормализация цифр/дат (простые правила: «понедельник/вторник», ДД.ММ, месяцы словами → нормализовать).

Сигнатура:

def transcribe_audio(file_path: str) -> dict:
    """
    Returns:
      {
        "text": str,                    # полный текст
        "segments": List[{"start":float,"end":float,"text":str}]
      }
    """

4) «Умная» суммаризация (summarizers/text_summarizer.py)

Подход «2 слоя»: экстрактив → композиция

Предобработка:

Разбить на предложения (razdel.sentenize), очистить повторы, привести местоимения («он/она/они») ближе к референту, если это явно следует из соседнего контекста.

Экстрактивный слой (важность):

TextRank (из sumy) для топ-предложений.

Повысить вес предложений, содержащих:

даты/время/сроки (выделить через natasha Date),

числа/проценты/суммы (регексы),

действия/обязательства (ключевые триггеры: «нужно», «будет», «договорились», «первое занятие», «бесплатно», «можно», «расписание», «подготовлен договор» и т.д. — оформить списком триггеров).

Гарантия включения хотя бы по одному предложению в категории:

Договорённости/решения

Сроки/даты

Следующие шаги/что сделать

(Опционально) Ограничения/условия

Извлечение структурированных фактов:

natasha NER: имена/организации/локации.

rutermextract: ключевые термины (учёт частоты).

Регексы для «дедлайнов» (сегодня/завтра/пн-вт, «в 14:00», «на полдня», «первое занятие бесплатно» и т.п.).

Композиция (форматы вывода):

format="bullets": маркеры по блокам.

format="paragraph": 1–2 абзаца человеческого изложения (склейка экстрактивных предложений c лёгкой переформулировкой, без LLM).

format="structured": секции

Итог в 1 абзац

Ключевые договорённости

Сроки и расписание

Следующие шаги

Открытые вопросы (если найдены триггеры «нужно уточнить», «если понравится» и т.п.)

Параметр verbosity: "short" | "normal" | "detailed" → управляет числом предложений (например 4/8/14) и глубиной секций.

Сигнатура:

def smart_summarize(transcript: dict, format: str = "structured", verbosity: str = "normal") -> str:
    """
    transcript: вывод transcribe_audio
    Возвращает готовый текст саммари в выбранном формате/режиме.
    """

5) Конвейер аудио (summarizers/audio_pipeline.py)
from asr.transcribe import transcribe_audio
from summarizers.text_summarizer import smart_summarize

def summarize_audio_file(file_path: str, format="structured", verbosity="normal") -> str:
    tr = transcribe_audio(file_path)
    return smart_summarize(tr, format=format, verbosity=verbosity)

6) Интеграция в бота

В bot/ui_settings.py хранить пользовательские настройки в БД (или в памяти если БД нет):
summary_format (=structured|bullets|paragraph), summary_verbosity (=short|normal|detailed).

В меню добавить кнопки:

«Формат саммари»: Пункты / Абзац / Структурно

«Подробность»: Кратко / Обычно / Подробно

При получении voice/audio вызывать:

text = summarize_audio_file(local_path, format=user.format, verbosity=user.verbosity)


Если длина аудио < 2 мин, по умолчанию ставить verbosity="detailed" (короткие записи часто требуют развёрнутого вывода).

7) Точность и «не терять важное»

В экстрактивном слое обязательно закрепи включение предложений с:

датами/днями недели/временем,

словами «договор», «бесплатно», «расписание», «первое занятие», «можно будет решить»,

числами/процентами/денежными суммами, если найдены.

Если после отбора нужной категории не нашлось — добавить ближайшее по похожести предложение (по длине/пересечению термов).

В конце добавлять строчку «Проверка важного»: перечислить найденные даты/времена/суммы одним списком.

8) Производительность и устойчивость

Ленивая загрузка моделей faster-whisper (singletons).

Try/except с понижением модели (small → tiny) при OOM.

Логирование времени этапов (ASR / extract / compose).

Отправлять пользователю «typing…»/«loading…» на время обработки.

9) Тесты (добавить tests/test_audio_summary.py)

Смоделировать короткий русский транскрипт, близкий по смыслу к примеру (договор к пн-вт; полдня; первое занятие бесплатно; возможно скорректировать расписание; если понравится — решаем о дальнейшем посещении).

Проверки:

В «structured» присутствуют секции и не пустые списки.

В тексте есть как минимум 6–8 информативных предложений в режиме detailed.

Даты/дни недели/условия не потеряны (ассерты по ключевым словам: «договор», «бесплатно», «расписание», «полдня», «пн»/«вт»).

10) Приёмочные критерии (важно)

На аудио ≈1–2 минуты саммари в режиме Подробно + Структурно:

содержит Итог в 1 абзац + три блока (Договорённости, Сроки, Следующие шаги) минимум по 2–3 пункта каждый;

явно упоминает дни/сроки (пн/вт), «первое занятие бесплатно», «на полдня», возможность корректировки расписания;

даёт понятный «что делать дальше» (напр., «ждём договор к пн-вт; после пробного занятия подтвердить запись; при необходимости запросить корректировку расписания»).

Переключение режимов и форматов работает через кнопки без перезапуска бота.

Обработка без платных API; при OOM автоматически снижаем размер модели ASR.