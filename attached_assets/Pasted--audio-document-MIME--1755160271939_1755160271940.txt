Цель:
Добавить поддержку обработки пересланных аудио-файлов (audio/document с аудио MIME/расширением) и пересланных голосовых сообщений (voice) без необходимости предварительного сохранения файла на устройство. Сохранить обратную совместимость и текущее поведение для остальных типов сообщений.

Контекст проекта:

Репозиторий: уже открыт в рабочем окружении.

Основная логика Телеграм-бота — в TelegramCompanion/simple_bot.py.

Обработка аудио уже реализована (on_voice, on_audio, on_audio_document, handle_audio_message) и корректно работает, если отправлять файлы напрямую. Проблема — в раннем выходе для пересланных сообщений без текста.

Изменения (минимально-инвазивно)

Убрать ранний return для пересланных медиа без текста
Файл: TelegramCompanion/simple_bot.py
Функция: async def handle_update(self, update: dict)

Найти блок (он идёт сразу после извлечения text из message):

                elif "forward_from" in message or "forward_from_chat" in message or "forward_origin" in message:
                    # Пересланное сообщение без текста - просто игнорируем без ошибки
                    logger.info(f"Получено пересланное медиа сообщение без текста от пользователя {user_id} - игнорируем")
                    return


Удалить этот блок целиком.
Обоснование: ниже по коду уже есть корректные ветки:

elif "audio" in message or "voice" in message: await self.handle_audio_message(update)

elif "document" in message: ... если аудио MIME/расширение — прокинуть в handle_audio_message, иначе документная обработка

И отдельная ветка, которая игнорирует прочее медиа без текста (photo/video/sticker/animation/video_note) — это сохранит прежнюю логику игнора нерелевантных пересланных медиа.

Важно: удаление раннего return позволит пересланным voice/audio/аудио-document дойти до уже существующей логики и корректно обрабатываться.

(Небольшой апдейт для расширений)
В том же файле, в проверке аудио-документов, убедиться, что список расширений включает также .oga (часто встречается у Telegram-голосовых). В текущем коде он уже есть в audio_processor.SUPPORTED_EXTS, но в блоке распознавания документа как аудио тоже добавь .oga, если её там нет.

Найти блок в handle_update (ветка elif "document" in message:) и убедиться, что массив:

audio_extensions = [".mp3", ".wav", ".m4a", ".ogg", ".flac", ".aac", ".opus"]


содержит также ".oga". Если нет — добавить:

audio_extensions = [".mp3", ".wav", ".m4a", ".ogg", ".flac", ".aac", ".opus", ".oga"]


Логи для диагностики
Добавить информативный лог сразу перед вызовом handle_audio_message, когда сообщение переслано и без текста:

В ветке elif "audio" in message or "voice" in message: перед вызовом:

if ("forward_from" in message) or ("forward_from_chat" in message) or ("forward_origin" in message):
    logger.info("Пересланное аудио/voice без текста — направляю в handle_audio_message")


В ветке elif "document" in message: при определении документа как аудио:

logger.info(f"Пересланный документ распознан как аудио: {file_name}, MIME: {mime_type} — направляю в handle_audio_message")


Это поможет убедиться, что пересланные кейсы действительно доходят до обработчика.

Важно не менять

Не менять приоритеты, если у сообщения есть текст/caption: как и раньше, пусть текст/команда обрабатывается как текст (мы не перехватываем такие случаи новыми правилами, чтобы не ломать UX).

Не менять allowed_updates (сейчас ["message"] — достаточно).

Не трогать audio_processor.py и логику Groq/ffmpeg, кроме добавления .oga в место, указанное выше (если её там не было).

Самотесты (чек-лист)

После правок перезапусти бота и проверь следующие сценарии в Telegram:

Пересланный voice

В другом чате запиши голосовое (4–10 сек).

Перешли его боту кнопкой «Переслать».

Ожидаемо: бот скачивает файл, транскрибирует и присылает саммари.

Пересланный audio (mp3/m4a/ogg/oga/opus)

Перешли боту аудиофайл как audio.

Ожидаемо: обработка как аудио, саммари возвращается.

Пересланный аудио-документ

Перешли боту аудио как document (без автоматического распознавания Telegram).

MIME audio/* или расширение из списка — бот обрабатывает как аудио.

Иначе — уходит в документный пайплайн (PDF/DOCX/TXT и т.п.), как и раньше.

Пересланная фотография/видео без текста

Бот тихо игнорирует (как и раньше). В логах должна быть запись об игноре нерелевантного медиа.

Аудио/voice с подписью (caption)

Поведение без изменений: текст/команда обрабатывается как текст (это сохранённая совместимость).

Критерии готовности

Пересланные voice и audio обрабатываются без сохранения на устройство.

Пересланные document с аудио MIME/расширением — корректно попадают в handle_audio_message.

Остальные пересланные медиа без текста по-прежнему игнорируются.

Никакие существующие функции (текст, ссылки, YouTube, документы, прямые загрузки аудио) не сломаны.

Логи чётко отражают маршрут пересланных аудио/voice.

Подсказки по коду (якоря для поиска)

Ищи в simple_bot.py строку с:

elif "forward_from" in message or "forward_from_chat" in message or "forward_origin" in message:

Удали весь блок до return включительно.

Убедись, что ниже есть ветки:

elif "audio" in message or "voice" in message: await self.handle_audio_message(update)

elif "document" in message: с проверкой audio MIME/расширений и прокидкой в handle_audio_message.

Сделай правки, запусти бота и проверь чек-лист. Если что-то упадёт — проверь логи: теперь они должны явно показывать, что пересланные аудио/voice доходят до handle_audio_message.