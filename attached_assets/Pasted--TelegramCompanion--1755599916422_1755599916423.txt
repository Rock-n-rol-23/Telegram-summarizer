–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–æ—Ä–µ–Ω—å: TelegramCompanion/. –ë–æ—Ç —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —á–µ—Ä–µ–∑ pdfplumber/PyPDF2, –Ω–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ —Å–∫–∞–Ω–∞–º–∏, –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PPTX. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OCR –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –∞ —Ç–∞–∫–∂–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ –≤ —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–ª–æ–º–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.

–¶–µ–ª–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏

PDF:

–ï—Å–ª–∏ –≤ PDF –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ.

–ï—Å–ª–∏ PDF ‚Äî —Å–∫–∞–Ω (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞) ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º OCR (ru+en).

–í–æ–∑–≤—Ä–∞—â–∞–µ–º text, method ("pymupdf+text" –∏–ª–∏ "pymupdf+ocr") –∏ meta (—Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞–∫–∏–µ OCR‚Äô–∏–ª–∏—Å—å).

PPTX:

–ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É–Ω–∫—Ç—ã —Å–ª–∞–π–¥–æ–≤, –∑–∞–º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–∞.

–í–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + meta.slides (title, bullets, notes).

–ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:

–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ —É—Ç—ã–∫–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã.

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ (RU/EN).

UI –∏ –ª–æ–≥–∏:

–í –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å: PDF: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –∏–ª–∏ PDF: OCR (—Å—Ç—Ä–∞–Ω–∏—Ü—ã: ‚Ä¶), PPTX –∏–∑–≤–ª–µ—á–µ–Ω–æ: N —Å–ª–∞–π–¥–æ–≤.

–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –±–µ–∑ —É—Ç–µ—á–µ–∫ –∫–ª—é—á–µ–π.

–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:

–ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract OCR + PyMuPDF + python-pptx. –ë–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö API.

–ù–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ–º:

–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤/—Å—Å—ã–ª–æ–∫/YouTube/–∞—É–¥–∏–æ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.

–¢–µ—Å—Ç—ã –¥–æ–±–∞–≤–∏—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –Ω–µ –ª–æ–º–∞—Ç—å.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã

pyproject.toml ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ dependencies:

pymupdf>=1.24.0
pytesseract>=0.3.10
Pillow>=10.0.0
python-pptx>=0.6.23


Dockerfile ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tesseract –∏ —è–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã:

RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    build-essential \
    curl \
    tesseract-ocr \
    tesseract-ocr-rus \
    tesseract-ocr-eng \
 && rm -rf /var/lib/apt/lists/*


.env / config.py ‚Äî –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏ (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏):

OCR_LANGS=rus+eng
PDF_OCR_DPI=200
MAX_PAGES_OCR=50


–í config.py –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏.

–ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–°–æ–∑–¥–∞–π TelegramCompanion/content_extraction/pdf_ocr.py:

import logging, os
from typing import Dict, Any, List
import fitz  # PyMuPDF
import pytesseract
from PIL import Image

logger = logging.getLogger(__name__)

def extract_text_from_pdf(path: str, ocr_langs: str = "rus+eng",
                          dpi: int = 200, max_pages_ocr: int = 50,
                          min_text_chars_per_page: int = 40) -> Dict[str, Any]:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π (PyMuPDF). –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ < min_text_chars_per_page,
    –¥–µ–ª–∞–µ–º OCR —Å —Ä–µ–Ω–¥–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    try:
        doc = fitz.open(path)
    except Exception as e:
        return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF: {e}"}

    pages = doc.page_count
    text_chunks: List[str] = []
    ocr_pages: List[int] = []
    used_ocr = False

    for i in range(pages):
        page = doc.load_page(i)
        page_text = page.get_text("text") or ""
        page_text = page_text.strip()

        if len(page_text) >= min_text_chars_per_page:
            text_chunks.append(page_text)
            continue

        # OCR, –µ—Å–ª–∏ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
        if i < max_pages_ocr:
            try:
                matrix = fitz.Matrix(dpi/72, dpi/72)
                pix = page.get_pixmap(matrix=matrix, alpha=False)
                img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                ocr_text = pytesseract.image_to_string(img, lang=ocr_langs, config="--psm 6")
                ocr_text = (ocr_text or "").strip()
                if ocr_text:
                    text_chunks.append(ocr_text)
                    ocr_pages.append(i + 1)
                    used_ocr = True
            except Exception as ocr_err:
                logger.warning(f"OCR –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {ocr_err}")
        else:
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω OCR –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {max_pages_ocr}")

    full_text = "\n\n".join(text_chunks).strip()
    if not full_text:
        return {"success": False, "error": "PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ OCR –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"}

    return {
        "success": True,
        "text": full_text,
        "method": f"pymupdf+{'ocr' if used_ocr else 'text'}",
        "meta": {"pages": pages, "ocr_pages": ocr_pages}
    }


–°–æ–∑–¥–∞–π TelegramCompanion/content_extraction/pptx_extractor.py:

from typing import Dict, Any, List
from pptx import Presentation

def extract_text_from_pptx(path: str) -> Dict[str, Any]:
    try:
        prs = Presentation(path)
    except Exception as e:
        return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PPTX: {e}"}

    slides_meta: List[dict] = []
    combined = []

    for idx, slide in enumerate(prs.slides, start=1):
        title = ""
        if getattr(slide.shapes, "title", None) and slide.shapes.title and slide.shapes.title.text:
            title = slide.shapes.title.text.strip()

        bullets: List[str] = []
        for shape in slide.shapes:
            if hasattr(shape, "text_frame") and shape.text_frame and shape.text_frame.text:
                bullets.append(shape.text_frame.text.strip())

        notes = ""
        if hasattr(slide, "notes_slide") and slide.notes_slide and slide.notes_slide.notes_text_frame:
            notes = (slide.notes_slide.notes_text_frame.text or "").strip()

        slides_meta.append({
            "index": idx,
            "title": title,
            "bullets": [b for b in bullets if b],
            "notes": notes
        })

        block = [f"–°–ª–∞–π–¥ {idx}: {title}".strip()]
        if bullets:
            block.append("\n".join(bullets))
        if notes:
            block.append(f"–ó–∞–º–µ—Ç–∫–∏: {notes}")
        combined.append("\n".join([b for b in block if b]).strip())

    joined = "\n\n".join(combined).strip()
    if not joined:
        return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PPTX"}

    return {"success": True, "text": joined, "method": "python-pptx", "meta": {"slides": slides_meta}}

–í—Å—Ç—Ä–æ–π–∫–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FileProcessor

–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π TelegramCompanion/file_processor.py:

–í–≤–µ—Ä—Ö—É –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã:

from content_extraction.pdf_ocr import extract_text_from_pdf as ocr_pdf_extract
from content_extraction.pptx_extractor import extract_text_from_pptx


–í __init__ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã:

self.supported_extensions = ['.pdf', '.docx', '.doc', '.txt', '.pptx', '.png', '.jpg', '.jpeg']


–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã:

def extract_text_from_pdf(self, file_path: str) -> Dict[str, Any]:
    from config import OCR_LANGS, PDF_OCR_DPI, MAX_PAGES_OCR
    return ocr_pdf_extract(
        file_path,
        ocr_langs=os.getenv("OCR_LANGS", "rus+eng"),
        dpi=int(os.getenv("PDF_OCR_DPI", 200)),
        max_pages_ocr=int(os.getenv("MAX_PAGES_OCR", 50))
    )

def extract_text_from_pptx(self, file_path: str) -> Dict[str, Any]:
    return extract_text_from_pptx(file_path)

def extract_text_from_image(self, file_path: str) -> Dict[str, Any]:
    # –ø—Ä–æ—Å—Ç–æ–π OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    try:
        import pytesseract
        from PIL import Image
        img = Image.open(file_path)
        txt = pytesseract.image_to_string(img, lang=os.getenv("OCR_LANGS", "rus+eng"), config="--psm 6").strip()
        if not txt:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"}
        return {"success": True, "text": txt, "method": "image-ocr", "meta": {}}
    except Exception as e:
        return {"success": False, "error": f"OCR –æ—à–∏–±–∫–∞: {e}"}


–í extract_text_from_file(...) –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ:

if extension == '.pdf':
    return self.extract_text_from_pdf(file_path)
elif extension == '.pptx':
    return self.extract_text_from_pptx(file_path)
elif extension in ('.png', '.jpg', '.jpeg'):
    return self.extract_text_from_image(file_path)
# –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ (docx/doc/txt)

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞

–§–∞–π–ª: TelegramCompanion/simple_bot.py

–í handle_document_message –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è text_result –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ï—Å–ª–∏ text_result.get("method","") —Å–æ–¥–µ—Ä–∂–∏—Ç "ocr", –¥–æ–±–∞–≤—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:

üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}
üîé –†–µ–∂–∏–º: PDF ‚Üí OCR (—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {','.join(map(str, text_result['meta'].get('ocr_pages', [])))})


–ï—Å–ª–∏ method == "python-pptx", –ø–æ–∫–∞–∑—ã–≤–∞–π:

üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {–∫–æ–ª-–≤–æ —Å–ª–∞–π–¥–æ–≤} —Å–ª–∞–π–¥–æ–≤


–î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑—É–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π (–µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç). –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:

–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ ~3500‚Äì4500 —Å–∏–º–≤–æ–ª–æ–≤.

–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞–Ω–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏–º TextSummarizer, –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≥–Ω–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫—Ä–∞—Ç–∫—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –Ω–∞–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º (cascade summarize).

–£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏)

–§–∞–π–ª: TelegramCompanion/smart_summarizer.py

–í detect_content_type(...) –¥–æ–±–∞–≤—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º:

–ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pptx –∏–ª–∏ text_result.method == "python-pptx".

–õ–∏–±–æ meta.get('slides') –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ PDF —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.

–î–ª—è —Ç–∏–ø–∞ "presentation" –¥–æ–±–∞–≤—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–±–æ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:

–û–±–∑–æ—Ä –∫–æ–ª–æ–¥—ã (3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤)

–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã (–¥–æ 7 –ø—É–Ω–∫—Ç–æ–≤)

–°–ª–∞–π–¥—ã (–¥–æ 10): –ø–æ 1‚Äì2 –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ —Å–ª–∞–π–¥; –µ—Å–ª–∏ —Å–ª–∞–π–¥–æ–≤ –±–æ–ª—å—à–µ ‚Äî ¬´–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∫—Ä–∞—Ç–∫–æ–º –≤–∏–¥–µ‚Ä¶¬ª

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –ª–æ–º–∞–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–∑–æ–≤ Groq/–ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤; –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.

–¢–µ—Å—Ç—ã

–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –≤ TelegramCompanion/tests/:

test_pdf_text_then_ocr.py

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ PDF —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (—á–µ—Ä–µ–∑ PyMuPDF/PIL).

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç, –≤—Ç–æ—Ä–∞—è ‚Äî —á–µ—Ä–µ–∑ OCR; meta.ocr_pages —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ç–æ—Ä—É—é.

test_pptx_extraction.py

–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π .pptx –∏–∑ 2‚Äì3 —Å–ª–∞–π–¥–æ–≤ (python-pptx).

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ meta.slides –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ method == "python-pptx".

test_image_ocr.py

–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å image-ocr.

–í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–º–µ—Ç—å ¬´–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å¬ª, –µ—Å–ª–∏ Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω (—á—Ç–æ–±—ã CI –Ω–µ –ø–∞–¥–∞–ª –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ OCR):

import shutil, pytest
pytest.skip(reason="tesseract not installed", allow_module_level=True) if shutil.which("tesseract") is None else None

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–û–±–Ω–æ–≤–∏ –±–ª–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ simple_bot –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –∏ README.md:

¬´üìÑ PDF (–≤–∫–ª—é—á–∞—è —Å–∫–∞–Ω—ã) ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å OCR (ru+en)¬ª

¬´üìä PPTX ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø—É–Ω–∫—Ç–æ–≤ –∏ –∑–∞–º–µ—Ç–æ–∫¬ª

–£–∫–∞–∂–∏ –ª–∏–º–∏—Ç—ã: –¥–æ 20 –ú–ë (—Ç–µ–ª–µ–≥—Ä–∞–º), OCR –¥–æ MAX_PAGES_OCR —Å—Ç—Ä–∞–Ω–∏—Ü, DPI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç—Å—è.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã

–ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª .ppt (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –≤–µ—Ä–Ω—É—Ç—å –≤–µ–∂–ª–∏–≤—É—é –æ—à–∏–±–∫—É: ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ .pptx –∏–ª–∏ PDF¬ª.

–ï—Å–ª–∏ PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è OCR (—Å—Ç—Ä–∞–Ω–∏—Ü > MAX_PAGES_OCR), —Å–¥–µ–ª–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π OCR (–ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–∞–Ω–∏—Ü) + –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

–í –ª–æ–≥–∞—Ö –Ω–µ –ø–µ—á–∞—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

–¢–µ–∫—Å—Ç–æ–≤—ã–π PDF ‚Üí –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –±–µ–∑ OCR, method=pymupdf+text.

–°–∫–∞–Ω PDF ‚Üí method=pymupdf+ocr, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ ocr_pages.

PPTX —Å 3 —Å–ª–∞–π–¥–∞–º–∏ ‚Üí method=python-pptx, –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å ¬´–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: 3 —Å–ª–∞–π–¥–∞¬ª, —Å–∞–º–º–∞—Ä–∏ –≤ slide-by-slide —Ñ–æ—Ä–º–∞—Ç–µ.

–ë–æ–ª—å—à–æ–π PDF (50+ —Å—Ç—Ä–∞–Ω–∏—Ü) ‚Üí —á–∞—Å—Ç–∏—á–Ω—ã–π OCR, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫.

–°–¥–µ–ª–∞–π –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ –∫–æ–º–º–∏—Ç–∞–º–∏ –ø–æ —à–∞–≥–∞–º, –ø—Ä–æ–≥–æ–Ω—è–π —Ç–µ—Å—Ç—ã –∏ –Ω–µ —Ç—Ä–æ–≥–∞–π –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–∞—É–¥–∏–æ, web, YouTube), –∫—Ä–æ–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.