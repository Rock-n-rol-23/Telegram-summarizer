Fix the inline keyboard functionality in the Telegram bot code. The main issue is in the send_message method - it's not properly handling inline keyboards. Make these specific changes:

1. **Fix the send_message method** - replace the current POST request logic with this:

```python
async def send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None, reply_markup: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    url = f"{self.base_url}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text[:4096]  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    if parse_mode:
        data["parse_mode"] = parse_mode
    if reply_markup:
        data["reply_markup"] = reply_markup  # Remove json.dumps() here
    
    logger.info(f"üì§ SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
    
    try:
        async with aiohttp.ClientSession() as session:
            # Use json=data when reply_markup is present, data=data otherwise
            if reply_markup:
                async with session.post(url, json=data) as response:
                    result = await response.json()
            else:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    
            if result.get("ok"):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {result}")
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        return None
1. Fix the edit_message method - update it similarly:
async def edit_message(self, chat_id: int, message_id: int, text: str, reply_markup: dict = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text
        }
        if reply_markup:
            data["reply_markup"] = reply_markup  # Remove json.dumps() here
        
        async with aiohttp.ClientSession() as session:
            # Use json=data when reply_markup is present, data=data otherwise
            if reply_markup:
                async with session.post(url, json=data) as response:
                    result = await response.json()
            else:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    
            return result.get("result") if result.get("ok") else None
    except Exception as e:
        logger.error(f"‚ùå EDIT_MESSAGE ERROR: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None
1. Remove test message from send_compression_level_menu method - delete these lines:
# Remove this test message
test_result = await self.send_message(chat_id, "‚ö†Ô∏è –¢–µ—Å—Ç: –µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã—à–µ")
logger.info(f"üß™ COMPRESSION MENU: –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_result}")
1. Ensure callback data is correct - verify the keyboard structure in send_compression_level_menu is exactly:
keyboard = {
    "inline_keyboard": [
        [
            {"text": "üî• 10%", "callback_data": "compression_10"},
            {"text": "üìù 30%", "callback_data": "compression_30"},
            {"text": "üìÑ 50%", "callback_data": "compression_50"}
        ]
    ]
}
Apply these changes and keep all other functionality intact. The inline buttons should work properly after these fixes.
