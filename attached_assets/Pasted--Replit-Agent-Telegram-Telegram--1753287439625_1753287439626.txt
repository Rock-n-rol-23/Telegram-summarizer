# Задача для Replit Agent: Исправить деплой Telegram бота

## Проблема
Telegram бот не может быть задеплоен в Replit из-за ошибок:
- Health checks are failing because the application is not responding to HTTP requests on the root / endpoint
- The application is configured as a Cloud Run deployment but may not be properly exposing an HTTP server
- The run command uses $file variable which may not be resolving to the correct main application file

## Что нужно сделать

### 1. Создать HTTP-сервер для health check
Нужно модифицировать основной файл бота, добавив HTTP-сервер, который будет отвечать на запросы от Replit:

**Требования к HTTP-серверу:**
- Должен отвечать на GET запросы по пути `/` и `/health`
- Возвращать статус 200 с JSON ответом `{"status": "ok"}`
- Работать на порту из переменной окружения `PORT` (по умолчанию 8080)
- Запускаться в отдельном потоке, чтобы не блокировать работу бота

### 2. Структура решения
Создать файл `main.py` со следующей архитектурой:

```python
import threading
from flask import Flask  # или http.server для простого решения
import os

# HTTP сервер для health check
app = Flask(__name__)

@app.route('/')
@app.route('/health')
def health_check():
    return {"status": "ok", "message": "Bot is running"}, 200

# Функция для запуска бота
def run_telegram_bot():
    # Весь существующий код бота переместить сюда
    # Основной цикл опроса Telegram API
    pass

if __name__ == '__main__':
    # Запуск бота в отдельном потоке
    bot_thread = threading.Thread(target=run_telegram_bot, daemon=True)
    bot_thread.start()
    
    # Запуск HTTP сервера
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
```

### 3. Обновить конфигурационные файлы

**Файл `.replit`:**
```toml
run = "python main.py"
modules = ["python-3.11"]

[nix]
channel = "stable-22_11"

[deployment]
run = ["python", "main.py"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 8080
externalPort = 80
```

**Файл `requirements.txt`** должен включать:
```
flask
requests
python-telegram-bot
groq
# другие зависимости из существующего проекта
```

### 4. Переменные окружения
Убедиться, что в Secrets настроены:
- `BOT_TOKEN` - токен Telegram бота
- `GROQ_API_KEY` - ключ для Groq API
- Другие API ключи, используемые в боте

### 5. Миграция существующего кода
- Весь код из `simple_bot.py` перенести в функцию `run_telegram_bot()`
- Убедиться, что все импорты перенесены в начало файла
- Проверить, что основной цикл бота не блокирует HTTP-сервер

### 6. Альтернативное решение без Flask
Если не хочется добавлять Flask, можно использовать встроенный `http.server`:

```python
import http.server
import socketserver
import json

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ['/', '/health']:
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "ok"}).encode())
```

## Ожидаемый результат
После внесения изменений:
1. Бот будет отвечать на HTTP health check запросы
2. Replit сможет успешно задеплоить приложение
3. Telegram бот будет работать в фоне
4. Деплой пройдет без ошибок "Health checks are failing"

## Дополнительные проверки
- Убедиться, что все зависимости указаны в `requirements.txt`
- Проверить корректность переменных окружения
- Убедиться, что бот не использует локальные файлы, которые могут отсутствовать при деплое

## Приоритет задач
1. **Высокий:** Добавить HTTP health check endpoint
2. **Высокий:** Обновить run command в `.replit`
3. **Средний:** Добавить Flask dependency
4. **Средний:** Настроить threading для параллельной работы
5. **Низкий:** Оптимизировать структуру кода