"""
YouTube Video Processor –¥–ª—è Telegram –±–æ—Ç–∞
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–º–∞—Ä–∏–∑—É–µ—Ç —á–µ—Ä–µ–∑ Groq API
"""

import re
import os
import tempfile
import shutil
import logging
import yt_dlp
from typing import Dict, List, Optional, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class YouTubeProcessor:
    def __init__(self, groq_client=None):
        self.groq_client = groq_client
        self.cookies_file = Path("cookies.txt")
        
    def _has_valid_cookies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies"""
        if not self.cookies_file.exists():
            return False
        
        content = self.cookies_file.read_text(encoding='utf-8')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ cookies, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        lines = [line.strip() for line in content.split('\n') if line.strip()]
        cookie_lines = [line for line in lines if not line.startswith('#')]
        return len(cookie_lines) > 0
        
    def _get_ydl_opts_with_cookies(self, base_opts: dict) -> dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç cookies –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º yt-dlp –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"""
        opts = base_opts.copy()
        if self._has_valid_cookies():
            opts['cookiefile'] = str(self.cookies_file)
            logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ {self.cookies_file}")
        else:
            logger.warning(f"‚ö†Ô∏è Cookies —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {self.cookies_file}")
        return opts
        
    def extract_youtube_urls(self, text: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç YouTube URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        youtube_patterns = [
            r'(?:https?://)?(?:www\.)?youtube\.com/watch\?v=([a-zA-Z0-9_-]+)',
            r'(?:https?://)?(?:www\.)?youtu\.be/([a-zA-Z0-9_-]+)',
            r'(?:https?://)?(?:www\.)?youtube\.com/embed/([a-zA-Z0-9_-]+)',
            r'(?:https?://)?(?:www\.)?youtube\.com/v/([a-zA-Z0-9_-]+)'
        ]
        
        youtube_urls = []
        for pattern in youtube_patterns:
            matches = re.finditer(pattern, text)
            for match in matches:
                video_id = match.group(1)
                full_url = f"https://www.youtube.com/watch?v={video_id}"
                youtube_urls.append({
                    'url': full_url,
                    'video_id': video_id,
                    'original_url': match.group(0)
                })
        
        return youtube_urls

    def validate_youtube_url(self, url: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube –≤–∏–¥–µ–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
        if not self._has_valid_cookies():
            return {
                'valid': False,
                'error': '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å cookies –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube —Å—Å—ã–ª–æ–∫ (—Å–º. README)'
            }
            
        try:
            base_opts = {
                'quiet': True,
                'no_warnings': True,
                'extractor_args': {
                    'youtube': {
                        'skip': ['dash', 'hls'],
                        'player_skip': ['configs', 'webpage'],
                        'player_client': ['android', 'web']
                    }
                },
                'http_headers': {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                }
            }
            
            ydl_opts = self._get_ydl_opts_with_cookies(base_opts)
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                duration = info.get('duration', 0)
                max_duration = 7200  # 2 —á–∞—Å–∞ –ø–æ –Ω–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É
                if duration > max_duration:
                    return {
                        'valid': False,
                        'error': f'–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª–µ–µ {max_duration//3600} —á–∞—Å–æ–≤)'
                    }
                
                if info.get('is_live'):
                    return {
                        'valid': False,
                        'error': '–ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'
                    }
                
                return {
                    'valid': True,
                    'title': info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'duration': duration,
                    'uploader': info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'view_count': info.get('view_count', 0)
                }
                
        except Exception as e:
            error_str = str(e).lower()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YouTube: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if 'sign in' in error_str or 'bot' in error_str:
                return {
                    'valid': False,
                    'error': '‚ùå Cookies –¥–ª—è YouTube –∏—Å—Ç–µ–∫–ª–∏ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã. –ü—Ä–æ—Å—å–±–∞ –æ–±–Ω–æ–≤–∏—Ç—å cookies (—Å–º. README)'
                }
            elif 'cookies' in error_str:
                return {
                    'valid': False,
                    'error': '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å cookies. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ cookies.txt'
                }
            
            return {
                'valid': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∏–¥–µ–æ: {str(e)}'
            }

    def extract_video_info_and_subtitles(self, url: str, max_duration: int = 3600) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ —Å—É–±—Ç–∏—Ç—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
        if not self._has_valid_cookies():
            return {
                'success': False,
                'error': '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å cookies –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube —Å—Å—ã–ª–æ–∫ (—Å–º. README)'
            }
            
        try:
            base_opts = {
                'writesubtitles': True,
                'writeautomaticsub': True,
                'subtitlesformat': 'vtt',
                'subtitleslangs': ['ru', 'en', 'auto'],
                'quiet': True,
                'no_warnings': True,
                'skip_download': True,
                'extractor_args': {
                    'youtube': {
                        'skip': ['dash', 'hls'],
                        'player_skip': ['configs', 'webpage'],
                        'player_client': ['android', 'web']
                    }
                },
                'http_headers': {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                }
            }
            
            ydl_opts = self._get_ydl_opts_with_cookies(base_opts)
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                duration = info.get('duration', 0)
                if duration > max_duration:
                    raise Exception(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration//60} –º–∏–Ω—É—Ç")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                subtitles_text = ""
                description = info.get('description', '') or ""
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
                subtitles = info.get('subtitles', {})
                automatic_captions = info.get('automatic_captions', {})
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                if 'ru' in subtitles:
                    subtitles_text = self._extract_subtitle_text(subtitles['ru'][0]['url'])
                elif 'ru' in automatic_captions:
                    subtitles_text = self._extract_subtitle_text(automatic_captions['ru'][0]['url'])
                # –ü–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
                elif 'en' in subtitles:
                    subtitles_text = self._extract_subtitle_text(subtitles['en'][0]['url'])
                elif 'en' in automatic_captions:
                    subtitles_text = self._extract_subtitle_text(automatic_captions['en'][0]['url'])
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
                combined_text = ""
                if subtitles_text:
                    combined_text += f"–°–£–ë–¢–ò–¢–†–´ –í–ò–î–ï–û:\n{subtitles_text}\n\n"
                if description and len(description) > 100:
                    combined_text += f"–û–ü–ò–°–ê–ù–ò–ï –í–ò–î–ï–û:\n{description[:2000]}\n"
                
                if not combined_text:
                    return {
                        'success': False,
                        'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                    }
                
                return {
                    'success': True,
                    'text': combined_text,
                    'title': info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'duration': duration,
                    'uploader': info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'view_count': info.get('view_count', 0),
                    'has_subtitles': bool(subtitles_text),
                    'has_description': bool(description)
                }
            
        except Exception as e:
            error_str = str(e).lower()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö YouTube: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if 'sign in' in error_str or 'bot' in error_str:
                return {
                    'success': False,
                    'error': '‚ùå Cookies –¥–ª—è YouTube –∏—Å—Ç–µ–∫–ª–∏ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã. –ü—Ä–æ—Å—å–±–∞ –æ–±–Ω–æ–≤–∏—Ç—å cookies (—Å–º. README)'
                }
            elif 'cookies' in error_str:
                return {
                    'success': False,
                    'error': '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å cookies. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ cookies.txt'
                }
            
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {str(e)}'
            }

    def _extract_subtitle_text(self, subtitle_url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ VTT —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            import requests
            response = requests.get(subtitle_url, timeout=30)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º VTT —Ñ–æ—Ä–º–∞—Ç
            lines = response.text.split('\n')
            text_lines = []
            
            for line in lines:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ VTT –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                if (line and 
                    not line.startswith('WEBVTT') and
                    not line.startswith('NOTE') and
                    not '-->' in line and
                    not line.isdigit()):
                    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    import re
                    clean_line = re.sub(r'<[^>]+>', '', line)
                    if clean_line and len(clean_line) > 2:
                        text_lines.append(clean_line)
            
            return ' '.join(text_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return ""



    def summarize_youtube_content(self, content: str, video_title: str = "", video_duration: int = 0) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ YouTube –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Groq API"""
        try:
            logger.info(f"üé¨ –ù–∞—á–∞–ª–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ YouTube: {video_title[:50]}...")
            logger.info(f"üé¨ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫")
            
            if not self.groq_client:
                logger.error("üé¨ Groq API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {
                    'success': False,
                    'error': 'Groq API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            max_chars = 10000
            if len(content) > max_chars:
                content = content[:max_chars] + "...\n[–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏]"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—é–º–µ
            if video_duration < 600:  # –ú–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç
                summary_length = "150-250 —Å–ª–æ–≤"
                max_tokens = 300
            elif video_duration < 1800:  # –ú–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç
                summary_length = "250-400 —Å–ª–æ–≤"
                max_tokens = 450
            else:  # –ë–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
                summary_length = "400-600 —Å–ª–æ–≤"
                max_tokens = 600
            
            duration_str = f"{video_duration//60} –º–∏–Ω—É—Ç {video_duration%60} —Å–µ–∫—É–Ω–¥"
            
            prompt = f"""–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ YouTube –≤–∏–¥–µ–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ò–î–ï–û:
–ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ï–ó–Æ–ú–ï:
- –û–±—ä–µ–º: {summary_length}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –≥–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ–π
- –°–æ—Ö—Ä–∞–Ω–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –∏–º–µ–Ω–∞
- –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º

–ö–û–ù–¢–ï–ù–¢ –í–ò–î–ï–û:
{content}

–°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–ï –†–ï–ó–Æ–ú–ï:"""

            logger.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API, –º–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {max_tokens}")
            completion = self.groq_client.chat.completions.create(
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                model="llama-3.3-70b-versatile",
                max_tokens=max_tokens,
                temperature=0.3
            )
            logger.info(f"üé¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Groq API")
            
            summary = completion.choices[0].message.content.strip()
            logger.info(f"üé¨ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –¥–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return {
                'success': True,
                'summary': summary
            }
            
        except Exception as e:
            logger.error(f"üé¨ –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ Groq: {e}")
            logger.error(f"üé¨ –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ Groq: {str(e)}'
            }

    def create_fallback_summary(self, content: str, video_title: str = "") -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            sentences = content.split('.')
            sentences = [s.strip() for s in sentences if len(s.strip()) > 30]
            
            # –ë–µ—Ä–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            summary_sentences = []
            if len(sentences) > 0:
                summary_sentences.append(sentences[0])  # –ù–∞—á–∞–ª–æ
            if len(sentences) > 4:
                summary_sentences.append(sentences[len(sentences)//3])  # –¢—Ä–µ—Ç—å
                summary_sentences.append(sentences[2*len(sentences)//3])  # –î–≤–µ —Ç—Ä–µ—Ç–∏
            if len(sentences) > 1:
                summary_sentences.append(sentences[-1])  # –ö–æ–Ω–µ—Ü
            
            summary = '. '.join(summary_sentences)
            
            if len(summary) > 1000:
                summary = summary[:1000] + "..."
            
            summary += "\n\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
            
            return {
                'success': True,
                'summary': summary
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback —Ä–µ–∑—é–º–µ: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ fallback —Ä–µ–∑—é–º–µ: {e}'
            }

