#!/usr/bin/env python3
"""
Deployment entry point - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è Cloud Run
"""
import os
import sys
import asyncio
import logging
import signal
from aiohttp import web
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
app = None
site = None
bot_task = None

async def health_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health check"""
    return web.json_response({
        'status': 'healthy',
        'service': 'telegram-bot',
        'ready': True
    })

async def root_handler(request):
    """–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    return web.Response(text='Telegram Bot - Ready for Cloud Run', status=200)

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        from simple_bot import SimpleTelegramBot
        bot = SimpleTelegramBot()
        await bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

async def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    app.router.add_get('/', root_handler)
    app.router.add_get('/health', health_handler)
    app.router.add_get('/ready', health_handler)
    return app

async def init_server():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    global app, site, bot_task
    
    port = int(os.getenv('PORT', 5000))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = await create_app()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    bot_task = asyncio.create_task(start_telegram_bot())
    
    logger.info("–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    return runner, site

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    asyncio.create_task(shutdown())

async def shutdown():
    """Graceful shutdown"""
    global app, site, bot_task
    
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
    
    if bot_task:
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            pass
    
    if site:
        await site.stop()
    
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot –¥–ª—è Cloud Run")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–æ—Ä—Ç: {os.getenv('PORT', '5000')}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    runner, site = await init_server()
    
    try:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        await shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())