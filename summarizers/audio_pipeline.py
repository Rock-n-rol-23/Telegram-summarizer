"""
–ö–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è + —É–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
"""

import logging
import time
from typing import Dict, Optional

logger = logging.getLogger(__name__)

try:
    from asr.transcribe import transcribe_audio
    from summarizers.text_summarizer import smart_summarize
    AUDIO_PIPELINE_AVAILABLE = True
except ImportError as e:
    AUDIO_PIPELINE_AVAILABLE = False
    logger.warning(f"–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


def summarize_audio_file(
    file_path: str, 
    format: str = "structured", 
    verbosity: str = "normal",
    language: Optional[str] = None,
    progress_callback=None
) -> Dict:
    """
    –ü–æ–ª–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        format: "structured" | "bullets" | "paragraph"
        verbosity: "short" | "normal" | "detailed"
        language: —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ("ru", "en" –∏–ª–∏ None)
        progress_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    
    Returns:
        {
            "success": bool,
            "summary": str,               # –≥–æ—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
            "transcript": str,            # –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            "language": str,              # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
            "duration": float,            # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            "processing_time": float,     # –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            "stages": Dict,               # –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
            "error": str                  # –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ success=False
        }
    """
    
    if not AUDIO_PIPELINE_AVAILABLE:
        return {
            "success": False,
            "error": "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        }
    
    start_time = time.time()
    stages = {}
    
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ: {file_path}")
        
        # –≠—Ç–∞–ø 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        if progress_callback:
            progress_callback("üéß –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...")
        
        transcribe_start = time.time()
        transcript_result = transcribe_audio(file_path, language=language)
        stages["transcription"] = time.time() - transcribe_start
        
        if not transcript_result["success"]:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {transcript_result['error']}",
                "processing_time": time.time() - start_time,
                "stages": stages
            }
        
        transcript_text = transcript_result["text"]
        detected_language = transcript_result.get("language", "unknown")
        duration = transcript_result.get("duration", 0.0)
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤, {detected_language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(transcript_text) < 50:
            return {
                "success": False,
                "error": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
                "transcript": transcript_text,
                "language": detected_language,
                "duration": duration,
                "processing_time": time.time() - start_time,
                "stages": stages
            }
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ verbosity –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ
        if duration > 0 and duration < 120:  # –ú–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç
            if verbosity == "normal":
                verbosity = "detailed"
                logger.info("–ö–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ - –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ detailed —Ä–µ–∂–∏–º")
        
        # –≠—Ç–∞–ø 2: –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        if progress_callback:
            progress_callback("ü§ñ –°–æ–∑–¥–∞—é —É–º–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏...")
        
        summarize_start = time.time()
        summary = smart_summarize(
            transcript_result, 
            format=format, 
            verbosity=verbosity
        )
        stages["summarization"] = time.time() - summarize_start
        
        total_time = time.time() - start_time
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}—Å: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤ —Å–∞–º–º–∞—Ä–∏")
        
        return {
            "success": True,
            "summary": summary,
            "transcript": transcript_text,
            "language": detected_language,
            "duration": duration,
            "processing_time": total_time,
            "stages": stages,
            "format": format,
            "verbosity": verbosity
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
            "processing_time": time.time() - start_time,
            "stages": stages
        }


def get_pipeline_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    if not AUDIO_PIPELINE_AVAILABLE:
        return "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    try:
        from asr.transcribe import check_transcription_availability
        from summarizers.text_summarizer import check_summarization_availability
        
        transcription = check_transcription_availability()
        summarization = check_summarization_availability()
        
        transcription_ok = transcription.get("faster_whisper", False)
        summarization_ok = sum(summarization.values()) >= 2
        
        if transcription_ok and summarization_ok:
            return "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω"
        elif transcription_ok:
            return "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)"
        elif summarization_ok:
            return "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)"
        else:
            return "–ê—É–¥–∏–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}"


def estimate_processing_time(duration: float) -> str:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
    if duration <= 0:
        return "~30 —Å–µ–∫—É–Ω–¥"
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ –º–æ—â–Ω–æ—Å—Ç–∏ CPU)
    transcription_ratio = 0.3  # 30% –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
    summarization_time = 5     # ~5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
    
    estimated_seconds = duration * transcription_ratio + summarization_time
    
    if estimated_seconds < 60:
        return f"~{int(estimated_seconds)} —Å–µ–∫—É–Ω–¥"
    else:
        minutes = int(estimated_seconds // 60)
        seconds = int(estimated_seconds % 60)
        return f"~{minutes}–º {seconds}—Å"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

def quick_audio_summary(file_path: str, duration: float = 0) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if duration > 0 and duration < 120:  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ
        format = "structured"
        verbosity = "detailed"
    elif duration > 600:  # –î–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ (>10 –º–∏–Ω)
        format = "bullets" 
        verbosity = "short"
    else:  # –°—Ä–µ–¥–Ω–µ–µ –∞—É–¥–∏–æ
        format = "structured"
        verbosity = "normal"
    
    result = summarize_audio_file(file_path, format=format, verbosity=verbosity)
    
    if result["success"]:
        return result["summary"]
    else:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}"


def format_audio_result(result: Dict, include_stats: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not result["success"]:
        return f"‚ùå {result['error']}"
    
    output = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
    output.append(result["summary"])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if include_stats:
        output.append("")
        output.append("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
        
        duration = result.get("duration", 0)
        if duration > 0:
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            output.append(f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}–º {seconds}—Å")
        
        transcript_len = len(result.get("transcript", ""))
        summary_len = len(result.get("summary", ""))
        
        output.append(f"‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_len:,} —Å–∏–º–≤–æ–ª–æ–≤")
        output.append(f"‚Ä¢ –°–∞–º–º–∞—Ä–∏: {summary_len:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if transcript_len > 0 and summary_len > 0:
            compression = (1 - summary_len / transcript_len) * 100
            output.append(f"‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression:.1f}%")
        
        processing_time = result.get("processing_time", 0)
        output.append(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
        
        stages = result.get("stages", {})
        if stages:
            transcription_time = stages.get("transcription", 0)
            summarization_time = stages.get("summarization", 0)
            output.append(f"‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {transcription_time:.1f}—Å, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {summarization_time:.1f}—Å")
        
        language = result.get("language", "unknown")
        if language != "unknown":
            lang_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}.get(language, language)
            output.append(f"‚Ä¢ –Ø–∑—ã–∫: {lang_name}")
        
        format_info = f"{result.get('format', 'structured')} / {result.get('verbosity', 'normal')}"
        output.append(f"‚Ä¢ –†–µ–∂–∏–º: {format_info}")
    
    return "\n".join(output)