"""
–ú–æ–¥—É–ª—å "—É–º–Ω–æ–π" —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
"""

import logging
import re
from typing import Dict, List, Optional, Tuple
from groq import Groq

logger = logging.getLogger(__name__)

class SmartSummarizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, groq_client: Groq):
        self.groq_client = groq_client
        
    def analyze_content_type(self, text: str, source_type: str = "text") -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_patterns = {
            "meeting": ["–≤—Å—Ç—Ä–µ—á–∞", "—Å–æ–±—Ä–∞–Ω–∏–µ", "–æ–±—Å—É–∂–¥–∞–ª–∏", "—Ä–µ—à–∏–ª–∏", "action item", "—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏", "–ø–æ–≤–µ—Å—Ç–∫–∞"],
            "lecture": ["–ª–µ–∫—Ü–∏—è", "—É—Ä–æ–∫", "–æ–±—ä—è—Å–Ω—é", "–∏–∑—É—á–∞–µ–º", "—Ç–µ–º–∞ —É—Ä–æ–∫–∞", "–≤—ã–≤–æ–¥—ã", "–º–∞—Ç–µ—Ä–∏–∞–ª"],
            "news": ["–Ω–æ–≤–æ—Å—Ç–∏", "–ø—Ä–æ–∏–∑–æ—à–ª–æ", "—Å–æ–æ–±—â–∞–µ—Ç—Å—è", "–ø–æ –¥–∞–Ω–Ω—ã–º", "–∏—Å—Ç–æ—á–Ω–∏–∫–∏", "–∑–∞—è–≤–∏–ª"],
            "interview": ["–∏–Ω—Ç–µ—Ä–≤—å—é", "–±–µ—Å–µ–¥–∞", "–≤–æ–ø—Ä–æ—Å", "–æ—Ç–≤–µ—Ç", "—Ä–∞—Å—Å–∫–∞–∑–∞–ª", "–ø–æ–¥–µ–ª–∏–ª—Å—è"],
            "presentation": ["–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–¥–æ–∫–ª–∞–¥", "—Å–ª–∞–π–¥", "–ø–æ–∫–∞–∂—É", "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"],
            "discussion": ["–¥–∏—Å–∫—É—Å—Å–∏—è", "–æ–±—Å—É–∂–¥–µ–Ω–∏–µ", "–º–Ω–µ–Ω–∏–µ", "—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è", "—Å—á–∏—Ç–∞—é", "—Å–æ–≥–ª–∞—Å–µ–Ω"],
            "instruction": ["–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–∫–∞–∫", "—à–∞–≥–∏", "—Å–Ω–∞—á–∞–ª–∞", "–∑–∞—Ç–µ–º", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"],
            "review": ["–æ–±–∑–æ—Ä", "—Ä–µ—Ü–µ–Ω–∑–∏—è", "–æ—Ü–µ–Ω–∫–∞", "–ø–ª—é—Å—ã", "–º–∏–Ω—É—Å—ã", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]
        }
        
        scores = {}
        for content_type, keywords in content_patterns.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                scores[content_type] = score
        
        if scores:
            return max(scores.keys(), key=lambda x: scores[x])
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_type == "audio":
            return "discussion"
        elif source_type == "document":
            return "instruction"
        else:
            return "general"
    
    def extract_key_entities(self, text: str) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        entities = {
            "dates": [],
            "numbers": [],
            "names": [],
            "actions": [],
            "decisions": []
        }
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç
        date_patterns = [
            r'\d{1,2}\.\d{1,2}\.\d{4}',  # 01.01.2024
            r'\d{1,2}/\d{1,2}/\d{4}',   # 01/01/2024
            r'\d{1,2} [–∞-—è]+ \d{4}',    # 1 —è–Ω–≤–∞—Ä—è 2024
            r'[–∞-—è]+ \d{4}',            # —è–Ω–≤–∞—Ä—å 2024
        ]
        
        for pattern in date_patterns:
            entities["dates"].extend(re.findall(pattern, text, re.IGNORECASE))
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        number_patterns = [
            r'\d+%',           # –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            r'\d+[\.,]\d+',    # –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
            r'\d{1,3}[,\s]?\d{3}',  # –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
            r'\$\d+',          # –¥–µ–Ω—å–≥–∏
            r'\d+‚ÇΩ',           # —Ä—É–±–ª–∏
        ]
        
        for pattern in number_patterns:
            entities["numbers"].extend(re.findall(pattern, text))
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        name_pattern = r'\b[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\b'
        entities["names"] = re.findall(name_pattern, text)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        action_keywords = ["—Ä–µ—à–∏–ª–∏", "–ø–ª–∞–Ω–∏—Ä—É–µ–º", "—Å–¥–µ–ª–∞–µ–º", "–Ω–∞—á–Ω–µ–º", "–∑–∞–ø—É—Å—Ç–∏–º", "—Ä–µ–∞–ª–∏–∑—É–µ–º", "–æ–±—Å—É–¥–∏–º"]
        decision_keywords = ["—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–≤–æ–¥", "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "–∏—Ç–æ–≥", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å"]
        
        sentences = text.split('.')
        for sentence in sentences:
            sentence_lower = sentence.lower().strip()
            if any(keyword in sentence_lower for keyword in action_keywords):
                entities["actions"].append(sentence.strip())
            if any(keyword in sentence_lower for keyword in decision_keywords):
                entities["decisions"].append(sentence.strip())
        
        return entities
    
    async def smart_summarize(self, text: str, source_type: str = "text", 
                            source_name: str = "", compression_ratio: float = 0.3) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = self.analyze_content_type(text, source_type)
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
            entities = self.extract_key_entities(text)
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
            insights_prompt = self._create_insights_prompt(text, entities, compression_ratio)
            
            insights_response = self.groq_client.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤. –í—ã–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥—ã."
                    },
                    {
                        "role": "user",
                        "content": insights_prompt
                    }
                ],
                model="llama-3.3-70b-versatile",
                max_tokens=500,
                temperature=0.1
            )
            
            key_insights = insights_response.choices[0].message.content.strip() if insights_response.choices[0].message.content else "–ù–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤"
            
            return {
                "content_type": content_type,
                "key_insights": key_insights,
                "entities": entities
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "content_type": "unknown",
                "key_insights": f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "entities": {}
            }
    
    def _create_specialized_prompt(self, text: str, content_type: str, entities: Dict, compression_ratio: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        base_requirements = f"""
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Å–∂–∞—Ç–∏–µ: {compression_ratio:.0%}).
–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""
        
        type_specific_formats = {
            "meeting": """
üìã **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏ –∑–∞–¥–∞—á–∏ (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "lecture": """
üí° **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "news": """
üì∞ **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –°—É—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (2-3 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "discussion": """
üí¨ **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –º–Ω–µ–Ω–∏—è (3-4 –ø—É–Ω–∫—Ç–∞) 
‚Ä¢ –û–±–ª–∞—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–∏—è –∏ —Å–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "interview": """
üé§ **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–∑–∏—Ü–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –í–∞–∂–Ω—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è –∏ —Ñ–∞–∫—Ç—ã (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "presentation": """
üìä **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "instruction": """
üìñ **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –í–∞–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "review": """
‚≠ê **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏ –º–Ω–µ–Ω–∏—è (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –ü–ª—é—Å—ã, –º–∏–Ω—É—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (2-3 –ø—É–Ω–∫—Ç–∞)
""",
            
            "general": """
üìã **–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:**
‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∏–¥–µ–∏ (3-4 –ø—É–Ω–∫—Ç–∞)
‚Ä¢ –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (2-3 –ø—É–Ω–∫—Ç–∞)
"""
        }
        
        format_instruction = type_specific_formats.get(content_type, type_specific_formats["general"])
        
        prompt = f"""{base_requirements}

{format_instruction}

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Ä–µ–∑—é–º–µ, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:
{text}"""
        
        return prompt
    
    def _create_insights_prompt(self, text: str, entities: Dict, compression_ratio: float = 0.3) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è"""
        
        entities_context = ""
        if entities["dates"]:
            entities_context += f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(entities['dates'][:3])}\n"
        if entities["numbers"]:
            entities_context += f"–í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: {', '.join(entities['numbers'][:5])}\n"
        if entities["names"]:
            entities_context += f"–£–ø–æ–º—è–Ω—É—Ç—ã–µ –∏–º–µ–Ω–∞: {', '.join(entities['names'][:3])}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
        if compression_ratio <= 0.1:  # 10% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            max_insights = 2
            detail_level = "—Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ"
        elif compression_ratio <= 0.3:  # 30% - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
            max_insights = 3
            detail_level = "–∫–ª—é—á–µ–≤—ã–µ"
        else:  # 50% - –ø–æ–¥—Ä–æ–±–Ω–æ–µ
            max_insights = 4
            detail_level = "–≤–∞–∂–Ω—ã–µ"
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–∏ –¢–û–õ–¨–ö–û {detail_level} –∏–Ω—Å–∞–π—Ç—ã.

{entities_context}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üéØ **–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:**
‚Ä¢ –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –≤—ã–≤–æ–¥
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ
‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
{"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞—á–∏–º—ã–π –∏–Ω—Å–∞–π—Ç" if max_insights >= 4 else ""}

–ú–∞–∫—Å–∏–º—É–º {max_insights} –ø—É–Ω–∫—Ç–æ–≤. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∑–Ω–∞—á–∏–º—ã–º.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{text}"""
        
        return prompt
    
    def format_smart_response(self, result: Dict, source_info: str, original_length: int, 
                            processing_time: float = 0) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        
        content_type_names = {
            "meeting": "–≤—Å—Ç—Ä–µ—á–∏/—Å–æ–±—Ä–∞–Ω–∏—è",
            "lecture": "–ª–µ–∫—Ü–∏–∏/—É—Ä–æ–∫–∞", 
            "news": "–Ω–æ–≤–æ—Å—Ç–µ–π",
            "interview": "–∏–Ω—Ç–µ—Ä–≤—å—é",
            "presentation": "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
            "discussion": "–æ–±—Å—É–∂–¥–µ–Ω–∏—è/–¥–∏—Å–∫—É—Å—Å–∏–∏",
            "instruction": "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
            "review": "–æ–±–∑–æ—Ä–∞/—Ä–µ—Ü–µ–Ω–∑–∏–∏",
            "general": "–æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        }
        
        content_type_display = content_type_names.get(result["content_type"], "—Ç–µ–∫—Å—Ç–∞")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        response = f"""üß† **–£–º–Ω–æ–µ —Ä–µ–∑—é–º–µ {content_type_display}**

{result["key_insights"]}"""
        
        # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        summary_length = len(result["key_insights"])
        compression_ratio = summary_length / original_length if original_length > 0 else 0
        
        response += f"""

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {original_length:,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –£–º–Ω–æ–µ —Ä–µ–∑—é–º–µ: {summary_length:,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ: {compression_ratio:.1%}"""
        
        if processing_time > 0:
            response += f"\n‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"
            
        return response