#!/usr/bin/env python3
"""
Simple Telegram Bot –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram Bot API
"""

import logging
import asyncio
import json
import time
import re
from datetime import datetime
from typing import Dict, Set, Optional
import os
import sys
import aiohttp
import sqlite3
from groq import Groq
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
import validators
from urllib.parse import urlparse
# from readability import parse  # –£–±—Ä–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
from youtube_processor import YouTubeProcessor
from file_processor import FileProcessor
from audio_processor import AudioProcessor
from smart_summarizer import SmartSummarizer
from ui_keyboards import keyboards, callback_parser
from user_settings import UserSettingsManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# HTML –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGE_HTML = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, —Å—Å—ã–ª–∫–∏, –≤–∏–¥–µ–æ –∏ <b>–¥–∞–∂–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ/–∞—É–¥–∏–æ</b> –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –≤—ã–∂–∏–º–∫–∏. –≠–∫–æ–Ω–æ–º–ª—é —Ç–≤–æ—ë –≤—Ä–µ–º—è ‚Äî –æ—Å—Ç–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ.

üß† <b>–ß—Ç–æ —É–º–µ—é:</b>
‚Ä¢ üìù –¢–µ–∫—Å—Ç—ã –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤—ã–¥–µ–ª—é —Å—É—Ç—å –∏ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã
‚Ä¢ üåê –°—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ç–∞—â—É –≥–ª–∞–≤–Ω–æ–µ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
‚Ä¢ ‚ñ∂Ô∏è YouTube (–¥–æ 2 —á–∞—Å–æ–≤) ‚Äî —Å–¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏ –ø–æ —Å—É–±—Ç–∏—Ç—Ä–∞–º
‚Ä¢ üìé –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOCX, DOC, TXT (–¥–æ 20 MB) ‚Äî –≤–µ—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
‚Ä¢ üó£Ô∏è <b>–ê—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ</b> ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –≤—ã–¥–∞–º –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (—É–¥–æ–±–Ω–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á –∏ –∑–∞–º–µ—Ç–æ–∫)

üåç <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞:</b> –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ

üéõ <b>–ì–∏–±–∫–∞—è –¥–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏:</b> –∏—Å–ø–æ–ª—å–∑—É–π <code>/10</code>, <code>/30</code>, <code>/50</code> ‚Äî –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è 10%/30%/50%

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ª—É—á–∏ –≤—ã–∂–∏–º–∫—É
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏
‚Ä¢ –°–∫–∏–Ω—å YouTube-—Å—Å—ã–ª–∫—É ‚Äî –ø–æ–ª—É—á–∏—à—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—à—å –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –≤–µ—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ/–∞—É–¥–∏–æ ‚Äî –ø—Ä–∏—à–ª—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç + –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üî• Powered by <b>Llama 3.3 70B</b> ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∏–ª—å–Ω–µ–π—à–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!"""

class SimpleTelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.groq_api_key = os.getenv('GROQ_API_KEY')
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Groq –∫–ª–∏–µ–Ω—Ç–∞
        self.groq_client = None
        if self.groq_api_key:
            try:
                self.groq_client = Groq(api_key=self.groq_api_key)
                logger.info("Groq API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Groq API: {e}")
        
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram API
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        self.user_requests: Dict[int, list] = {}
        self.processing_users: Set[int] = set()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        self.user_states: Dict[int, dict] = {}
        self.user_settings: Dict[int, dict] = {}
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        self.user_messages_buffer: Dict[int, list] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import DatabaseManager
        database_url = os.getenv('DATABASE_URL', 'sqlite:///bot_database.db')
        self.db = DatabaseManager(database_url)
        self.db.init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_settings_manager = UserSettingsManager(self.db)
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è smart –∫–Ω–æ–ø–∫–∏
        self.user_last_context: Dict[int, dict] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.youtube_processor = YouTubeProcessor(groq_client=self.groq_client)
        logger.info("YouTube –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.file_processor = FileProcessor()
        logger.info("–§–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if self.groq_client:
            self.audio_processor = AudioProcessor(groq_client=self.groq_client)
            logger.info("–ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.audio_processor = None
            logger.warning("–ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Groq API key")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
        if self.groq_client:
            self.smart_summarizer = SmartSummarizer(groq_client=self.groq_client)
            logger.info("–£–º–Ω—ã–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.smart_summarizer = None
            logger.warning("–£–º–Ω—ã–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Groq API key")
        
        logger.info("Simple Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_urls_from_message(self, text: str) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        urls = re.findall(url_pattern, text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ URL
        valid_urls = []
        for url in urls:
            if validators.url(url):
                valid_urls.append(url)
        
        return valid_urls
    
    def extract_webpage_content(self, url: str, timeout: int = 30) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
            response = requests.get(url, headers=headers, timeout=timeout, allow_redirects=True)
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if len(response.content) > 5 * 1024 * 1024:
                raise Exception("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ HTML
            soup = BeautifulSoup(response.content, 'lxml')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title_tag = soup.find('title')
            title = title_tag.get_text().strip() if title_tag else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Cloudflare –∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            cloudflare_indicators = [
                'just a moment', 'challenge-platform', 'cloudflare',
                'please wait while your request is being verified',
                'enable javascript and cookies to continue',
                '_cf_chl_opt', 'cf-browser-verification'
            ]
            
            page_text = response.text.lower()
            if any(indicator in page_text for indicator in cloudflare_indicators):
                return {
                    'success': False,
                    'error': f'–°–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±–æ—Ç–æ–≤ (Cloudflare). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫.',
                    'title': title,
                    'blocked': True
                }
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for element in soup(['script', 'style', 'nav', 'header', 'footer', 'aside', 'noscript']):
                element.decompose()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            main_content = None
            content_selectors = [
                'article', 'main', '.content', '#content', '.post-content', 
                '.article-content', '.entry-content', '.post-body', '.story-body',
                '.news-content', '.article-body'
            ]
            
            for selector in content_selectors:
                content_element = soup.select_one(selector)
                if content_element and len(content_element.get_text().strip()) > 200:
                    main_content = content_element
                    break
            
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            if main_content:
                text = main_content.get_text()
            else:
                text = soup.get_text()
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            lines = (line.strip() for line in text.splitlines())
            chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
            text = ' '.join(chunk for chunk in chunks if chunk)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if len(text) < 100:
                return {
                    'success': False,
                    'error': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å',
                    'title': title,
                    'content_too_short': True
                }
            
            return {
                'title': title,
                'content': text,
                'url': url,
                'success': True
            }
            
        except requests.exceptions.Timeout:
            return {'success': False, 'error': '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (—Å–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ)'}
        except requests.exceptions.ConnectionError:
            return {'success': False, 'error': '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞)'}
        except requests.exceptions.HTTPError as e:
            status_code = e.response.status_code if e.response else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
            error_msg = {
                403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (—Å–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤)',
                404: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                429: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø)',
                500: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                502: '–ü–ª–æ—Ö–æ–π —à–ª—é–∑',
                503: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }.get(status_code, f'–û—à–∏–±–∫–∞ HTTP {status_code}')
            return {'success': False, 'error': error_msg}
        except Exception as e:
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)[:100]}...'}
    
    def is_url_allowed(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        blocked_domains = [
            'facebook.com', 'instagram.com', 'twitter.com', 'x.com',
            'youtube.com', 'tiktok.com', 'vk.com'  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å–ª–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
        ]
        
        domain = urlparse(url).netloc.lower()
        
        for blocked in blocked_domains:
            if blocked in domain:
                return False
        return True
    
    def simple_text_summary(self, text: str, max_sentences: int = 3) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ AI - –±–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 20]
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        summary_sentences = sentences[:max_sentences]
        summary = '. '.join(summary_sentences)
        
        if len(summary) > 500:
            summary = summary[:500] + "..."
        
        return summary
    
    def get_user_compression_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = self.db.get_user_settings(user_id)
            return settings.get('compression_level', 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30%
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 30

    def update_user_compression_level(self, user_id: int, compression_level: int, username: str = ""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"SimpleTelegramBot: –Ω–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {compression_level}%")
            self.db.update_compression_level(user_id, compression_level, username)
            logger.info(f"SimpleTelegramBot: —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {compression_level}%")
        except Exception as e:
            logger.error(f"SimpleTelegramBot: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise


    
    async def send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None, reply_markup: Optional[dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text[:4096]  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        if parse_mode:
            data["parse_mode"] = parse_mode
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        logger.info(f"üì§ SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º json=data –∫–æ–≥–¥–∞ –µ—Å—Ç—å reply_markup, –∏–Ω–∞—á–µ data=data
                if reply_markup:
                    async with session.post(url, json=data) as response:
                        result = await response.json()
                else:
                    async with session.post(url, data=data) as response:
                        result = await response.json()
                        
                if result.get("ok"):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {result}")
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return None
    

    
    def check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id] 
            if now - req_time < 60
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
        if len(self.user_requests[user_id]) >= 10:
            return False
        
        self.user_requests[user_id].append(now)
        return True
    
    async def summarize_text(self, text: str, target_ratio: float = 0.3) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Groq API"""
        if not self.groq_client:
            return "‚ùå Groq API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ API
            try:
                import re
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)  # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                text = re.sub(r'\s+', ' ', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                text = text.strip()
                
                if not text:
                    return "‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"
                    
            except Exception as norm_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {norm_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            
            target_length = int(len(text) * target_ratio)
            
            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ: {target_ratio:.0%})
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å bullet points (‚Ä¢)
- –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∞–º–º–∞—Ä–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π

–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{text}"""
            
            response = self.groq_client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama-3.3-70b-versatile",
                temperature=0.3,
                max_tokens=2000,
                top_p=0.9,
                stream=False
            )
            
            if response.choices and response.choices[0].message:
                summary = response.choices[0].message.content
                if summary:
                    return summary.strip()
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {traceback.format_exc()}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)[:100]}"
    
    async def handle_start_command(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update["message"]["chat"]["id"]
        user = update["message"]["from"]
        user_id = user.get("id")
        username = user.get("username", "")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        if user_settings.get('first_interaction', True):
            self.user_settings_manager.mark_first_interaction_complete(user_id)
        
        # –°–æ–∑–¥–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        reply_keyboard = keyboards.build_reply_keyboard(lang)
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        inline_keyboard = keyboards.build_main_menu(user_settings)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–µ–∏–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
        await self.send_message(chat_id, WELCOME_MESSAGE_HTML, parse_mode="HTML", reply_markup=reply_keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        menu_text = keyboards.get_text('menu_title', lang)
        await self.send_message(chat_id, menu_text, reply_markup=inline_keyboard)
    
    async def handle_help_command(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —è–∑—ã–∫–∞
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        help_text = """üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

üî• **–ë–´–°–¢–†–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ 30%
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

üîó **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –í–ï–ë-–°–¢–†–ê–ù–ò–¶:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –•–∞–±—Ä, –†–ë–ö, –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –±–ª–æ–≥–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏ –∑–∞ —Ä–∞–∑

üé• **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø YOUTUBE –í–ò–î–ï–û:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Üí —Ä–µ–∑—é–º–µ –≤–∏–¥–µ–æ
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏
‚Ä¢ ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: –¥–æ 2 —á–∞—Å–æ–≤ (120 –º–∏–Ω—É—Ç)

üìÑ **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í:**
‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB (–ª–∏–º–∏—Ç Telegram)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

üéµ **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –ê–£–î–ò–û:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —Ä–µ–∑—é–º–µ —Ä–µ—á–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: MP3, WAV, M4A, OGG, FLAC, AAC, OPUS
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50MB, –¥–æ 1 —á–∞—Å–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö

‚ö° **–ö–û–ú–ê–ù–î–´ –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò:**
‚Ä¢ /10 ‚Üí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (10%)
‚Ä¢ /30 ‚Üí —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (30%)  
‚Ä¢ /50 ‚Üí —É–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (50%)

üß† **–£–ú–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:**
‚Ä¢ /smart ‚Üí –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

üí¨ **–¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ: 10%, 30% –∏–ª–∏ 50%
‚Ä¢ –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

üìä **–î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ /stats ‚Üí –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /help ‚Üí —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ emoji –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∂–∞—Ç–∏—è
‚Ä¢ –î–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Llama 3.3 70B

üìã **–ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        back_keyboard = keyboards.build_back_menu(lang)
        await self.send_message(chat_id, help_text, reply_markup=back_keyboard)
    
    async def handle_smart_mode_command(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /smart - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —É–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        username = update["message"]["from"].get("username", "")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —É–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        new_mode = self.user_settings_manager.toggle_smart_mode(user_id, username)
        
        if new_mode:
            mode_text = """üß† **–£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞!**

–¢–µ–ø–µ—Ä—å –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏:

üéØ **–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ –∏–Ω—Å–∞–π—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å—é:**
‚Ä¢ /10 ‚Üí 2 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ)
‚Ä¢ /30 ‚Üí 3 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–∞ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
‚Ä¢ /50 ‚Üí 4 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥–∏–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏!

_–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /smart_"""
        else:
            mode_text = """üìù **–û–±—ã—á–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

–¢–µ–ø–µ—Ä—å –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Å–∂–∞—Ç–∏—è (10%, 30%, 50%).

–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å —É–º–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ /smart"""

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        back_keyboard = keyboards.build_back_menu(lang)
        
        await self.send_message(chat_id, mode_text, reply_markup=back_keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–≤–∫–ª—é—á–∏–ª' if new_mode else '–æ—Ç–∫–ª—é—á–∏–ª'} —É–º–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
    
    async def handle_stats_command(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        try:
            user_stats = self.db.get_user_stats(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user_stats = {
                'total_requests': 0,
                'total_chars': 0,
                'total_summary_chars': 0,
                'avg_compression': 0,
                'first_request': None
            }
        
        stats_text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {user_stats['total_requests']}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_stats['total_chars']:,}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–∞–º–º–∞—Ä–∏: {user_stats['total_summary_chars']:,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ: {user_stats['avg_compression']:.1%}
‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {user_stats['first_request'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π!"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —è–∑—ã–∫–∞
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        back_keyboard = keyboards.build_back_menu(lang)
        await self.send_message(chat_id, stats_text, reply_markup=back_keyboard)

    async def handle_compression_command(self, update: dict, compression_level: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è (/10, /30, /50 –∏–ª–∏ 10%, 30%, 50%)"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        username = update["message"]["from"].get("username", "")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
            success = self.user_settings_manager.set_compression_level(user_id, compression_level, username)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                user_settings = self.user_settings_manager.get_user_settings(user_id)
                lang = user_settings.get('language', 'ru').lower()
                
                compression_text = f"{compression_level}%"
                confirmation_text = f"""‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {compression_text}

–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç—ã –±—É–¥—É—Ç —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —É—Ä–æ–≤–Ω–µ–º —Å–∂–∞—Ç–∏—è {compression_text}."""
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
                menu_keyboard = keyboards.build_main_menu(user_settings)
                await self.send_message(chat_id, confirmation_text, reply_markup=menu_keyboard)
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –Ω–∞ {compression_level}%")
            else:
                await self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–∂–∞—Ç–∏—è {compression_level}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_callback_query(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        callback_query = update.get("callback_query")
        if not callback_query:
            return
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–ª—è —É–±–∏—Ä–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await self.answer_callback_query(callback_query["id"])
        
        user_id = callback_query["from"]["id"]
        username = callback_query["from"].get("username", "")
        chat_id = callback_query["message"]["chat"]["id"]
        message_id = callback_query["message"]["message_id"]
        callback_data = callback_query["data"]
        
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
        
        # –ü–∞—Ä—Å–∏–º callback_data
        parsed = callback_parser.parse(callback_data)
        action = parsed.get('action')
        
        try:
            if action == 'smart':
                await self.handle_callback_smart(chat_id, user_id, username, message_id)
            
            elif action == 'cmp':  # compression
                level = int(parsed.get('sub', '30'))
                await self.handle_callback_compression(chat_id, user_id, username, message_id, level)
            
            elif action == 'lang':  # language
                sub_action = parsed.get('sub', '')
                if sub_action == 'toggle':
                    await self.handle_callback_language_toggle(chat_id, user_id, username, message_id)
            
            elif action == 'stats':
                await self.handle_callback_stats(chat_id, user_id, message_id)
            
            elif action == 'help':
                await self.handle_callback_help(chat_id, user_id, message_id)
            
            elif action == 'menu':
                await self.handle_callback_menu(chat_id, user_id, message_id)
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback action: {action}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await self.edit_message(
                chat_id, message_id, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def answer_callback_query(self, callback_query_id: str, text: str = None, show_alert: bool = False):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback_query"""
        try:
            url = f"{self.base_url}/answerCallbackQuery"
            data = {"callback_query_id": callback_query_id}
            
            if text:
                data["text"] = text
            if show_alert:
                data["show_alert"] = show_alert
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    return await response.json()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            return None
    
    async def handle_callback_smart(self, chat_id: int, user_id: int, username: str, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è smart —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        if user_id not in self.user_last_context:
            user_settings = self.user_settings_manager.get_user_settings(user_id)
            lang = user_settings.get('language', 'ru').lower()
            
            no_context_text = {
                'ru': "üß† –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—É–¥–∏–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                'en': "üß† Smart Summary\n\nSend text, document, link or audio, then click this button for intelligent processing."
            }.get(lang, "üß† –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–º–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")
            
            menu_keyboard = keyboards.build_main_menu(user_settings)
            await self.edit_message(chat_id, message_id, no_context_text, reply_markup=menu_keyboard)
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
        context = self.user_last_context[user_id]
        
        processing_text = "üß† –ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é..."
        await self.edit_message(chat_id, message_id, processing_text)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ smart —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        await asyncio.sleep(1)
        
        result_text = "üß† –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n[–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å]"
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        menu_keyboard = keyboards.build_main_menu(user_settings)
        
        await self.edit_message(chat_id, message_id, result_text, reply_markup=menu_keyboard)
    
    async def handle_callback_compression(self, chat_id: int, user_id: int, username: str, message_id: int, level: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è"""
        success = self.user_settings_manager.set_compression_level(user_id, level, username)
        
        if success:
            user_settings = self.user_settings_manager.get_user_settings(user_id)
            lang = user_settings.get('language', 'ru').lower()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
            menu_keyboard = keyboards.build_main_menu(user_settings)
            
            confirmation_text = {
                'ru': f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {level}%\n\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                'en': f"‚úÖ Compression level: {level}%\n\nüìã Main menu"
            }.get(lang, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {level}%")
            
            await self.edit_message(chat_id, message_id, confirmation_text, reply_markup=menu_keyboard)
        else:
            await self.edit_message(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_callback_language_toggle(self, chat_id: int, user_id: int, username: str, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        new_lang = self.user_settings_manager.toggle_language(user_id, username)
        
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        menu_keyboard = keyboards.build_main_menu(user_settings)
        
        confirmation_text = {
            'ru': "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            'en': "‚úÖ Language changed to English\n\nüìã Main menu"
        }.get(new_lang, "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω")
        
        await self.edit_message(chat_id, message_id, confirmation_text, reply_markup=menu_keyboard)
    
    async def handle_callback_stats(self, chat_id: int, user_id: int, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_stats = self.db.get_user_stats(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user_stats = {
                'total_requests': 0,
                'total_chars': 0, 
                'total_summary_chars': 0,
                'avg_compression': 0,
                'first_request': None
            }
        
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        stats_text = f"""üìä {'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' if lang == 'ru' else 'Statistics'}:

‚Ä¢ {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤' if lang == 'ru' else 'Processed texts'}: {user_stats['total_requests']}
‚Ä¢ {'–°–∏–º–≤–æ–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if lang == 'ru' else 'Characters processed'}: {user_stats['total_chars']:,}
‚Ä¢ {'–°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–∞–º–º–∞—Ä–∏' if lang == 'ru' else 'Summary characters'}: {user_stats['total_summary_chars']:,}
‚Ä¢ {'–°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ' if lang == 'ru' else 'Average compression'}: {user_stats['avg_compression']:.1%}
‚Ä¢ {'–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å' if lang == 'ru' else 'First request'}: {user_stats['first_request'] or ('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' if lang == 'ru' else 'No data')}"""
        
        back_keyboard = keyboards.build_back_menu(lang)
        await self.edit_message(chat_id, message_id, stats_text, reply_markup=back_keyboard)
    
    async def handle_callback_help(self, chat_id: int, user_id: int, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏"""
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        if lang == 'en':
            help_text = """üìñ How to use the bot:

üî• **QUICK SUMMARIZATION:**
‚Ä¢ Send text ‚Üí get 30% compression
‚Ä¢ Forward a message ‚Üí automatic processing

üîó **WEB PAGE SUMMARIZATION:**
‚Ä¢ Send article link ‚Üí get brief summary
‚Ä¢ Support: news sites, blogs, articles

üé• **YOUTUBE VIDEO SUMMARIZATION:**  
‚Ä¢ Send YouTube link ‚Üí video summary
‚Ä¢ Extract subtitles and description
‚Ä¢ Up to 2 hours duration

üìÑ **DOCUMENT SUMMARIZATION:**
‚Ä¢ Attach file ‚Üí get structured summary
‚Ä¢ Formats: PDF, DOCX, DOC, TXT, PPTX
‚Ä¢ Max size: 20MB

üéµ **AUDIO SUMMARIZATION:**
‚Ä¢ Send audio/voice ‚Üí speech summary
‚Ä¢ Formats: MP3, WAV, M4A, OGG, etc
‚Ä¢ Max: 50MB, up to 1 hour

‚ö° **COMPRESSION LEVELS:**
‚Ä¢ 10% ‚Üí maximum compression
‚Ä¢ 30% ‚Üí balanced compression  
‚Ä¢ 50% ‚Üí moderate compression

üìã **USE BUTTONS:** Use interface buttons for quick access!"""
        else:
            help_text = """üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

üî• **–ë–´–°–¢–†–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ 30%
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

üîó **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –í–ï–ë-–°–¢–†–ê–ù–ò–¶:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã, –±–ª–æ–≥–∏, —Å—Ç–∞—Ç—å–∏

üé• **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø YOUTUBE:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Üí —Ä–µ–∑—é–º–µ –≤–∏–¥–µ–æ
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –î–æ 2 —á–∞—Å–æ–≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

üìÑ **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í:**
‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—é–º–µ
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT, PPTX
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 20MB

üéµ **–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø –ê–£–î–ò–û:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí —Ä–µ–∑—é–º–µ —Ä–µ—á–∏
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, OGG –∏ –¥—Ä.
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 50MB, –¥–æ 1 —á–∞—Å–∞

‚ö° **–£–†–û–í–ù–ò –°–ñ–ê–¢–ò–Ø:**
‚Ä¢ 10% ‚Üí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
‚Ä¢ 30% ‚Üí —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
‚Ä¢ 50% ‚Üí —É–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ

üìã **–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ù–û–ü–ö–ò:** –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"""
        
        back_keyboard = keyboards.build_back_menu(lang)
        await self.edit_message(chat_id, message_id, help_text, reply_markup=back_keyboard)
    
    async def handle_callback_menu(self, chat_id: int, user_id: int, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        menu_text = keyboards.get_text('menu_title', lang)
        menu_keyboard = keyboards.build_main_menu(user_settings)
        
        await self.edit_message(chat_id, message_id, menu_text, reply_markup=menu_keyboard)
    
    async def handle_menu_button(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' –∏–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = self.user_settings_manager.get_user_settings(user_id)
        lang = user_settings.get('language', 'ru').lower()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_text = keyboards.get_text('menu_title', lang)
        menu_keyboard = keyboards.build_main_menu(user_settings)
        
        await self.send_message(chat_id, menu_text, reply_markup=menu_keyboard)
    

    

    

    
    async def send_text_request(self, chat_id: int, user_id: int):
        """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        settings = self.user_settings[user_id]
        compression_text = {"10": "10%", "30": "30%", "50": "50%"}[settings["compression"]]
        format_text = {
            "bullets": "–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫", 
            "paragraph": "—Å–≤—è–∑–Ω—ã–π –∞–±–∑–∞—Ü", 
            "keywords": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
        }[settings["format"]]
        
        text = f"""‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_text}
‚Ä¢ –§–æ—Ä–º–∞—Ç: {format_text}

üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º:

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ —á–∞—Ç
2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ - —è –∏—Ö –æ–±—ä–µ–¥–∏–Ω—é

–ú–∏–Ω–∏–º—É–º: 100 —Å–∏–º–≤–æ–ª–æ–≤
–ú–∞–∫—Å–∏–º—É–º: 10,000 —Å–∏–º–≤–æ–ª–æ–≤

üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"""
        
        await self.send_message(chat_id, text)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.user_states[user_id]["step"] = "waiting_text"
    

    
    async def handle_custom_summarize_text(self, update: dict, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_messages_buffer[user_id].append({
                "text": text,
                "timestamp": datetime.now(),
                "is_forwarded": "forward_from" in update["message"] or "forward_from_chat" in update["message"]
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_chars = sum(len(msg["text"]) for msg in self.user_messages_buffer[user_id])
            
            if len(self.user_messages_buffer[user_id]) == 1 and total_chars >= 100:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                await self.process_custom_summarization(chat_id, user_id)
            elif len(self.user_messages_buffer[user_id]) > 1:
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ —Å–±–æ—Ä
                await self.send_message(chat_id, 
                    f"üìù –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.user_messages_buffer[user_id])}\n"
                    f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: 'ok' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –µ—â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            else:
                # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤
                await self.send_message(chat_id, 
                    f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"–ú–∏–Ω–∏–º—É–º: 100 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    async def process_custom_summarization(self, chat_id: int, user_id: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            if user_id not in self.user_settings or user_id not in self.user_messages_buffer:
                await self.send_message(chat_id, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            combined_text = ""
            for msg in self.user_messages_buffer[user_id]:
                if combined_text:
                    combined_text += "\n\n"
                combined_text += msg["text"]
            
            total_chars = len(combined_text)
            
            if total_chars < 100:
                await self.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ({total_chars} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∏–Ω–∏–º—É–º: 100 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
                
            if total_chars > 10000:
                await self.send_message(chat_id, f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ({total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º: 10,000 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await self.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = self.user_settings[user_id]
            compression_ratio = int(settings["compression"]) / 100.0
            format_type = settings["format"]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await self.custom_summarize_text(combined_text, compression_ratio, format_type)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if processing_msg:
                await self.delete_message(chat_id, processing_msg.get("message_id"))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            format_emoji = {"bullets": "‚Ä¢", "paragraph": "üìÑ", "keywords": "üè∑Ô∏è"}[format_type]
            compression_text = f"{settings['compression']}%"
            
            response_text = f"""{format_emoji} **–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è**
üìä –°–∂–∞—Ç–∏–µ: {compression_text} | üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤

{summary}

‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""
            
            await self.send_message(chat_id, response_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                # username = update["message"]["from"].get("username", "")
                self.db.save_user_request(user_id, "", total_chars, len(summary), 0.0, 'groq')
            except Exception as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.user_settings:
                del self.user_settings[user_id]
            if user_id in self.user_messages_buffer:
                del self.user_messages_buffer[user_id]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def custom_summarize_text(self, text: str, compression_ratio: float, format_type: str) -> str:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            target_length = int(len(text) * compression_ratio)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            format_instructions = {
                "bullets": """- –°–æ–∑–¥–∞–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π bullet points (‚Ä¢) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
- –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –º—ã—Å–ª—å—é
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ""",
                
                "paragraph": """- –°–æ–∑–¥–∞–π —Å–≤—è–∑–Ω—ã–π –∞–±–∑–∞—Ü –≤ –≤–∏–¥–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–ª–∞–≤–Ω–æ
- –°–æ—Ö—Ä–∞–Ω–∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–≤—è–∑–∫–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏""",
                
                "keywords": """- –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
- –í—ã–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ/—Ç–µ—Ä–º–∏–Ω - –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
- –†–∞—Å–ø–æ–ª–æ–∂–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"""
            }
            
            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ: {compression_ratio:.0%})
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
{format_instructions[format_type]}

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∞–º–º–∞—Ä–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
{text}"""
            
            if self.groq_client:
                response = self.groq_client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama-3.3-70b-versatile",
                temperature=0.3,
                max_tokens=2000,
                top_p=0.9,
                stream=False
            )
            
            if response.choices and response.choices[0].message:
                summary = response.choices[0].message.content
                if summary:
                    return summary.strip()
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)[:100]}"
    
    async def handle_text_message(self, update: dict, message_text: Optional[str] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update["message"]["chat"]["id"]
        user = update["message"]["from"]
        user_id = user["id"]
        username = user.get("username", "")
        

        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_text:
            text = message_text
        else:
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            def extract_text_from_message(msg):
                text = None
                if "text" in msg:
                    text = msg["text"]
                elif "caption" in msg:
                    text = msg["caption"]
                
                logger.info(f"DEBUG handle_text_message: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
                if text:
                    try:
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
                        import re
                        # –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
                        text = '\n'.join(line.strip() for line in text.split('\n'))
                        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
                        text = re.sub(r' +', ' ', text)
                        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
                        text = re.sub(r'\n{3,}', '\n\n', text)
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        text = text.strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—Å—è —Å–º—ã—Å–ª–æ–≤–æ–π —Ç–µ–∫—Å—Ç
                        # –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)
                        clean_text = text.replace(' ', '').replace('\n', '').replace('\t', '')
                        if text.startswith('/'):
                            logger.info(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä –≤ handle_text_message: '{text}'")
                        elif len(clean_text) < 10:
                            logger.warning(f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: '{text[:100]}'")
                            return None
                            
                        logger.info(f"–¢–µ–∫—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: –±—ã–ª–æ {len(msg.get('text', msg.get('caption', '')))}, —Å—Ç–∞–ª–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return text
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                        return text.strip() if text else None
                
                return None
            
            text = extract_text_from_message(update["message"])
            if not text:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}), –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) < 50:
            await self.send_message(chat_id, f"üìù –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_response = await self.send_message(chat_id, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            processing_message_id = processing_response.get("result", {}).get("message_id") if processing_response else None
            
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_compression_level = self.get_user_compression_level(user_id)
            target_ratio = user_compression_level / 100.0
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            summary = await self.summarize_text(text, target_ratio=target_ratio)
            
            processing_time = time.time() - start_time
            
            if summary and not summary.startswith("‚ùå"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    self.db.save_user_request(user_id, username, len(text), len(summary), processing_time, 'groq')
                except Exception as save_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                compression_ratio = len(summary) / len(text)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = f"""üìã –°–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ! (–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {user_compression_level}%)

{summary}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º–º–∞—Ä–∏: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"""
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)
                
                await self.send_message(chat_id, response_text)
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–∂–∞—Ç–∏–µ: {compression_ratio:.1%}")
                
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)
                
                await self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            
            await self.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)
    
    async def handle_document_message(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, DOC, TXT)"""
        try:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            username = message["from"].get("username", "")
            document = message["document"]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            if not self.check_user_rate_limit(user_id):
                await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if user_id in self.processing_users:
                await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.add(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_name = document.get("file_name", "unknown")
            file_size = document.get("file_size", 0)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file_name} ({file_size} –±–∞–π—Ç)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await self.send_message(chat_id, f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...")
            processing_message_id = processing_message.get("result", {}).get("message_id") if processing_message and processing_message.get("ok") else None
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram
                file_info_response = await self.get_file_info(document["file_id"])
                if not file_info_response or not file_info_response.get("ok"):
                    await self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                    return
                
                file_info = file_info_response["result"]
                file_path = f"https://api.telegram.org/file/bot{self.token}/{file_info['file_path']}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\nüì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_processor –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                download_result = await self.file_processor.download_telegram_file(
                    {"file_path": file_path}, file_name, file_size
                )
                
                if not download_result["success"]:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, f"‚ùå {download_result['error']}")
                    return
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                extension = download_result["file_extension"].lower()
                if extension == '.pdf':
                    progress_text = f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\nüîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç (PDF ‚Üí —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π + OCR)..."
                elif extension == '.pptx':
                    progress_text = f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: {file_name}\n\nüéØ –ò–∑–≤–ª–µ–∫–∞—é —Å–ª–∞–π–¥—ã –∏ –∑–∞–º–µ—Ç–∫–∏..."
                elif extension in ('.png', '.jpg', '.jpeg'):
                    progress_text = f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_name}\n\nüëÅÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç (OCR)..."
                else:
                    progress_text = f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\nüìù –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç..."
                
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, progress_text)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                text_result = self.file_processor.extract_text_from_file(
                    download_result["file_path"], 
                    download_result["file_extension"]
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.file_processor.cleanup_temp_file(download_result["temp_dir"])
                
                if not text_result["success"]:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, f"‚ùå {text_result['error']}")
                    return
                
                extracted_text = text_result["text"]
                extraction_method = text_result.get("method", "unknown")
                extraction_meta = text_result.get("meta", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if len(extracted_text) < 100:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, f"üìù –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n–ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                if "ocr" in extraction_method and extraction_meta.get("ocr_pages"):
                    ocr_info = f"üîé –†–µ–∂–∏–º: PDF ‚Üí OCR (—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {','.join(map(str, extraction_meta['ocr_pages']))})"
                elif extraction_method == "python-pptx" and extraction_meta.get("slides"):
                    slides_count = extraction_meta.get("total_slides", len(extraction_meta["slides"]))
                    ocr_info = f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {slides_count} —Å–ª–∞–π–¥–æ–≤"
                elif "ocr" in extraction_method:
                    ocr_info = f"üëÅÔ∏è –†–µ–∂–∏–º: OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)"
                else:
                    ocr_info = f"üìù –†–µ–∂–∏–º: {extraction_method}"
                
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}\n\n{ocr_info}\n\nü§ñ –°–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ...")
                
                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                compression_ratio = self.get_user_compression_level(user_id)
                
                # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                summary = await self.summarize_file_content(extracted_text, file_name, download_result["file_extension"], compression_ratio)
                
                if summary:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                    if extension == '.pptx':
                        icon = "üìä"
                        doc_type = "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
                    elif extension in ('.png', '.jpg', '.jpeg'):
                        icon = "üñºÔ∏è"
                        doc_type = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    else:
                        icon = "üìÑ"
                        doc_type = "–¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    extra_info = ""
                    if extraction_meta.get("ocr_pages"):
                        extra_info = f"\n‚Ä¢ OCR —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {', '.join(map(str, extraction_meta['ocr_pages']))}"
                    elif extraction_meta.get("total_slides"):
                        extra_info = f"\n‚Ä¢ –°–ª–∞–π–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {extraction_meta['slides_with_content']}/{extraction_meta['total_slides']}"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    response_text = f"""{icon} **–†–µ–∑—é–º–µ {doc_type}: {file_name}**

{summary}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(extracted_text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –†–µ–∑—é–º–µ: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤  
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.0%}
‚Ä¢ –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_method}{extra_info}"""
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    
                    await self.send_message(chat_id, response_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    try:
                        self.db.save_user_request(user_id, f"document:{file_name}", len(extracted_text), len(summary), 0.0, 'groq_document')
                    except Exception as save_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
                    
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç {file_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                else:
                    if processing_message_id:
                        await self.delete_message(chat_id, processing_message_id)
                    await self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                if processing_message_id:
                    await self.delete_message(chat_id, processing_message_id)
                await self.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)
    
    async def get_file_info(self, file_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API"""
        try:
            url = f"{self.base_url}/getFile"
            params = {"file_id": file_id}
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None
    
    async def _get_file_url(self, file_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–π–ª–∞ –æ—Ç Telegram API"""
        file_info_response = await self.get_file_info(file_id)
        if not file_info_response or not file_info_response.get("ok"):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
        
        file_info = file_info_response["result"]
        return f"https://api.telegram.org/file/bot{self.token}/{file_info['file_path']}"

    async def on_voice(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        voice = update["message"]["voice"]
        file_id = voice["file_id"]
        file_url = await self._get_file_url(file_id)
        await self._handle_audio(update, file_url, filename_hint="voice.ogg")

    async def on_audio(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        audio = update["message"]["audio"]
        file_id = audio["file_id"]
        name = audio.get("file_name") or "audio.mp3"
        file_url = await self._get_file_url(file_id)
        await self._handle_audio(update, file_url, filename_hint=name)

    async def on_audio_document(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        doc = update["message"]["document"]
        file_id = doc["file_id"]
        name = doc.get("file_name") or "audio.bin"
        file_url = await self._get_file_url(file_id)
        await self._handle_audio(update, file_url, filename_hint=name)

    async def _handle_audio(self, update: dict, file_url: str, filename_hint: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)
        
        msg = await self.send_message(chat_id, "üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ‚Ä¶ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å‚Ä¶")
        processing_message_id = msg.get("result", {}).get("message_id") if msg and msg.get("ok") else None
        
        try:
            if not self.audio_processor:
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, "‚ùå –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ—Ç Groq API –∫–ª—é—á–∞")
                else:
                    await self.send_message(chat_id, "‚ùå –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ—Ç Groq API –∫–ª—é—á–∞")
                return
            
            result = await self.audio_processor.process_audio_from_telegram(file_url, filename_hint)
            if not result.get("success"):
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, f"‚ùå {result.get('error')}")
                else:
                    await self.send_message(chat_id, f"‚ùå {result.get('error')}")
                return

            transcript = result["transcript"]
            duration = result.get("duration_sec")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if len(transcript) < 50:
                if processing_message_id:
                    await self.edit_message(chat_id, processing_message_id, 
                        f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è!\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n\nüìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcript}")
                else:
                    await self.send_message(chat_id, f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è!\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n\nüìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcript}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if processing_message_id:
                await self.edit_message(chat_id, processing_message_id, "üéß –°–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ‚Ä¶")

            # –ü–æ–ø—Ä–æ–±—É–µ–º SmartSummarizer, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ñ–æ–ª–ª–±–µ–∫
            summary = None
            if hasattr(self, "smart_summarizer") and self.smart_summarizer:
                try:
                    compression_level = self.get_user_compression_level(user_id)
                    target_ratio = compression_level / 100.0
                    
                    smart_result = await self.smart_summarizer.smart_summarize(
                        transcript, source_type="audio", 
                        source_name=filename_hint, 
                        compression_ratio=target_ratio
                    )
                    
                    if smart_result.get('success'):
                        summary = smart_result.get('summary', '')
                except Exception as e:
                    logger.warning(f"SmartSummarizer –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            if not summary and self.groq_client:
                # –§–æ–ª–ª–±–µ–∫ —á–µ—Ä–µ–∑ LLM Groq ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º
                prompt = (
                    "–°—É–º–º–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º (5‚Äì8 –ø—É–Ω–∫—Ç–æ–≤). "
                    "–°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è, —Ä–µ—à–µ–Ω–∏—è, –¥–∞—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã.\n\n"
                    f"–°–¢–ï–ù–û–ì–†–ê–ú–ú–ê:\n{transcript}"
                )
                resp = self.groq_client.chat.completions.create(
                    model="llama-3.3-70b-versatile",
                    temperature=0.2,
                    messages=[{"role":"user","content": prompt}]
                )
                summary = resp.choices[0].message.content.strip()
            elif not summary:
                # –ï—Å–ª–∏ –Ω–µ—Ç API - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
                summary = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–∞ ({len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤)"

            header = f"üéôÔ∏è –ê—É–¥–∏–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ({duration:.0f} —Å–µ–∫).\n\n"
            if processing_message_id:
                await self.edit_message(chat_id, processing_message_id, header + summary)
            else:
                await self.send_message(chat_id, header + summary)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                audio_duration = duration or 0.0  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ duration –Ω–µ None
                self.db.save_user_request(user_id, f"audio:{filename_hint}", len(transcript), len(summary), float(audio_duration), 'groq_whisper')
            except Exception as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
            
            logger.info(f"üéµ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞—É–¥–∏–æ {filename_hint} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}"
            if processing_message_id:
                await self.edit_message(chat_id, processing_message_id, error_msg)
            else:
                await self.send_message(chat_id, error_msg)
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    async def handle_audio_message(self, update: dict):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from utils.tg_audio import extract_audio_descriptor, get_audio_info_text, format_duration
        
        message = update["message"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∞—É–¥–∏–æ
        audio_descriptor = extract_audio_descriptor(message)
        
        if not audio_descriptor:
            await self.send_message(
                chat_id, 
                "üîç –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–Ø –Ω–µ –Ω–∞—à—ë–ª –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (voice)\n"
                "‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (audio)\n"
                "‚Ä¢ –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫—Ä—É–∂–æ—á–∫–∏ (video note)\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª."
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
        audio_info = get_audio_info_text(audio_descriptor)
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {audio_info}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(
                chat_id, 
                "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(
                chat_id, 
                "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_msg = await self.send_message(
            chat_id, 
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ‚Ä¶\n\n{audio_info}"
        )
        progress_message_id = progress_msg.get("result", {}).get("message_id") if progress_msg and progress_msg.get("ok") else None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            if not self.audio_processor:
                error_msg = "‚ùå –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Groq API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."
                if progress_message_id:
                    await self.edit_message(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message(
                        chat_id, 
                        progress_message_id, 
                        f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ): {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            file_url = await self._get_file_url(audio_descriptor["file_id"])
            filename_hint = audio_descriptor.get("file_name", "audio")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message(
                        chat_id, 
                        progress_message_id, 
                        f"üéõÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è): {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            result = await self.audio_processor.process_audio_from_telegram(file_url, filename_hint)
            
            if not result.get("success"):
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                if progress_message_id:
                    await self.edit_message(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message(
                        chat_id, 
                        progress_message_id, 
                        f"üìù –ì–æ—Ç–æ–≤–ª—é —Å–∞–º–º–∞—Ä–∏‚Ä¶\n\n{audio_info}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–∞–º–º–∞—Ä–∏): {e}")
            
            transcript = result["transcript"]
            duration = result.get("duration_sec")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if not transcript or len(transcript.strip()) < 10:
                error_msg = "‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∞—è –∑–∞–ø–∏—Å—å\n‚Ä¢ –§–æ–Ω–æ–≤—ã–π —à—É–º\n‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n‚Ä¢ –§–∞–π–ª –±–µ–∑ —Ä–µ—á–∏"
                if progress_message_id:
                    await self.edit_message(chat_id, progress_message_id, error_msg)
                else:
                    await self.send_message(chat_id, error_msg)
                return
            
            # –ü–æ–ø—ã—Ç–∫–∞ smart —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            summary = None
            if hasattr(self, "smart_summarizer") and self.smart_summarizer:
                try:
                    compression_level = self.get_user_compression_level(user_id)
                    target_ratio = compression_level / 100.0
                    
                    smart_result = await self.smart_summarizer.smart_summarize(
                        transcript, 
                        source_type="audio", 
                        source_name=filename_hint, 
                        compression_ratio=target_ratio
                    )
                    
                    if smart_result.get('success'):
                        summary = smart_result.get('summary', '')
                except Exception as e:
                    logger.warning(f"SmartSummarizer –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # –§–æ–ª–±—ç–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq
            if not summary and self.groq_client:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ su–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    compression_level = self.get_user_compression_level(user_id)
                    target_ratio = compression_level / 100.0
                    summary = await self.summarize_text(transcript, target_ratio)
                except Exception as e:
                    logger.warning(f"Groq —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            if not summary:
                summary = "–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n" + transcript[:1000] + ("..." if len(transcript) > 1000 else "")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            duration_text = f" ({format_duration(duration)})" if duration else ""
            final_message = f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n{summary}"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(final_message) > 4000:
                summary_limit = 4000 - len(f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n") - 50
                summary = summary[:summary_limit] + "..."
                final_message = f"üéß {audio_info}{duration_text}\n\nüìã **–°–∞–º–º–∞—Ä–∏:**\n{summary}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if progress_message_id and isinstance(progress_message_id, int):
                try:
                    await self.edit_message(chat_id, progress_message_id, final_message)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    await self.send_message(chat_id, final_message)
            else:
                await self.send_message(chat_id, final_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            try:
                username = message["from"].get("username", "")
                self.db.save_user_request(user_id, username, len(transcript), len(summary) if summary else 0, 0.0, 'audio_processing')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ\n\n{str(e)[:200]}..."
            
            if progress_message_id:
                await self.edit_message(chat_id, progress_message_id, error_msg)
            else:
                await self.send_message(chat_id, error_msg)
        
        finally:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)
    
    async def edit_message(self, chat_id: int, message_id: int, text: str, reply_markup: Optional[dict] = None, parse_mode: Optional[str] = None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            url = f"{self.base_url}/editMessageText"
            data = {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": text,
                "parse_mode": parse_mode or "Markdown"
            }
            
            if reply_markup:
                data["reply_markup"] = reply_markup
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def summarize_file_content(self, text: str, file_name: str = "", file_type: str = "", compression_ratio: float = 0.3) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Groq API"""
        try:
            if not self.groq_client:
                return "‚ùå Groq API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            max_chars = 15000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            original_length = len(text)
            
            if len(text) > max_chars:
                text = text[:max_chars] + "...\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏]"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—é–º–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
            target_length = int(original_length * compression_ratio)
            
            if target_length < 200:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ
                summary_length = "100-200 —Å–ª–æ–≤"
                max_tokens = 250
            elif target_length < 800:  # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
                summary_length = "200-500 —Å–ª–æ–≤"
                max_tokens = 550
            else:  # –î–ª–∏–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
                summary_length = "400-800 —Å–ª–æ–≤"
                max_tokens = 850
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            file_type_desc = {
                '.pdf': 'PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.docx': 'Word –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.doc': 'Word –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '.txt': '—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞'
            }.get(file_type, '–¥–æ–∫—É–º–µ–Ω—Ç–∞')
            
            prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ {file_type_desc} –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—é–º–µ:
- –î–ª–∏–Ω–∞: {summary_length} (—Å–∂–∞—Ç–∏–µ {compression_ratio:.0%})
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ:
üìù **–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –∏–¥–µ–∏ (2-3 –ø—É–Ω–∫—Ç–∞)

üîç **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ (3-5 –ø—É–Ω–∫—Ç–æ–≤)

üí° **–í—ã–≤–æ–¥—ã:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (1-2 –ø—É–Ω–∫—Ç–∞)

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Ä–µ–∑—é–º–µ, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
{text}"""
            
            response = self.groq_client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="llama-3.3-70b-versatile",
                temperature=0.3,
                max_tokens=max_tokens,
                top_p=0.9,
                stream=False
            )
            
            if response.choices and response.choices[0].message:
                summary = response.choices[0].message.content
                if summary:
                    return summary.strip()
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)[:100]}"
    
    async def handle_update(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
            
            if "callback_query" in update:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
                await self.handle_callback_query(update)
            elif "message" in update:
                message = update["message"]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {message}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–æ–±—ã—á–Ω–æ–º –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º)
                text = None
                chat_id = message["chat"]["id"]
                user_id = message["from"]["id"]
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                def extract_text_from_message_handle_update(msg):
                    text = None
                    if "text" in msg:
                        text = msg["text"]
                    elif "caption" in msg:
                        text = msg["caption"]
                    
                    logger.info(f"DEBUG handle_update extract: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
                    
                    # –î–ª—è –∫–æ–º–∞–Ω–¥ - –ù–ï –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    if text and text.startswith('/'):
                        logger.info(f"DEBUG handle_update extract: –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å: '{text}'")
                        return text.strip()
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
                    if text:
                        try:
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
                            import re
                            # –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
                            text = '\n'.join(line.strip() for line in text.split('\n'))
                            # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
                            text = re.sub(r' +', ' ', text)
                            # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
                            text = re.sub(r'\n{3,}', '\n\n', text)
                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            text = text.strip()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (–Ω–µ –∫–æ–º–∞–Ω–¥)
                            # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã - —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
                            clean_text = ''.join(c for c in text if not c.isspace())
                            if len(clean_text) < 5:  # –£–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º—É–º –¥–ª—è emoji
                                logger.warning(f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: '{text[:100]}'")
                                return None
                                
                            logger.info(f"–¢–µ–∫—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: –±—ã–ª–æ {len(msg.get('text', msg.get('caption', '')))}, —Å—Ç–∞–ª–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return text
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                            return text.strip() if text else None
                    
                    return None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö)
                text = extract_text_from_message_handle_update(message)
                logger.info(f"DEBUG handle_update: –†–µ–∑—É–ª—å—Ç–∞—Ç extract_text_from_message: '{text}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
                if text and text in ['üìã –ú–µ–Ω—é', 'üìã Menu']:
                    await self.handle_menu_button(update)
                    return
                
                if text:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    if "forward_from" in message or "forward_from_chat" in message or "forward_origin" in message:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text[:50]}...'")
                    else:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text[:50]}...'")

                
                if text:
                    logger.info(f"DEBUG: –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: '{text}'")
                    if text.startswith("/"):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                        logger.info(f"DEBUG: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã: {text}")
                        if text == "/start":
                            await self.handle_start_command(update)
                        elif text == "/help":
                            await self.handle_help_command(update)
                        elif text == "/stats":
                            await self.handle_stats_command(update)
                        elif text == "/smart":
                            await self.handle_smart_mode_command(update)

                        elif text in ["/10"]:
                            await self.handle_compression_command(update, 10)
                        elif text in ["/30"]:
                            await self.handle_compression_command(update, 30)
                        elif text in ["/50"]:
                            await self.handle_compression_command(update, 50)
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}")
                            await self.send_message(
                                chat_id,
                                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                            )
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
                        if text.strip() in ["10%", "30%", "50%"]:
                            compression_level = int(text.strip().replace('%', ''))
                            await self.handle_compression_command(update, compression_level)
                        elif user_id in self.user_states:
                            current_step = self.user_states[user_id].get("step")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–º
                            if current_step == "compression_level" and text.strip() in ["10%", "30%", "50%"]:
                                compression_level = text.strip().replace("%", "")
                                self.user_settings[user_id] = {"compression": compression_level, "format": "bullets"}
                                self.user_states[user_id]["step"] = "waiting_text"
                                await self.send_text_request(chat_id, user_id)
                                return
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
                            elif current_step == "waiting_text":
                                if text.strip().lower() == "ok" and user_id in self.user_messages_buffer and len(self.user_messages_buffer[user_id]) > 0:
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    await self.process_custom_summarization(chat_id, user_id)
                                    return
                                else:
                                    await self.handle_custom_summarize_text(update, text)
                                    return

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)
                        if text.strip() in ["10%", "30%", "50%"] and user_id not in self.user_states:
                            compression_level = text.strip().replace("%", "")
                            self.user_states[user_id] = {"step": "waiting_text"}
                            self.user_settings[user_id] = {"compression": compression_level, "format": "bullets"}
                            self.user_messages_buffer[user_id] = []
                            
                            await self.send_text_request(chat_id, user_id)
                            return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                        if user_id in self.user_states and self.user_states[user_id].get("step") == "waiting_text":
                            await self.handle_custom_summarize_text(update, text)
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ YouTube URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            youtube_urls = self.youtube_processor.extract_youtube_urls(text)
                            if youtube_urls:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –≤–∏–¥–µ–æ
                                await self.handle_youtube_message(update, youtube_urls)
                                return
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ã—á–Ω—ã–µ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            urls = self.extract_urls_from_message(text)
                            if urls:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL
                                await self.handle_url_message(update, urls)
                                return
                            
                            # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ handle_text_message
                            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                            if not self.check_user_rate_limit(user_id):
                                await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
                                return
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                            if user_id in self.processing_users:
                                await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                                return
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (—Å —É—á–µ—Ç–æ–º emoji)
                            # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
                            significant_chars = ''.join(c for c in text if not c.isspace())
                            if len(significant_chars) < 20:  # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º emoji
                                await self.send_message(chat_id, f"üìù –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 –∑–Ω–∞—á–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–í–∞—à —Ç–µ–∫—Å—Ç: {len(significant_chars)} —Å–∏–º–≤–æ–ª–æ–≤.")
                                return
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
                            self.processing_users.add(user_id)
                            
                            try:
                                username = update["message"]["from"].get("username", "")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                processing_response = await self.send_message(chat_id, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
                                processing_message_id = processing_response.get("result", {}).get("message_id") if processing_response else None
                                
                                start_time = time.time()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                                smart_mode = self.user_settings.get(user_id, {}).get("smart_mode", False)
                                
                                if smart_mode and self.smart_summarizer:
                                    # –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                                    user_compression_level = self.get_user_compression_level(user_id)
                                    target_ratio = user_compression_level / 100.0
                                    
                                    smart_result = await self.smart_summarizer.smart_summarize(
                                        text, source_type="text", 
                                        source_name="—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                                        compression_ratio=target_ratio
                                    )
                                    processing_time = time.time() - start_time
                                    summary = self.smart_summarizer.format_smart_response(
                                        smart_result, "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", len(text), processing_time
                                    )
                                else:
                                    # –û–±—ã—á–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                                    user_compression_level = self.get_user_compression_level(user_id)
                                    target_ratio = user_compression_level / 100.0
                                    summary = await self.summarize_text(text, target_ratio=target_ratio)
                                    processing_time = time.time() - start_time
                                
                                if summary and not summary.startswith("‚ùå"):
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                    try:
                                        self.db.save_user_request(user_id, username, len(text), len(summary), processing_time, 'groq')
                                    except Exception as save_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                    compression_ratio = len(summary) / len(text)
                                    
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                                    response_text = f"""üìã –°–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ! (–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {user_compression_level}%)

{summary}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º–º–∞—Ä–∏: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"""
                                    
                                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                                    if processing_message_id:
                                        await self.delete_message(chat_id, processing_message_id)
                                    
                                    await self.send_message(chat_id, response_text)
                                    
                                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–∂–∞—Ç–∏–µ: {compression_ratio:.1%}")
                                    
                                else:
                                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                                    if processing_message_id:
                                        await self.delete_message(chat_id, processing_message_id)
                                    
                                    await self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                                    
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                                await self.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                            
                            finally:
                                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
                                self.processing_users.discard(user_id)
                elif "audio" in message or "voice" in message or "video_note" in message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–∫–æ–≤
                    if ("forward_from" in message) or ("forward_from_chat" in message) or ("forward_origin" in message):
                        logger.info("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ/voice/video_note –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ handle_audio_message")
                    await self.handle_audio_message(update)
                    return
                elif "document" in message:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º
                    from utils.tg_audio import is_audio_document
                    
                    doc = message["document"]
                    
                    if is_audio_document(doc):
                        if ("forward_from" in message) or ("forward_from_chat" in message) or ("forward_origin" in message):
                            logger.info("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ handle_audio_message")
                        await self.handle_audio_message(update)
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, DOC, TXT)
                        await self.handle_document_message(update)
                    return
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–æ–π –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
                    if any(key in message for key in ['photo', 'video', 'sticker', 'animation', 'video_note']):
                        # –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                    else:
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ–µ - —Ç–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                        logger.warning(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {message}")
                        await self.send_message(chat_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    async def get_updates(self, offset = None, timeout: int = 30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        url = f"{self.base_url}/getUpdates"
        params = {
            "timeout": timeout,
            "allowed_updates": ["message", "callback_query"]
        }
        
        if offset:
            params["offset"] = offset
        
        logger.info(f"üîÑ GET_UPDATES: –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å offset={offset}, timeout={timeout}")
        logger.info(f"üîÑ GET_UPDATES: Allowed updates: {params['allowed_updates']}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    result = await response.json()
                    
                    if result and result.get("ok"):
                        update_list = result.get("result", [])
                        logger.info(f"üîÑ GET_UPDATES: –ü–æ–ª—É—á–µ–Ω–æ {len(update_list)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                        for update in update_list:
                            if "message" in update:
                                msg = update["message"]
                                logger.info(f"üì® GET_UPDATES: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.get('from', {}).get('id', 'unknown')}: {msg.get('text', msg.get('caption', 'no_text'))[:50]}")
                    
                    return result
        except Exception as e:
            logger.error(f"‚ùå GET_UPDATES ERROR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            import traceback
            logger.error(f"üîç GET_UPDATES TRACEBACK: {traceback.format_exc()}")
            return None
    
    async def clear_webhook(self):
        """–û—á–∏—Å—Ç–∫–∞ webhook –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ 409"""
        try:
            url = f"{self.base_url}/deleteWebhook"
            params = {"drop_pending_updates": "true"}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, params=params) as response:
                    result = await response.json()
                    if result.get("ok"):
                        logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        return True
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {result}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
            return False

    async def clear_custom_keyboards(self, chat_id):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": "üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...",
                "reply_markup": json.dumps({"remove_keyboard": True})
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    if result.get("ok"):
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                        message_id = result["result"]["message_id"]
                        await asyncio.sleep(1)
                        await self.delete_message(chat_id, message_id)
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            await self.clear_all_commands()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            commands = [
                {
                    "command": "help",
                    "description": "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                },
                {
                    "command": "stats", 
                    "description": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                },
                {
                    "command": "smart",
                    "description": "üß† –£–º–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º"
                },
                {
                    "command": "10",
                    "description": "üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (10%)"
                },
                {
                    "command": "30",
                    "description": "üìù –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (30%)"
                },
                {
                    "command": "50",
                    "description": "üìÑ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (50%)"
                }
            ]
            
            url = f"{self.base_url}/setMyCommands"
            data = {"commands": json.dumps(commands)}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    if result.get("ok"):
                        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: /help, /stats, /10, /30, /50")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {result}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    
    async def clear_all_commands(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            url = f"{self.base_url}/deleteMyCommands"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url) as response:
                    result = await response.json()
                    if result.get("ok"):
                        logger.info("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {result}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Simple Telegram Bot")
        
        # –û—á–∏—â–∞–µ–º webhook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ 409
        await self.clear_webhook()
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await self.setup_bot_commands()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        try:
            url = f"{self.base_url}/getMe"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    me_response = await response.json()
                    if me_response and me_response.get("ok"):
                        bot_info = me_response.get("result", {})
                        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: {bot_info.get('first_name', 'Unknown')}")
                    else:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
                        return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return
        
        offset = None
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        while True:
            try:
                updates = await self.get_updates(offset=offset, timeout=30)
                
                if updates and updates.get("ok"):
                    update_list = updates.get("result", [])
                    if update_list:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(update_list)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    
                    for update in update_list:
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update.get('update_id')}")
                        await self.handle_update(update)
                        offset = update["update_id"] + 1
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω offset: {offset}")
                else:
                    if updates:
                        error_code = updates.get("error_code")
                        if error_code == 409:
                            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞
                            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç 409 - –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω")
                            logger.info("–û—á–∏—Å—Ç–∫–∞ webhook –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                            await self.clear_webhook()
                            await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
                            continue
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates}")
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
    
    async def handle_url_message(self, update: dict, urls: list):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""
        message = update["message"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        
        logger.info(f"üîó URL –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –∑–∞ —Ä–∞–∑
        urls_to_process = urls[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 URL –∑–∞ —Ä–∞–∑
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_response = await self.send_message(
            chat_id, 
            f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(urls_to_process)} –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü{'—É' if len(urls_to_process) == 1 else '—ã'}...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        processing_message_id = processing_response.get("result", {}).get("message_id") if processing_response else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)
        
        try:
            username = message["from"].get("username", "")
            successful_summaries = 0
            
            for i, url in enumerate(urls_to_process):
                try:
                    logger.info(f"üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ URL {i+1}/{len(urls_to_process)}: {url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ–º–µ–Ω
                    if not self.is_url_allowed(url):
                        await self.send_message(
                            chat_id,
                            f"‚ùå –î–æ–º–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {urlparse(url).netloc}\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
                        )
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
                    start_time = time.time()
                    try:
                        from content_extraction import extract_url
                        extracted_page = await extract_url(url)
                        content_result = {
                            'success': True,
                            'content': extracted_page.text,
                            'title': extracted_page.title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
                            'links': extracted_page.links[:5],  # –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫
                            'word_count': extracted_page.word_count,
                            'char_count': extracted_page.char_count
                        }
                    except Exception as e:
                        logger.warning(f"–ù–æ–≤—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {url}: {e}")
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                        content_result = self.extract_webpage_content(url)
                    
                    if not content_result['success']:
                        await self.send_message(
                            chat_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url[:50]}...:\n{content_result['error']}"
                        )
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if len(content_result['content']) < 100:
                        await self.send_message(
                            chat_id,
                            f"‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url[:50]}...\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞."
                        )
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_compression_level = self.get_user_compression_level(user_id)
                    target_ratio = user_compression_level / 100.0
                    
                    # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
                    summary = await self.summarize_text(content_result['content'], target_ratio=target_ratio)
                    
                    if summary and not summary.startswith("‚ùå"):
                        # –£—Å–ø–µ—à–Ω–∞—è AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                        processing_time = time.time() - start_time
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        try:
                            self.db.save_user_request(user_id, username, len(content_result['content']), len(summary), processing_time, 'groq_web')
                        except Exception as save_error:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        compression_ratio = len(summary) / len(content_result['content'])
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        links_section = ""
                        if 'links' in content_result and content_result['links']:
                            links_list = []
                            for link in content_result['links'][:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫
                                link_text = link.get('text', '').strip()[:50]
                                if link_text and len(link_text) > 5:
                                    links_list.append(f"‚Ä¢ {link_text}")
                            
                            if links_list:
                                links_section = f"""

üîó –°—Å—ã–ª–∫–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏:
{chr(10).join(links_list)}"""

                        response_text = f"""üìÑ –†–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏ (–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {user_compression_level}%)

üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {content_result['title'][:100]}
üìé –°—Å—ã–ª–∫–∞: {url}

üìù –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
{summary}{links_section}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(content_result['content']):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º–º–∞—Ä–∏: {len(summary):,} —Å–∏–º–≤–æ–ª–æ–≤  
‚Ä¢ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"""

                        await self.send_message(chat_id, response_text)
                        successful_summaries += 1
                        
                        logger.info(f"üîó –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω URL {i+1}/{len(urls_to_process)}: {url}")
                        
                    else:
                        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                        simple_summary = self.simple_text_summary(content_result['content'])
                        processing_time = time.time() - start_time
                        
                        response_text = f"""üìÑ –†–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)

üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {content_result['title'][:100]}
üìé –°—Å—ã–ª–∫–∞: {url}

üìù –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
{simple_summary}

‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(content_result['content']):,} —Å–∏–º–≤–æ–ª–æ–≤"""

                        await self.send_message(chat_id, response_text)
                        successful_summaries += 1
                        
                        logger.info(f"üîó –û–±—Ä–∞–±–æ—Ç–∞–Ω URL —Å fallback {i+1}/{len(urls_to_process)}: {url}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {str(e)}")
                    await self.send_message(
                        chat_id,
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url[:50]}...: {str(e)}"
                    )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if processing_message_id:
                await self.delete_message(chat_id, processing_message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if successful_summaries > 0:
                if len(urls) > 3:
                    await self.send_message(
                        chat_id,
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_summaries} –∏–∑ {len(urls_to_process)} —Å—Å—ã–ª–æ–∫\n\nüí° –ú–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏ –∑–∞ —Ä–∞–∑. –û—Å—Ç–∞–≤—à–∏–µ—Å—è {len(urls) - 3} —Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ."
                    )
                else:
                    await self.send_message(
                        chat_id,
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_summaries} –∏–∑ {len(urls_to_process)} —Å—Å—ã–ª–æ–∫"
                    )
            else:
                await self.send_message(
                    chat_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if processing_message_id:
                await self.delete_message(chat_id, processing_message_id)
            
            await self.send_message(
                chat_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    async def delete_message(self, chat_id: int, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.base_url}/deleteMessage"
            data = {
                "chat_id": chat_id,
                "message_id": message_id
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    return result.get("ok", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    


    async def handle_direct_compression_command(self, update: dict, compression_level: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–∂–∞—Ç–∏—è /10, /30, /50"""
        chat_id = update["message"]["chat"]["id"]
        user_id = update["message"]["from"]["id"]
        
        logger.info(f"üöÄ DIRECT COMPRESSION: –ö–æ–º–∞–Ω–¥–∞ /{compression_level} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {"step": "format_selection"}
        self.user_settings[user_id] = {"compression": compression_level}
        self.user_messages_buffer[user_id] = []
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–∑—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.user_states[user_id]["step"] = "waiting_text"
        self.user_settings[user_id]["format"] = "bullets"  # –í—Å–µ–≥–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
        await self.send_text_request(chat_id, user_id)

    async def handle_youtube_message(self, update: dict, youtube_urls: list):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å YouTube URL –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
        from utils.tg_audio import format_duration
        
        message = update["message"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        
        logger.info(f"üé• YouTube –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(youtube_urls)} —Å—Å—ã–ª–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not self.check_user_rate_limit(user_id):
            await self.send_message(chat_id, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫. –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if user_id in self.processing_users:
            await self.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–º–∞–∫—Å–∏–º—É–º 1)
        youtube_url_info = youtube_urls[0]
        url = youtube_url_info['url']
        
        if len(youtube_urls) > 1:
            await self.send_message(
                chat_id,
                "‚ö†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ YouTube –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_response = await self.send_message(
            chat_id, 
            "üé• –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É YouTube –≤–∏–¥–µ–æ...\n\n‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ..."
        )
        processing_message_id = processing_response.get("result", {}).get("message_id") if processing_response else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_users.add(user_id)
        
        try:
            username = message["from"].get("username", "")
            start_time = time.time()
            
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ
            await self.edit_message(
                chat_id, processing_message_id,
                "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ..."
            )
            
            validation = self.youtube_processor.validate_youtube_url(url)
            if not validation['valid']:
                await self.edit_message(
                    chat_id, processing_message_id,
                    f"‚ùå {validation['error']}"
                )
                return
            
            video_title = validation['title']
            video_duration = validation['duration']
            video_uploader = validation['uploader']
            
            # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await self.edit_message(
                chat_id, processing_message_id,
                f"üìù –ò–∑–≤–ª–µ–∫–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ...\nüìπ {video_title[:60]}..."
            )
            
            content_result = self.youtube_processor.extract_video_info_and_subtitles(url)
            if not content_result['success']:
                await self.edit_message(
                    chat_id, processing_message_id,
                    f"‚ùå {content_result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏."
                )
                return
            
            # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
            await self.edit_message(
                chat_id, processing_message_id,
                "ü§ñ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Groq AI..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_compression_level = self.get_user_compression_level(user_id)
            
            summary_result = self.youtube_processor.summarize_youtube_content(
                content_result['text'],
                video_title,
                video_duration
            )
            
            if not summary_result['success']:
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ
                summary_result = self.youtube_processor.create_fallback_summary(
                    content_result['text'],
                    video_title
                )
            
            processing_time = time.time() - start_time
            
            if summary_result['success']:
                summary_text = summary_result['summary']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    self.db.save_user_request(
                        user_id, username, 
                        len(content_result['text']), 
                        len(summary_text), 
                        processing_time, 
                        'groq_youtube'
                    )
                except Exception as save_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è YouTube –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {save_error}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                duration_str = format_duration(video_duration)
                content_length = len(content_result['text'])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                sources = []
                if content_result.get('has_subtitles'):
                    sources.append("—Å—É–±—Ç–∏—Ç—Ä—ã")
                if content_result.get('has_description'):
                    sources.append("–æ–ø–∏—Å–∞–Ω–∏–µ")
                sources_text = " + ".join(sources) if sources else "–¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                
                response = f"""üé• **–†–µ–∑—é–º–µ YouTube –≤–∏–¥–µ–æ** (–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {user_compression_level}%)

üì∫ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {video_title}
üë§ **–ê–≤—Ç–æ—Ä:** {video_uploader}
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration_str}
üîó **–°—Å—ã–ª–∫–∞:** {url}

üìã **–†–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:**
{summary_text}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞: {sources_text}
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {content_length:,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –†–µ–∑—é–º–µ: {len(summary_text):,} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å
‚Ä¢ –ú–µ—Ç–æ–¥: yt-dlp + Groq (Llama 3.3)"""

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self.edit_message(
                    chat_id, processing_message_id,
                    response
                )
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ YouTube –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {video_title[:50]}...")
                
            else:
                await self.edit_message(
                    chat_id, processing_message_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ –≤–∏–¥–µ–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube –≤–∏–¥–µ–æ: {str(e)}")
            await self.edit_message(
                chat_id, processing_message_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.processing_users.discard(user_id)

    async def edit_message(self, chat_id: int, message_id: int, text: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message_id:
            return
            
        url = f"{self.base_url}/editMessageText"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text[:4096],
            "parse_mode": "Markdown",
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if not result.get("ok") and "can't parse entities" in result.get("description", ""):
                        logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        data_plain = {
                            "chat_id": chat_id,
                            "message_id": message_id,
                            "text": text[:4096],
                            "disable_web_page_preview": True
                        }
                        async with session.post(url, json=data_plain) as response_plain:
                            result = await response_plain.json()
                    
                    if not result.get("ok"):
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {result}")
                    return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleTelegramBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())